@model AssetAttachmentSearchModel
<!-- #region Page Header -->
<div class="page-bar">
    <ul class="page-breadcrumb"></ul>
    <div class="page-toolbar">
        <div class="pull-right">
            <a data-action="create" href="javascript:void(0)" class="btn blue btn-sm"><i class="flaticon2-plus"></i>@T("Common.Assets.AddNew")</a>
            <a data-action="transfer" href="javascript:void(0)" class="btn btn-primary btn-sm"><i class="fa fa-exchange" aria-hidden="true"></i>@T("Common.Assets.Transfer")</a>
            <a data-action="maintain" href="javascript:void(0)" class="btn btn-success btn-sm"><i class="fa fa-wrench" aria-hidden="true"></i>@T("Common.Assets.Mantain")</a>
            <a data-action="recall" href="javascript:void(0)" class="btn btn-danger btn-sm"><i class="fa fa-undo" aria-hidden="true"></i>@T("Common.Assets.Recall")</a>          
            @*<a data-action="export" href="javascript:void(0)" class="btn purple btn-sm"><i class="fa fa-print"></i> @T("Common.ExportData")</a>*@
        </div>
    </div>
</div>

<!-- #endregion -->
<!-- #region Page Content -->

<div class="splitter fixed-layout-split" data-position="230px">
    <div class="leftPane" style="border: 1px solid lightgray; border-right: 5px solid lightgray">        
        <div id="treeOrganization">

        </div>
    </div>
    <div class="rightPane">
        <div class="page-data" style="overflow: hidden">
            <div class="row search-form">
                <form>
                    <div class="search-label">
                        @T("Common.Search"):
                    </div>
                    <div class="col-md-4">
                        <div class="form-group form-group-sm">
                            <div class="input-icon right">
                                <i class="fa fa-angle-down search-extend tooltips" data-container="body" data-original-title="@T("Common.ShowSearchOptions")" data-toggle="dropdown" data-close-others="true" aria-expanded="true"></i>
                                @Html.TextBoxFor(m => m.Keywords, new { @class = "form-control", placeholder = T("Common.Fields.EnterKeywords") })
                            <div class="search-extend-bd dropdown-menu hold-on-click">
                                <div class="row">
                                    <div class="form-group form-group-sm">
                                        @Html.XBaseLabelFor(m => m.FromDate)
                                        <div class="row">
                                            <div class="col-md-6">
                                                @Html.EditorFor(m => m.FromDate, new { htmlAttributes = new { @class = "form-control", placeholder = T("Common.Fields.FromDate"), style = "border-right: none" } })
                                            </div>
                                            <div class="col-md-6">
                                                @Html.EditorFor(m => m.ToDate, new { htmlAttributes = new { @class = "form-control", placeholder = T("Common.Fields.ToDate"), style = "border-right: none" } })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group form-group-sm">
                                        @Html.XBaseLabelFor(m => m.ProjectCode)
                                        @Html.DropDownListFor(m => m.ProjectCode, (IEnumerable<SelectListItem>)ViewData["projects"], T("Common.Fields.ProjectName"), new { @class = "form-control", @style = "width: 100%" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group form-group-sm">
                                        @Html.XBaseLabelFor(m => m.CategoryId)
                                        @Html.DropDownListFor(m => m.CategoryId, (IEnumerable<SelectListItem>)ViewData["categories"], T("Common.Fields.AssetCategory"), new { @class = "form-control", @style = "width: 100%" })
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="form-group form-group-sm">
                            <button type="submit" id="btnSearch" class="btn btn-default btn-sm">
                                <i class="fa fa-search"></i> @T("Common.GetData")
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="row full-height">
                @(Html.Kendo().Grid<AssetAttachmentModel>()
                        .Name("grd")
                        .HtmlAttributes(new { style = "height: 100%" })
                        .Columns(columns =>
                        {
                            columns.Select().Locked().Width(30);
                            columns.Bound(x => x.AllocationDate).Locked().Format("{0:dd/MM/yyyy}").Width(100).Title("Ngày cấp");
                            columns.Bound(x => x.Owner).Locked().Width(150);
                            columns.Bound(x => x.Code).Locked().Width(150);
                            columns.Bound(x => x.Name).Locked().ClientTemplate("#=grd.tmp.name(Name)#").Width(250);
                            columns.Bound(x => x.IpAddress).Width(150);
                            columns.ForeignKey(x => x.CategoryId, (System.Collections.IEnumerable)ViewData["categories"], "Value", "Text").Width(150);
                            columns.Bound(x => x.OriginQuantity).Format("{0:n2}").Width(150).RightAlign();
                            columns.Bound(x => x.Serial).Width(150);
                            columns.ForeignKey(x => x.CurrentUsageStatus, (System.Collections.IEnumerable)ViewData["assetStatus"], "Value", "Text").Width(150);
                            columns.Bound(x => x.BuildingNumber).Width(150);
                            columns.Bound(x => x.FloorNumber).Width(150);
                            columns.Bound(x => x.MaintenancedDate).Format("{0:dd/MM/yyyy}").Width(150);
                            columns.Bound(x => x.RecallQuantity).Format("{0:n2}").Width(150).RightAlign();
                            columns.Bound(x => x.BrokenQuantity).Format("{0:n2}").Width(150).RightAlign();
                            columns.Bound(x => x.SoldQuantity).Format("{0:n2}").Width(150).RightAlign();
                            columns.Bound(x => x.BalanceQuantity).Format("{0:n2}").Width(150).RightAlign();
                            columns.Bound(x => x.UnitName).Width(100);
                            columns.Bound(x => x.OrganizationUnitName).Width(150);
                            columns.Bound(x => x.ProjectName).Width(150);
                            columns.Bound(x => x.ProjectAddress).Width(150);
                            columns.Bound(x => x.ProjectCategory).Width(150);
                            columns.Bound(x => x.ProjectProvince).Width(150);
                            columns.Bound(x => x.ProjectArea).Width(150);
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .ServerOperation(true)
                            .PageSize(AdminAreaSettings.GridPageSize)
                            .Read(read => read.Action("Get", "AssetAttachment").Data("grd.data"))
                        )
                        .NoRecords()
                        .AutoBind(false)
                        .Scrollable(scr => scr.Enabled(true))
                        .Pageable(pageable => pageable.ButtonCount(AdminAreaSettings.GridButtonCount).Info(true).Input(true).Numeric(true).PageSizes(AdminAreaSettings.GridPageSizeOptions).PreviousNext(true).Refresh(true))
                        .Selectable(selectable => selectable.Type(GridSelectionType.Row).Mode(GridSelectionMode.Multiple))
                        .Navigatable())
            </div>
        </div>
    </div>
</div>


<ul id="mnu" style="display: none">
    <li data-action="details">
        <i class="flaticon-eye font-blue-dark"></i> @T("Common.Details")
    </li>
    <li data-action="create">
        <i class="flaticon2-plus font-blue"></i> @T("Common.Assets.AddNew")
    </li>
    <li data-action="edit">
        <i class="flaticon2-pen font-yellow"></i> @T("Common.Edit")
    </li>    
    <li class="k-separator"></li>
    <li data-action="refresh">
        <i class="flaticon-refresh font-green"></i> @T("Common.Refresh")
    </li>
    <li data-action="deletes">
        <i class="flaticon-delete font-red"></i> @T("Common.Delete")
    </li>
</ul>
<!-- #endregion -->
<!-- #region Scripts -->
@section HeadScripts {
    <script>
        // Fields
        var master = {
            urlTree: '@Url.Action("GetTree")',
            urlDetails: '@Url.Action("Details")',
            urlCreate: '@Url.Action("Create")',
            urlEdit: '@Url.Action("Edit")',
            urlDeletes: '@Url.Action("Deletes")',
            urlActivates: '@Url.Action("Activates")',
            urlExport: '@Url.Action("ExportOrder")',
            urlExcel: '@Url.Action("GetExcelData")',
            urlRecall: '@Url.Action("Recall")',
            urlMaintain: '@Url.Action("Maintenance")',
            urlTransference: '@Url.Action("Transference")',
            toolbar: {
                el: '.page-toolbar',
                $el: {},
                actions: {
                    init: function () { }
                },
                init: function () { }
            },
            grd: {
                el: '#grd',
                $el: {},
                api: {},
                actions: {
                    init: function () { }
                },
                tmp: {
                    name: function (id, name) { },
                    activate: function (activate) { }
                },
                data: function () { },
                init: function () { }
            },
            treeOrganization: {
                el: '#treeOrganization',
                $el: {},
                api: {},
                init: function () { }
            },
            mnu: {
                el: '#mnu',
                $el: {},
                api: {},
                init: function () { }
            },
            btnSearch: {
                el: '#btnSearch',
                $el: {},
                init: function () { }
            },
            btnRecall: {
                el: 'a[data-action="recall"]',
                $el: {},
                init: function () { }
            },
            btnMaintain: {
                el: 'a[data-action="maintain"]',
                $el: {},
                init: function () { }
            },
            btnTransference: {
                el: 'a[data-action="transfer"]',
                $el: {},
                init: function () { }
            },
            btnExportExcel: {
                el: 'a[data-action="export"]',
                $el: {},
                init: function () { }
            },
            init: function () { },
            details: function (id) { },
            create: function () { },
            edit: function (id) { },
            deletes: function () { },
            refresh: function () { },
            actionCallback: function () { },
            export: function () { }
        };
        var toolbar = master.toolbar;
        var grd = master.grd;
        var mnu = master.mnu;
        var btnSearch = master.btnSearch;
        var treeOrganization = master.treeOrganization;
        var btnRecall = master.btnRecall;
        var btnMaintain = master.btnMaintain;
        var btnTransference = master.btnTransference;
        var btnExportExcel = master.btnExportExcel;

        grd.data = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var $fromDate = $('#@Html.FieldIdFor(m => m.FromDate)');
            var $toDate = $('#@Html.FieldIdFor(m => m.ToDate)');
            var $projectCode = $('#@Html.FieldIdFor(m => m.ProjectCode)');
            var $categoryId = $('#@Html.FieldIdFor(m => m.CategoryId)');
            var organizationId = null;

            if (!_.isEmpty(treeOrganization.api) && treeOrganization.api.getActiveNode()) {
                organizationId = treeOrganization.api.activeNode.key;
            }

            var searchModel = {
                Keywords: $keywords.val(),
                OrganizationId: organizationId,
                FromDate: $fromDate.val(),
                ToDate: $toDate.val(),
                ProjectCode: $projectCode.val(),
                CategoryId: $categoryId.val()
            };
            return searchModel;
        };
    </script>
}

@section Scripts {
    <script>
        @*master.export = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var searchModel = {
                Keywords: $("#Keywords").val(),
                PageIndex: grd.api.dataSource.page(),
                PageSize: grd.api.dataSource.pageSize()
            };
            $.ajax({
                url: '@Url.Action("GetExcelReport")',
                data: searchModel,
                success: function (data) {
                    window.location = '@Url.Action("DownloadExcel")' + '?fileGuid=' + data.FileGuid
                        + '&fileName=' + data.FileName;
                }
            });
        };*@

        // Methods
        master.details = function() {
            var id = grd.api.selectedIds()[0];
            if (id) {
                $.pjax({ url: `${master.urlDetails}/${id}` });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.create = function () {
            $.pjax({ url: master.urlCreate });
        };
        master.edit = function() {
            var id = grd.api.selectedIds()[0];
            if (id) {
                $.pjax({ url: `${master.urlEdit}/${id}` });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.deletes = function() {
            var ids = grd.api.selectedIds();
            if (ids.length > 0) {
                app.window.deletes.open({ url: master.urlDeletes, ids: ids, options: { width: '450px' }, callback: master.actionCallback });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.refresh = function() {
            grd.api.reload();
        };
        master.actionCallback = function() {
            grd.api.reload();
        };

        // Inits
        master.init = function() {
            toolbar.init();
            grd.init();
            mnu.init();
            btnSearch.init();
            treeOrganization.init();
            btnRecall.init();
            btnMaintain.init();
            btnTransference.init();
            btnExportExcel.init();
        };

        toolbar.init = function() {
            toolbar.$el = $(toolbar.el);

            toolbar.actions.init();
        };
        toolbar.actions.init = function() {
            var $toolbar = toolbar.$el;
            //$toolbar.find('a[data-action="export"]').click(function (e) {
            //    master.export();
            //});

            admin.pageToolbar.actions.initCreate($toolbar, master.create);
        };
        grd.init = function() {
            grd.$el = $(grd.el);
            grd.api = grd.$el.data('kendoGrid');

            grd.actions.init();
        };
        grd.actions.init = function() {
            grd.api.initDblClick(master.edit);
            grd.api.initEdit(master.edit);
        };
        treeOrganization.init = function () {
            treeOrganization.$el = $(treeOrganization.el);
            treeOrganization.$el.fancytree({
                source: {
                    url: master.urlTree,
                    beforeSend: function (jqXHR, settings) {
                        grd.api.clear();
                    },
                    complete: function () {
                        var lastKeySelected = '@Model.OrganizationId';
                        if (lastKeySelected) {
                            $("#treeOrganization").fancytree("getTree").getNodeByKey(lastKeySelected).setActive();
                        }
                        else {
                            $("#treeOrganization").fancytree("getTree").getNodeByKey('2').setActive();
                        }
                    }
                },
                postProcess: function (event, data) {
                    data.result = data.response.data;
                },
                activate: function (event, data) {
                    $('#@Html.FieldIdFor(m => m.Keywords)').val("")
                    var node = data.node;
                    if (node.statusNodeType !== 'loading') {
                        grd.api.resetPage();
                    }
                }
            });
            treeOrganization.api = treeOrganization.$el.fancytree("getTree");
        };
        mnu.init = function() {
            mnu.$el = $(mnu.el);
            mnu.$el.kendoContextMenu({
                orientation: 'vertical',
                target: master.grd.el,
                filter: 'tbody tr[role="row"]',
                animation: {
                    open: { effects: "fadeIn" },
                    duration: 0
                },
                open: function(e) {
                    var $row = $(e.target);
                    var selected = master.grd.api.select().length;
                    if (selected === 0 || (!$row.hasClass('k-state-selected') && selected > 0)) {
                        master.grd.api.clearSelection();
                        master.grd.api.select($row);
                    }
                },
                select: function(e) {
                    var action = $(e.item).attr('data-action');
                    switch (action) {
                        case 'details':
                            master.details();
                            break;
                        case 'create':
                            master.create();
                            break;
                        case 'edit':
                            master.edit();
                            break;
                        case 'deletes':
                            master.deletes();
                            break;
                        case 'refresh':
                            master.refresh();
                            break;
                        default:
                            break;
                    }
                }
            });
            mnu.api = mnu.$el.data("kendoContextMenu");
        };
        btnSearch.init = function() {
            btnSearch.$el = $(btnSearch.el);

            const search = _.debounce(() => {
                grd.api.resetPage();
            }, app.ui.def.debounce.timeout);
            btnSearch.$el.click(function (e) {
                search();
                return false;
            });
        };
        btnRecall.init = function () {
            btnRecall.$el = $(btnRecall.el);

            btnRecall.$el.click(function (e) {
                var id = grd.api.selectedIds()[0];
                app.window.form.open({ url: `${master.urlRecall}/${id}`, options: { width: '450px' }, callback: master.actionCallback });
            });
        };
        btnMaintain.init = function () {
            btnMaintain.$el = $(btnMaintain.el);

            btnMaintain.$el.click(function (e) {
                var ids = grd.api.selectedIds();
                app.window.form.open({ url: master.urlMaintain + '?' + $.param({ ids: ids.toString() }), options: { width: '950px' }, callback: master.actionCallback });
            });
        };
        btnTransference.init = function () {
            btnTransference.$el = $(btnTransference.el);

            btnTransference.$el.click(function (e) {
                var id = grd.api.selectedIds()[0];
                app.window.form.open({ url: `${master.urlTransference}/${id}`, options: { width: '550px' }, callback: master.actionCallback });
            });
        };
        btnExportExcel.init = function () {
            btnExportExcel.$el = $(btnExportExcel.el);

            btnExportExcel.$el.click(function (e) {
                var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
                var $fromDate = $('#@Html.FieldIdFor(m => m.FromDate)');
                var $toDate = $('#@Html.FieldIdFor(m => m.ToDate)');
                var $projectCode = $('#@Html.FieldIdFor(m => m.ProjectCode)');
                var $categoryId = $('#@Html.FieldIdFor(m => m.CategoryId)');
                var organizationId = null;
                var pageIndex = grd.api.dataSource._page;
                var pageSize = grd.api.dataSource._pageSize;

                if (!_.isEmpty(treeOrganization.api) && treeOrganization.api.getActiveNode()) {
                    organizationId = treeOrganization.api.activeNode.key;
                }

                var searchModel = {
                    Keywords: $keywords.val(),
                    OrganizationId: organizationId,
                    FromDate: $fromDate.val(),
                    ToDate: $toDate.val(),
                    ProjectCode: $projectCode.val(),
                    CategoryId: $categoryId.val(),
                    PageIndex: pageIndex,
                    PageSize: pageSize
                };

                window.location = master.urlExcel + '?' + $.param(searchModel);;
            });
        };

        // Templates
        grd.tmp.name = function(name) {
            return `<a data-action="edit" href="javascript:void(0)">${name}</a>`;
        };
        grd.tmp.activate = function(activate) {
            return activate ? '<i data-action="deactivate" class="fa fa-check green pointer"></i>' : '<i data-action="activate" class="fa fa-lock yellow pointer"></i>';
        };

        // Startup
        $(function() {
            master.init();
            $('.select2-w-100').parent().find('span')
                .removeClass('select2-container')
                .css("margin-top", "-4px")
        });
    </script>
}
<!-- #endregion -->
