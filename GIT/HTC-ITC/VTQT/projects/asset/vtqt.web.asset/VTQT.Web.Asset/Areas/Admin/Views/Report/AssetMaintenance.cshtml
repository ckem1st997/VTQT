@model AssetMaintenanceReportSearchModel


<script>
    var masterAssetMaintenance = {
        urlGetAssetTypes: '@Url.Action("GetAssetTypes", "Report")',
        urlGetAssets: '@Url.Action("GetAssets", "Report")',
        urlGetDepartments: '@Url.Action("GetDepartments", "Report")',
        urlGetStations: '@Url.Action("GetStations", "Report")',
        urlGetExcel: '@Url.Action("GetReportExcelAssetMaintenance", "Report")',
        urlDownloadExcel: '@Url.Action("DownloadExcel", "Report")',
        el: '.page-data',
        $el: {},
        init: function () { },
        grd: {
            el: '#grdAssetMaintenance',
            $el: {},
            init: function () { },
            api: {},
            data: function () { }
        },
        form: {
            el: '#form-param-asset-maintenance',
            $el: {},
            init: function () { }
        },
        fromdate: {
            el: '#fromdate',
            $el: {},
            init: function () { },
            api: {}
        },
        todate: {
            el: '#todate',
            $el: {},
            init: function () { },
            api: {}
        },
        selectedAsset: {
            el: '#selectedAsset',
            $el: {},
            init: function () { },
        },
        selectedDepartment: {
            el: '#selectedDepartment',
            $el: {},
            init: function () { }
        },
        selectedAssetType: {
            el: '#selectedAssetType',
            $el: {},
            init: function () { }
        },
        selectedStation: {
            el: '#selectedStation',
            $el: {},
            init: function () { }
        },
        btnLoadReport: {
            el: '#btnLoadReport',
            $el: {},
            init: function () { }
        },
        btnExportExcel: {
            el: '#btnExportExcel',
            $el: {},
            init: function () { }
        },
        objectDataAssetMaintenance: []
    };
    var grdAssetMaintenance = masterAssetMaintenance.grd;
    var formAssetMaintenance = masterAssetMaintenance.form;
    var fromdate = masterAssetMaintenance.fromdate;
    var todate = masterAssetMaintenance.todate;
    var selectedAsset = masterAssetMaintenance.selectedAsset;
    var selectedDepartment = masterAssetMaintenance.selectedDepartment;
    var selectedAssetType = masterAssetMaintenance.selectedAssetType;
    var selectedStation = masterAssetMaintenance.selectedStation;
    var btnLoadReport = masterAssetMaintenance.btnLoadReport;
    var btnExportExcel = masterAssetMaintenance.btnExportExcel;
    var objectDataAssetMaintenance = masterAssetMaintenance.objectDataAssetMaintenance;

    grdAssetMaintenance.data = function () {
        var $fromdate = null;
        var $todate = null;
        var $assetId = null;
        var $organizationUnitId = null;
        var $stationCode = null;
        var $strAssetType = null;
        var $routeKey = $('#@Html.FieldIdFor(m => m.RouteKey)');

        if (objectDataAssetMaintenance.find(item => item.name === 'RouteKey') !== undefined) {
            var route = objectDataAssetMaintenance.find(item => item.name === 'RouteKey').value;
            if (route === $routeKey.val()) {
                if (objectDataAssetMaintenance.find(item => item.name === 'AssetId') !== undefined) {
                    $assetId = objectDataAssetMaintenance.find(item => item.name === 'AssetId').value;
                }

                if (objectDataAssetMaintenance.find(item => item.name === 'OrganizationUnitId') !== undefined) {
                    $organizationUnitId = objectDataAssetMaintenance.find(item => item.name === 'OrganizationUnitId').value;
                }

                if (objectDataAssetMaintenance.find(item => item.name === 'StationCode') !== undefined) {
                    $stationCode = objectDataAssetMaintenance.find(item => item.name === 'StationCode').value;
                }

                if (objectDataAssetMaintenance.find(item => item.name === 'StrAssetType') !== undefined) {
                    $strAssetType = objectDataAssetMaintenance.find(item => item.name === 'StrAssetType').value;
                }

                if (objectDataAssetMaintenance.find(item => item.name === 'FromDate') !== undefined) {
                    $fromdate = objectDataAssetMaintenance.find(item => item.name === 'FromDate').value;
                }

                if (objectDataAssetMaintenance.find(item => item.name === 'ToDate') !== undefined) {
                    $todate = objectDataAssetMaintenance.find(item => item.name === 'ToDate').value;
                }
            }
        }

        var seachModel = {
            FromDate: $fromdate,
            ToDate: $todate,
            RouteKey: $routeKey.val(),
            AssetId: $assetId,
            OrganizationUnitId: $organizationUnitId,
            StationCode: $stationCode,
            StrAssetType: $strAssetType
        };

        return seachModel;
    };
</script>

<div class="row full-height" id="right-data" style="padding-top: 280px">
    <div class="row" style="position: absolute; width: 100%; top: 0">
        <div style="border-bottom: 1px solid lightgray;
            padding: 10px 10px">
            <b style="font-size: 18px; color: #0277BD">Báo cáo bảo dưỡng/ sửa chữa</b>
        </div>

        <div class="options-params">
            <form id="form-param-asset-maintenance" style="display:flex; flex-direction: column">
                @Html.HiddenFor(m => m.RouteKey)
                <div class="accordion" id="accordionExample">
                    <div class="card">
                        <div id="collapseOne" class="collapse in" aria-labelledby="headingOne" data-parent="#accordionExample">
                            <div class="card-body" style="display: flex; flex-direction: column">
                                <div class="form-group form-group-sm" style="margin-bottom: 5px">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-2">
                                        @Html.XBaseLabelFor(m => m.OrganizationUnitId, true, new { @style = "float: right" }, true)
                                    </div>
                                    <div class="col-md-4" style="padding: 0">
                                        <select id="selectedDepartment" style="width: 100%"></select>
                                    </div>
                                    <div class="col-md-4"></div>
                                </div>
                                <div class="form-group form-group-sm" style="margin-bottom: 5px">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-2">
                                        @Html.XBaseLabelFor(m => m.StationCode, true, new { @style = "float: right" }, true)
                                    </div>
                                    <div class="col-md-4" style="padding: 0">
                                        <select id="selectedStation" style="width: 100%"></select>
                                    </div>
                                    <div class="col-md-4"></div>
                                </div>
                                <div class="form-group form-group-sm" style="margin-bottom: 5px">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-2">
                                        @Html.XBaseLabelFor(m => m.StrAssetType, true, new { @style = "float: right" })
                                    </div>
                                    <div class="col-md-4" style="padding: 0">
                                        <select id="selectedAssetType" style="width: 100%" readonly disabled></select>
                                    </div>
                                    <div class="col-md-4"></div>
                                </div>
                                <div class="form-group form-group-sm" style="margin-bottom: 5px">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-2">
                                        @Html.XBaseLabelFor(m => m.AssetId, true, new { @style = "float: right" })
                                    </div>
                                    <div class="col-md-4" style="padding: 0">
                                        <select id="selectedAsset" style="width: 100%"></select>
                                    </div>
                                    <div class="col-md-4"></div>
                                </div>
                                <div class="form-group form-group-sm" style="margin-bottom: 5px">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-2" style="padding: 0">
                                        @Html.XBaseLabelFor(m => m.FromDate, true, new { @style = "float: right" }, true)
                                    </div>
                                    @*<div class="col-md-2" style="padding: 2px">
                                        @(Html.Kendo().DatePicker()
                                            .Name("fromdate")
                                          //.Max(DateTime.Today)
                                            .Value(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1))
                                            .HtmlAttributes(new { style = "width: 100%"})
                                        )
                                    </div>*@
                                    <div class="col-md-4" style="padding: 0">
                                        @(Html.Kendo().DatePicker()
                                            .Name("todate")
                                          //.Max(DateTime.Now)
                                            .Value(DateTime.Now)
                                            .HtmlAttributes(new { style = "width: 100%" })
                                        )
                                    </div>
                                    <div class="col-md-4"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group form-group-sm" style="display: flex;
                                justify-content: center">
                    <button id="btnLoadReport" type="submit" class="btn btn-success">
                        <i class="fa fa-search"></i>&nbsp;Xem báo cáo
                    </button>
                    <button class="btn btn-primary" id="btnExportExcel" style="margin-left: 10px">
                        <i class="fa fa-file-excel-o" aria-hidden="true"></i>&nbsp;Xuất báo cáo
                    </button>
                    <button class="btn btn-warning" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" style="margin-left: 10px">
                        <div style="display: flex; align-items:center; justify-content: flex-start">
                            <i class="fa fa-tasks" aria-hidden="true"></i>&nbsp;Ẩn/hiện tham số
                        </div>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="row full-height" style="padding: 0 10px">
        @(Html.Kendo().Grid<AssetMaintenanceReportModel>()
            .Name("grdAssetMaintenance")
            .HtmlAttributes(new { style = "height: 100%; border-left: 1px solid lightblue; border-right: 1px solid lightblue" })
            .Columns(columns =>
            {
                columns.Bound(x => x.OrganizationUnitName).Locked().Width(250);
                columns.Bound(x => x.MaintenanceLocation).Locked().Width(250);
                columns.Bound(x => x.AssetName).Width(200);
                columns.Bound(x => x.Serial).Width(150);
                columns.ForeignKey(x => x.CurrentUsageStatus, (System.Collections.IEnumerable)ViewData["assetStatus"], "Value", "Text").Width(150);
                columns.Bound(x => x.MaintenanceDate).Width(150).Format("{0:dd/MM/yyyy}");
                columns.Bound(x => x.ReasonDescription).Width(250);
                columns.Bound(x => x.Content).Width(250);
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .ServerOperation(true)
                .PageSize(AdminAreaSettings.GridPageSize)
                .Read(read => read.Action("GetReportAssetMaintenance", "Report").Data("grdAssetMaintenance.data"))
            )
            .NoRecords()
            .AutoBind(false)
            .Scrollable(scr => scr.Enabled(true))
            .Pageable(pageable => pageable.ButtonCount(AdminAreaSettings.GridButtonCount).Info(true).Input(true).Numeric(true).PageSizes(AdminAreaSettings.GridPageSizeOptions).PreviousNext(true).Refresh(true))
            .Selectable(selectable => selectable.Type(GridSelectionType.Row).Mode(GridSelectionMode.Multiple))
            .Navigatable())
    </div>
</div>

<script>    
    masterAssetMaintenance.init = function () {
        masterAssetMaintenance.$el = $(masterAssetMaintenance.el);

        grdAssetMaintenance.init();
        formAssetMaintenance.init();
        fromdate.init();
        todate.init();
        selectedAsset.init();
        selectedDepartment.init();
        selectedAssetType.init();
        selectedStation.init();
        btnLoadReport.init();
        btnExportExcel.init();
    };

    grdAssetMaintenance.init = function () {
        grdAssetMaintenance.$el = $(grdAssetMaintenance.el);
        grdAssetMaintenance.api = grdAssetMaintenance.$el.data('kendoGrid');
    }

    formAssetMaintenance.init = function () {
        formAssetMaintenance.$el = $(formAssetMaintenance.el);
        objectDataAssetMaintenance = formAssetMaintenance.$el.serializeArray();
    };

    //fromdate.init = function () {
    //    fromdate.$el = $(fromdate.el);
    //    fromdate.api = fromdate.$el.data('kendoDatePicker');
    //    var foundIt = false;

    //    objectDataAssetMaintenance.forEach(function (item) {
    //        if (item.name === "FromDate") {
    //            item.value = fromdate.$el.val();
    //            foundIt = true;
    //        }
    //    });
    //    if (!foundIt) {
    //        objectDataAssetMaintenance.push({ name: "FromDate", value: fromdate.$el.val() });
    //    }

    //    fromdate.api.bind("change", function () {
    //        foundIt = false;
    //        objectDataAssetMaintenance.forEach(function (item) {
    //            if (item.name === "FromDate") {
    //                item.value = fromdate.$el.val();
    //                foundIt = true;
    //            }
    //        });
    //        if (!foundIt) {
    //            objectDataAssetMaintenance.push({ name: "FromDate", value: fromdate.$el.val() });
    //        }
    //    });
    //};

    todate.init = function () {
        todate.$el = $(todate.el);
        todate.api = todate.$el.data('kendoDatePicker');
        var foundIt = false;

        objectDataAssetMaintenance.forEach(function (item) {
            if (item.name === "ToDate") {
                item.value = todate.$el.val();
                foundIt = true;
            }
        });
        if (!foundIt) {
            objectDataAssetMaintenance.push({ name: "ToDate", value: todate.$el.val() });
        }

        todate.api.bind("change", function () {
            foundIt = false;
            objectDataAssetMaintenance.forEach(function (item) {
                if (item.name === "ToDate") {
                    item.value = todate.$el.val();
                    foundIt = true;
                }
            });
            if (!foundIt) {
                objectDataAssetMaintenance.push({ name: "ToDate", value: todate.$el.val() });
            }
        });
    };

    selectedAsset.init = function () {
        selectedAsset.$el = $(selectedAsset.el);

        selectedAsset.$el.select2({
            placeholder: 'Tài sản',
            allowClear: true,
            ajax: {
                delay: 500,
                url: masterAssetMaintenance.urlGetAssets,
                dataType: 'json',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        strAssetType: objectDataAssetMaintenance.find(item => item.name === 'StrAssetType').value || '20'
                    }

                    return query;
                },
                processResults: function (data, params) {
                    var items = [];
                    $.each(data.data, function (index, item) {
                        items.push({
                            id: item.Value,
                            text: item.Text
                        });
                    });
                    params.page = params.page || 1;

                    return {
                        results: items,
                        pagination: {
                            more: (params.page * 10) < data.totalCount
                        }
                    };
                }
            }
        });

        selectedAsset.$el.on('select2:select', function (e) {
            var foundIt = false;
            objectDataAssetMaintenance.forEach(function (item) {
                if (item.name === "AssetId") {
                    item.value = e.params.data.id;
                    foundIt = true;
                }
            });
            if (!foundIt) {
                objectDataAssetMaintenance.push({ name: "AssetId", value: e.params.data.id });
            }
        });
    }    

    selectedDepartment.init = function () {
        selectedDepartment.$el = $(selectedDepartment.el);

        selectedDepartment.$el.select2({
            placeholder: 'Phòng ban',
            allowClear: true,
            ajax: {
                delay: 500,
                url: masterAssetMaintenance.urlGetDepartments,
                dataType: 'json',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1
                    }

                    return query;
                },
                processResults: function (data, params) {
                    var items = [];
                    $.each(data.data, function (index, item) {
                        items.push({
                            id: item.Id,
                            text: `[${item.Code}] ${item.Name}`
                        });
                    });
                    params.page = params.page || 1;

                    return {
                        results: items,
                        pagination: {
                            more: (params.page * 10) < data.totalCount
                        }
                    };
                }
            }
        });

        selectedDepartment.$el.on('select2:select', function (e) {
            var foundIt = false;
            objectDataAssetMaintenance.forEach(function (item) {
                if (item.name === "OrganizationUnitId") {
                    item.value = e.params.data.id;
                    foundIt = true;
                }
            });
            if (!foundIt) {
                objectDataAssetMaintenance.push({ name: "OrganizationUnitId", value: e.params.data.id });
            }
        });
    }

    selectedStation.init = function () {
        selectedStation.$el = $(selectedStation.el);

        selectedStation.$el.select2({
            placeholder: 'Trạm',
            allowClear: true,
            ajax: {
                delay: 500,
                url: masterAssetMaintenance.urlGetStations,
                dataType: 'json',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1
                    }

                    return query;
                },
                processResults: function (data, params) {
                    var items = [];
                    $.each(data.data, function (index, item) {
                        items.push({
                            id: item.Code,
                            text: `[${item.Code}] ${item.Name}`
                        });
                    });
                    params.page = params.page || 1;

                    return {
                        results: items,
                        pagination: {
                            more: (params.page * 10) < data.totalCount
                        }
                    };
                }
            }
        });

        selectedStation.$el.on('select2:select', function (e) {
            var foundIt = false;
            objectDataAssetMaintenance.forEach(function (item) {
                if (item.name === "StationCode") {
                    item.value = e.params.data.id;
                    foundIt = true;
                }
            });
            if (!foundIt) {
                objectDataAssetMaintenance.push({ name: "StationCode", value: e.params.data.id });
            }
        });
    }

    selectedAssetType.init = function () {
        selectedAssetType.$el = $(selectedAssetType.el);

        selectedAssetType.$el.select2({
            placeholder: 'Kiểu tài sản',
            ajax: {
                delay: 500,
                url: masterAssetMaintenance.urlGetAssetTypes,
                dataType: 'json',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1
                    }

                    return query;
                },
                processResults: function (data, params) {
                    var items = [];
                    $.each(data.data, function (index, item) {
                        items.push({
                            id: item.Value,
                            text: item.Text
                        });
                    });
                    params.page = params.page || 1;

                    return {
                        results: items,
                        pagination: {
                            more: (params.page * 10) < data.totalCount
                        }
                    };
                }
            }
        });

        selectedAssetType.$el.on('select2:select', function (e) {
            var foundIt = false;
            objectDataAssetMaintenance.forEach(function (item) {
                if (item.name === "StrAssetType") {
                    item.value = e.params.data.id;
                    foundIt = true;
                }
            });
            if (!foundIt) {
                objectDataAssetMaintenance.push({ name: "StrAssetType", value: e.params.data.id });
            }
        });
    }    

    btnLoadReport.init = function () {
        btnLoadReport.$el = $(btnLoadReport.el);

        const load = _.debounce(() => {
            grdAssetMaintenance.api.resetPage();
        }, app.ui.def.debounce.timeout);
        btnLoadReport.$el.click(function (e) {
            load();
            return false;
        });
    };

    btnExportExcel.init = function () {
        btnExportExcel.$el = $(btnExportExcel.el);

        btnExportExcel.$el.click(function (e) {
            e.preventDefault();

            //notify({ text: 'Chức năng xuất phiếu đang trong quá trình bảo trì, xin bạn vui lòng chờ đợi, xin lỗi vì sự bất tiện này !', type: 'info' });
            //return false;

            var $fromdate = null;
            var $todate = null;
            var $organizationUnitId = null;
            var $assetId = null;
            var $strAssetType = null;
            var $routeKey = $('#@Html.FieldIdFor(m => m.RouteKey)');
            var $stationCode = null;

            if (objectDataAssetMaintenance.find(item => item.name === 'RouteKey') !== undefined) {
                var route = objectDataAssetMaintenance.find(item => item.name === 'RouteKey').value;
                if (route === $routeKey.val()) {
                    if (objectDataAssetMaintenance.find(item => item.name === 'AssetId') !== undefined) {
                        $assetId = objectDataAssetMaintenance.find(item => item.name === 'AssetId').value;
                    }

                    if (objectDataAssetMaintenance.find(item => item.name === 'OrganizationUnitId') !== undefined) {
                        $organizationUnitId = objectDataAssetMaintenance.find(item => item.name === 'OrganizationUnitId').value;
                    }

                    if (objectDataAssetMaintenance.find(item => item.name === 'StrAssetType') !== undefined) {
                        $strAssetType = objectDataAssetMaintenance.find(item => item.name === 'StrAssetType').value;
                    }

                    if (objectDataAssetMaintenance.find(item => item.name === 'StationCode') !== undefined) {
                        $stationCode = objectDataAssetMaintenance.find(item => item.name === 'StationCode').value;
                    }

                    //if (objectDataAssetMaintenance.find(item => item.name === 'FromDate') !== undefined) {
                    //    $fromdate = objectDataAssetMaintenance.find(item => item.name === 'FromDate').value;
                    //    var parts = $fromdate.split('/');
                    //    $fromdate = parts[1] + '/' + parts[0] + '/' + parts[2];
                    //}

                    if (objectDataAssetMaintenance.find(item => item.name === 'ToDate') !== undefined) {
                        $todate = objectDataAssetMaintenance.find(item => item.name === 'ToDate').value;
                        var parts = $todate.split('/');
                        $todate = parts[1] + '/' + parts[0] + '/' + parts[2];
                    }
                }
            }

            var seachModel = {
                FromDate: $fromdate,
                ToDate: $todate,
                RouteKey: $routeKey.val(),
                AssetId: $assetId,
                OrganizationUnitId: $organizationUnitId,
                StrAssetType: $strAssetType,
                StationCode: $stationCode
            };
            window.location = masterAssetMaintenance.urlGetExcel + '?' + $.param(seachModel);
        });
    };

    $(function () {
        masterAssetMaintenance.init();
        $('#collapseOne').on('hide.bs.collapse', function () {
            $('#right-data').css('padding-top', '90px');
            app.grid.handlers.resize();
        });
        $('#collapseOne').on('show.bs.collapse', function () {
            $('#right-data').css('padding-top', '280px');
            app.grid.handlers.resize();
        });

        if (!_.isNil('@Model.StrAssetType')) {
            $.ajax({
                url: '@Url.Action("GetAssetType")' + '?id=' + '@Model.StrAssetType',
                type: 'GET',
                dataType: 'json',
                success: function (assetType) {
                    // create the option and append to Select2
                    var option = new Option(`${assetType.Text}`, assetType.Value, true, true);
                    selectedAssetType.$el.append(option).trigger('change');

                    // manually trigger the `select2:select` event
                    selectedAssetType.$el.trigger({
                        type: 'select2:select',
                        params: {
                            data: assetType
                        }
                    });
                }
            });
        }
    });
</script>