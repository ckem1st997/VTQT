@model StationTicketGridSearchModel
<!-- #region Page Header -->
<div class="page-bar">
    <ul class="page-breadcrumb"></ul>
    <div class="page-toolbar">
        <div class="pull-right">
            <a data-action="create" href="javascript:void(0)" class="btn blue btn-sm"><i class="flaticon2-plus"></i> @T("Common.AddNew")</a>
            <a data-action="edit" href="javascript:void(0)" class="btn yellow btn-sm"><i class="flaticon2-pen"></i> @T("Common.Edit")</a>
            <a data-action="deletes" href="javascript:void(0)" class="btn red btn-sm"><i class="flaticon-delete"></i> @T("Common.Deletes")</a>
            <button type="button" class="btn purple btn-sm dropdown-toggle" data-toggle="dropdown">
                <i class="flaticon-more"></i> @T("Common.OtherActions") <i class="fa fa-angle-down"></i>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>
                    <a data-action="export" href="javascript:void(0)"><i class="fa fa-print"></i> @T("Common.ExportData")</a>
                </li>
            </ul>
        </div>
    </div>
</div>
<!-- #endregion -->
<!-- #region Page Content -->
<div class="page-data">
    <div class="row search-form">
        <form style="display:flex;align-items:center;">
            <div class="search-label">
                @T("Common.Search"):
            </div>
            <div class="col-md-4">
                <div class="form-group form-group-sm">
                    <div class="input-icon right">
                        <i class="fa fa-angle-down search-extend tooltips" data-container="body" data-original-title="@T("Common.ShowSearchOptions")" data-toggle="dropdown" data-close-others="true" aria-expanded="true"></i>
                        @Html.TextBoxFor(m => m.Keywords, new { @class = "form-control", placeholder = T("Common.Fields.EnterKeywords") })
                    <div class="search-extend-bd dropdown-menu hold-on-click">
                        <div class="row">
                            <div class="form-group form-group-sm">
                                @Html.XBaseLabelFor(m => m.StartDate)
                                <div class="row">
                                    <div class="col-md-6">
                                        @Html.EditorFor(m => m.StartDate, new { htmlAttributes = new { @class = "form-control", placeholder = T("Common.Fields.StartDate"), style = "border-right: none" } })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.EditorFor(m => m.FinishDate, new { htmlAttributes = new { @class = "form-control", placeholder = T("Common.Fields.FinishDate"), style = "border-right: none" } })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group form-group-sm">
                                @Html.XBaseLabelFor(m => m.CreatedBy)
                                @Html.DropDownListFor(m => m.CreatedBy, (IEnumerable<SelectListItem>)ViewData["user"], T("Common.Fields.EmployeeName"), new { @class = "form-control", @style = "width: 100%" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group form-group-sm">
                                @Html.XBaseLabelFor(m => m.PriorityId)
                                @Html.DropDownListFor(m => m.PriorityId, (IEnumerable<SelectListItem>)ViewData["priority"], T("Common.Fields.priority"), new { @class = "form-control", @style = "width: 100%" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group form-group-sm">
                                @Html.XBaseLabelFor(m => m.StatusId)
                                @Html.DropDownListFor(m => m.StatusId, (IEnumerable<SelectListItem>)ViewData["status"], T("Common.Fields.status"), new { @class = "form-control", @style = "width: 100%" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group form-group-sm">
                                @Html.XBaseLabelFor(m => m.TicketAreaId)
                                @Html.DropDownListFor(m => m.TicketAreaId, (IEnumerable<SelectListItem>)ViewData["ticketArea"], T("Common.Fields.ticketArea"), new { @class = "form-control", @style = "width: 100%" })
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
            <div class="col-md-1">
                <div class="form-group form-group-sm">
                    <button type="submit" id="btnSearch" class="btn btn-default btn-sm">
                        <i class="fa fa-search"></i> @T("Common.GetData")
                    </button>
                </div>
            </div>
        </form>
    </div>
    <div class="row full-height">
        @(Html.Kendo().Grid<StationTicketGridModel>()
            .Name("grd")
            .HtmlAttributes(new { style = "height: 100%" })
            .Columns(columns =>
            {
                columns.Select().Locked().Width(30);
                columns.Bound(x => x.Code).Locked().Width(150);
                columns.Bound(x => x.Subject).Locked().ClientTemplate("#=grd.tmp.name(Subject, Id)#").Width(300);
                columns.Bound(x => x.DurationTime).Width(200);
                columns.ForeignKey(x => x.Assignee, (System.Collections.IEnumerable)ViewData["user"], "Value", "Text").Width(250);
                columns.Bound(x => x.Status).ClientTemplate("#=onDataBound(Status)#").Width(150);
                columns.ForeignKey(x => x.Priority, (System.Collections.IEnumerable)ViewData["priority"], "Value", "Text").Width(300);
                columns.ForeignKey(x => x.StationId, (System.Collections.IEnumerable)ViewData["station"], "Value", "Text").Width(200);
                columns.ForeignKey(x => x.TicketArea, (System.Collections.IEnumerable)ViewData["ticketArea"], "Value", "Text").Width(200);
                columns.ForeignKey(x => x.TicketProvince, (System.Collections.IEnumerable)ViewData["ticketProvince"], "Value", "Text").Width(200);
                columns.Bound(x => x.StartDate).Format("{0:dd/MM/yyyy HH:mm:ss}").Width(150);
                columns.Bound(x => x.FinishDate).Format("{0:dd/MM/yyyy HH:mm:ss}").Width(150);                
                columns.ForeignKey(x => x.CreatedBy, (System.Collections.IEnumerable)ViewData["user"], "Value", "Text").Width(250);
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .ServerOperation(true)
                .PageSize(AdminAreaSettings.GridPageSize)
                .Read(read => read.Action("Get", "StationTicket").Data("grd.data"))
            )
            .NoRecords()
            .Scrollable(scr => scr.Enabled(true))
            .Pageable(pageable => pageable.ButtonCount(AdminAreaSettings.GridButtonCount).Info(true).Input(true).Numeric(true).PageSizes(AdminAreaSettings.GridPageSizeOptions).PreviousNext(true).Refresh(true))
            .Selectable(selectable => selectable.Type(GridSelectionType.Row).Mode(GridSelectionMode.Multiple))
            .Navigatable())
    </div>
</div>

<ul id="mnu" style="display: none">
    <li data-action="details">
        <i class="flaticon-eye font-blue-dark"></i> @T("Common.Details")
    </li>
    <li data-action="create">
        <i class="flaticon2-plus font-blue"></i> @T("Common.AddNew")
    </li>
    <li data-action="edit">
        <i class="flaticon2-pen font-yellow"></i> @T("Common.Edit")
    </li>
    <li class="k-separator"></li>
    <li data-action="refresh">
        <i class="flaticon-refresh font-green"></i> @T("Common.Refresh")
    </li>
    <li data-action="deletes">
        <i class="flaticon-delete font-red"></i> @T("Common.Delete")
    </li>
</ul>

<!-- #endregion -->
<!-- #region Scripts -->
@section HeadScripts {
    <script>
        // Fields
        var master = {
            urlDetails: '@Url.Action("Details")',
            urlCreate: '@Url.Action("Create")',
            urlEdit: '@Url.Action("Edit")',
            urlDeletes: '@Url.Action("Deletes")',
            urlActivates: '@Url.Action("Activates")',
            urlExportExcel: '@Url.Action("GetExcel")',
            urlComment: '@Url.Action("Comment")',
            //urlImportExcel: '@Url.Action("ImportExcel")',
            toolbar: {
                el: '.page-toolbar',
                $el: {},
                actions: {
                    init: function () { }
                },
                init: function () { }
            },
            grd: {
                el: '#grd',
                $el: {},
                api: {},
                actions: {
                    init: function () { }
                },
                tmp: {
                    name: function (id, name) { },
                    activate: function (activate) { }
                },
                data: function () { },
                init: function () { }
            },
            mnu: {
                el: '#mnu',
                $el: {},
                api: {},
                init: function () { }
            },
            btnSearch: {
                el: '#btnSearch',
                $el: {},
                init: function () { }
            },
            btnExportExcel: {
                el: 'a[data-action="export"]',
                $el: {},
                init: function ()   { }
            },
            init: function () { },
            details: function (id) { },
            create: function () { },
            edit: function (id) { },
            deletes: function () { },
            activates: function (activate, ids) { },
            refresh: function () { },
            actionCallback: function () { },
            importExcel: function () { },
            importExcel: function () { },
            export: function () { },
            comment: function () { }
        };
        var toolbar = master.toolbar;
        var grd = master.grd;
        var mnu = master.mnu;
        var btnSearch = master.btnSearch;
        var btnExportExcel = master.btnExportExcel;

        grd.data = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var $startDate = $('#@Html.FieldIdFor(m => m.StartDate)');
            var $finishDate = $('#@Html.FieldIdFor(m => m.FinishDate)');
            var $employeeId = $('#@Html.FieldIdFor(m => m.CreatedBy)');
            var $priority = $('#@Html.FieldIdFor(m => m.PriorityId)');
            var $trangthai = $('#@Html.FieldIdFor(m => m.StatusId)');
            var $vungsuco = $('#@Html.FieldIdFor(m => m.TicketAreaId)');

            var searchModel = {
                Keywords: $keywords.val(),
                StartDate: $startDate.val(),
                FinishDate: $finishDate.val(),
                CreatedBy: $employeeId.val(),
                PriorityId: $priority.val(),
                StatusId: $trangthai.val(),
                TicketAreaId: $vungsuco.val()
            };
            return searchModel;
        };
    </script>
}

@section Scripts {
    <script>
        // Methods
        master.importExcel = function () {
            app.window.form.open({ url: `${master.urlImportExcel}`, options: { width: '620px' } });
            console.log();
        };

        master.details = function() {
            var id = grd.api.selectedIds()[0];
            if (id) {
                $.pjax({ url: `${master.urlDetails}/${id}` });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.importExcel = function () {
            app.window.form.open({ url: `${master.urlImportExcel}`, options: { width: '850px' } });
            console.log();
        };
        master.create = function () {
            $.pjax({ url: master.urlCreate });
        };
        master.edit = function() {
            var id = grd.api.selectedIds()[0];
            if (id) {
                $.pjax({ url: `${master.urlEdit}/${id}` });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.deletes = function() {
            var ids = grd.api.selectedIds();
            if (ids.length > 0) {
                app.window.deletes.open({ url: master.urlDeletes, ids: ids, options: { width: '450px' }, callback: master.actionCallback });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.activates = function(activate, ids) {
            ids = ids || grd.api.selectedIds();
            if (ids.length > 0) {
                $.ajax({
                    type: 'POST',
                    data: { Ids: ids, Active: activate, __RequestVerificationToken: app.form.antiForgeryToken.value },
                    dataType: 'json',
                    url: master.urlActivates,
                    beforeSend: function(jqXhr, settings) {
                        app.ui.loader(grd.api.element, true);
                    },
                    success: function(msg) {
                        if (!msg)
                            return;
                        if (!msg.HasError) {
                            master.actionCallback();
                        }
                        app.ui.loader(grd.api.element, false);
                    },
                    error: function(jqXhr, textStatus, errorThrown) {
                        app.ui.loader(grd.api.element, false);
                    }
                });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.refresh = function() {
            grd.api.reload();
        };
        master.actionCallback = function() {
            grd.api.reload();
        };
        
        // Inits
        master.init = function() {
            toolbar.init();
            grd.init();
            mnu.init();
            btnSearch.init();
            btnExportExcel.init();
        };

        toolbar.init = function() {
            toolbar.$el = $(toolbar.el);

            toolbar.actions.init();
        };
        toolbar.actions.init = function() {
            var $toolbar = toolbar.$el;
            $toolbar.find('a[data-action="export"]').click(function (e) {
                master.export();
            });
            $toolbar.find('a[data-action="importexcel"]').click(function (e) {
                master.importExcel();
            });
            admin.pageToolbar.actions.initCreate($toolbar, master.create);
            admin.pageToolbar.actions.initEdit($toolbar, master.edit);
            admin.pageToolbar.actions.initDeletes($toolbar, master.deletes);
            admin.pageToolbar.actions.initActivate($toolbar, master.activates);
        };
        grd.init = function() {
            grd.$el = $(grd.el);
            grd.api = grd.$el.data('kendoGrid');

            grd.actions.init();
        };
        grd.actions.init = function () {
            grd.api.initDblClick(master.details);
            grd.api.initDetails(master.details);
            grd.api.initActivate(master.activates);
        };
        mnu.init = function() {
            mnu.$el = $(mnu.el);
            mnu.$el.kendoContextMenu({
                orientation: 'vertical',
                target: master.grd.el,
                filter: 'tbody tr[role="row"]',
                animation: {
                    open: { effects: "fadeIn" },
                    duration: 0
                },
                open: function(e) {
                    var $row = $(e.target);
                    var selected = master.grd.api.select().length;
                    if (selected === 0 || (!$row.hasClass('k-state-selected') && selected > 0)) {
                        master.grd.api.clearSelection();
                        master.grd.api.select($row);
                    }
                },
                select: function(e) {
                    var action = $(e.item).attr('data-action');
                    switch (action) {
                    case 'details':
                        master.details();
                        break;
                    case 'create':
                        master.create();
                        break;  
                    case 'importExcel':
                        master.importExcel();
                        break;
                    case 'edit':
                        master.edit();
                        break;
                    case 'importExcel':
                        master.importExcel();
                        break;
                    case 'deletes':
                        master.deletes();
                        break;
                    case 'refresh':
                        master.refresh();
                        break;
                    default:
                        break;
                    }
                }
            });
            mnu.api = mnu.$el.data("kendoContextMenu");
        };
        btnSearch.init = function() {
            btnSearch.$el = $(btnSearch.el);

            const search = _.debounce(() => {
                grd.api.resetPage();
            }, app.ui.def.debounce.timeout);
            btnSearch.$el.click(function (e) {
                search();
                return false;
            });
        };
        btnExportExcel.init = function() {
            btnExportExcel.$el = $(btnExportExcel.el);

            btnExportExcel.$el.click(function (e){
                e.preventDefault();
                var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
                var $startDate = $('#@Html.FieldIdFor(m => m.StartDate)');
                var $finishDate = $('#@Html.FieldIdFor(m => m.FinishDate)');
                var $employeeId = $('#@Html.FieldIdFor(m => m.CreatedBy)');
                var $priority = $('#@Html.FieldIdFor(m => m.PriorityId)');
                var $trangthai = $('#@Html.FieldIdFor(m => m.StatusId)');
                var $vungsuco = $('#@Html.FieldIdFor(m => m.TicketAreaId)');
                var pageIndex = grd.api.dataSource._page;
                var pageSize = grd.api.dataSource._pageSize;

                var searchModel = {
                    Keywords: $keywords.val(),
                    StartDate: $startDate.val(),
                    FinishDate: $finishDate.val(),
                    CreatedBy: $employeeId.val(),
                    PriorityId: $priority.val(),
                    StatusId: $trangthai.val(),
                    TicketAreaId: $vungsuco.val(),
                    PageIndex: pageIndex,
                    PageSize: pageSize
                };

                window.location = master.urlExportExcel + '?' + $.param(searchModel);
            });
        };

        // Templates
        grd.tmp.name = function (name, id) {
            return `<a data-action="details" href="javascript:void(0)" style="margin-right:10px">${name}</a><a href="javascript:void(0)" onclick="master.comment('${id}')"><i class="fa fa-commenting" aria-hidden="true"></i></a>`;
        };
        grd.tmp.activate = function(activate) {
            return activate ? '<i data-action="deactivate" class="fa fa-check green pointer"></i>' : '<i data-action="activate" class="fa fa-lock yellow pointer"></i>';
        };

        master.comment = function(id){
            if (id){
                app.window.form.open({ url: `${master.urlComment}/${id}`, options: { width: '450px' } });
            }else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }   
        };

        function onDataBound(status) {
            switch(status){
                case "open":
                    return `<div style="width:80px;height:20px;background:#f9f988;display:flex;justify-content:center;align-items:center;-moz-border-radius: 15px;-webkit-border-radius: 15px"><span style="color:#333;font-weight:bold">${status}</span></div>`;
                case "process":
                    return `<div style="width:80px;height:20px;background:#6dd47e;display:flex;justify-content:center;align-items:center;-moz-border-radius: 15px;-webkit-border-radius: 15px"><span style="color:#333;font-weight:bold">${status}</span></div>`;
                case "pending":
                    return `<div style="width:80px;height:20px;background:pink;display:flex;justify-content:center;align-items:center;-moz-border-radius: 15px;-webkit-border-radius: 15px"><span style="color:#333;font-weight:bold">${status}</span></div>`;
                case "closed":
                    return `<div style="width:80px;height:20px;background:lightgray;display:flex;justify-content:center;align-items:center;-moz-border-radius: 15px;-webkit-border-radius: 15px"><span style="color:#333;font-weight:bold">${status}</span></div>`;
                default:
                    break;
            }      
            return '';
        };

        // Startup
        $(function() {
            master.init();
        });
    </script>
}
<!-- #endregion -->
