<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VTQT.Core</name>
    </assembly>
    <members>
        <member name="T:VTQT.Core.BaseEntity">
            <summary>
            Base class for entities
            </summary>
        </member>
        <member name="P:VTQT.Core.BaseEntity.Id">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="P:VTQT.Core.BaseEntity.EntityCacheKey">
            <summary>
            Get key for caching the entity
            </summary>
        </member>
        <member name="M:VTQT.Core.BaseEntity.GetEntityCacheKey(System.Type,System.Object)">
            <summary>
            Get key for caching the entity
            </summary>
            <param name="entityType">Entity type</param>
            <param name="id">Entity id</param>
            <returns>Key for caching the entity</returns>
        </member>
        <member name="T:VTQT.Core.BaseIntEntity">
            <summary>
            Base class for entities
            </summary>
        </member>
        <member name="P:VTQT.Core.BaseIntEntity.Id">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="P:VTQT.Core.BaseIntEntity.EntityCacheKey">
            <summary>
            Get key for caching the entity
            </summary>
        </member>
        <member name="M:VTQT.Core.BaseIntEntity.GetEntityCacheKey(System.Type,System.Object)">
            <summary>
            Get key for caching the entity
            </summary>
            <param name="entityType">Entity type</param>
            <param name="id">Entity id</param>
            <returns>Key for caching the entity</returns>
        </member>
        <member name="T:VTQT.Core.BaseIntLowercaseEntity">
            <summary>
            Base class for entities
            </summary>
        </member>
        <member name="P:VTQT.Core.BaseIntLowercaseEntity.id">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="P:VTQT.Core.BaseIntLowercaseEntity.EntityCacheKey">
            <summary>
            Get key for caching the entity
            </summary>
        </member>
        <member name="M:VTQT.Core.BaseIntLowercaseEntity.GetEntityCacheKey(System.Type,System.Object)">
            <summary>
            Get key for caching the entity
            </summary>
            <param name="entityType">Entity type</param>
            <param name="id">Entity id</param>
            <returns>Key for caching the entity</returns>
        </member>
        <member name="T:VTQT.Core.Collections.Multimap`2">
            <summary>
            A data structure that contains multiple values for each key.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
        </member>
        <member name="P:VTQT.Core.Collections.Multimap`2.Count">
            <summary>
            Gets the count of groups/keys.
            </summary>
        </member>
        <member name="P:VTQT.Core.Collections.Multimap`2.TotalValueCount">
            <summary>
            Gets the total count of items in all groups.
            </summary>
        </member>
        <member name="P:VTQT.Core.Collections.Multimap`2.Item(`0)">
            <summary>
            Gets the collection of values stored under the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:VTQT.Core.Collections.Multimap`2.Keys">
            <summary>
            Gets the collection of keys.
            </summary>
        </member>
        <member name="P:VTQT.Core.Collections.Multimap`2.Values">
            <summary>
            Gets all value collections.
            </summary>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.Add(`0,`1)">
            <summary>
            Adds the specified value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the specified values to the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.Remove(`0,`1)">
            <summary>
            Removes the specified value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>True</c> if such a value existed and was removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.RemoveAll(`0)">
            <summary>
            Removes all values for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>True</c> if any such values existed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.Clear">
            <summary>
            Removes all values.
            </summary>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.ContainsKey(`0)">
            <summary>
            Determines whether the multimap contains any values for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>True</c> if the multimap has one or more values for the specified key, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.ContainsValue(`0,`1)">
            <summary>
            Determines whether the multimap contains the specified value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>True</c> if the multimap contains such a value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the multimap.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the multimap.</returns>
        </member>
        <member name="M:VTQT.Core.Collections.Multimap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the multimap.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the multimap.</returns>
        </member>
        <member name="T:VTQT.Core.CommonHelper">
            <summary>
            Represents a common helper
            </summary>
        </member>
        <member name="M:VTQT.Core.CommonHelper.EnsureSubscriberEmailOrThrow(System.String)">
            <summary>
            Ensures the subscriber email or throw.
            </summary>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.IsValidEmail(System.String)">
            <summary>
            Verifies that a string is in valid e-mail format
            </summary>
            <param name="email">Email to verify</param>
            <returns>true if the string is a valid e-mail address and false if it's not</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.IsValidIpAddress(System.String)">
            <summary>
            Verifies that string is an valid IP-Address
            </summary>
            <param name="ipAddress">IPAddress to verify</param>
            <returns>true if the string is a valid IpAddress and false if it's not</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.GenerateRandomDigitCode(System.Int32)">
            <summary>
            Generate random digit code
            </summary>
            <param name="length">Length</param>
            <returns>Result string</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.GenerateRandomInteger(System.Int32,System.Int32)">
            <summary>
            Returns an random integer number within a specified rage
            </summary>
            <param name="min">Minimum number</param>
            <param name="max">Maximum number</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.EnsureMaximumLength(System.String,System.Int32,System.String)">
            <summary>
            Ensure that a string doesn't exceed maximum allowed length
            </summary>
            <param name="str">Input string</param>
            <param name="maxLength">Maximum length</param>
            <param name="postfix">A string to add to the end if the original string was shorten</param>
            <returns>Input string if its length is OK; otherwise, truncated input string</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.EnsureNumericOnly(System.String)">
            <summary>
            Ensures that a string only contains numeric values
            </summary>
            <param name="str">Input string</param>
            <returns>Input string with only numeric values, empty string if input is null/empty</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.EnsureNotNull(System.String)">
            <summary>
            Ensure that a string is not null
            </summary>
            <param name="str">Input string</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.AreNullOrEmpty(System.String[])">
            <summary>
            Indicates whether the specified strings are null or empty strings
            </summary>
            <param name="stringsToValidate">Array of strings to validate</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.ArraysEqual``1(``0[],``0[])">
            <summary>
            Compare two arrays
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="a1">Array 1</param>
            <param name="a2">Array 2</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets a property on an object to a value.
            </summary>
            <param name="instance">The object whose property to set.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:VTQT.Core.CommonHelper.To(System.Object,System.Type)">
            <summary>
            Converts a value to a destination type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to convert the value to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.To(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to a destination type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to convert the value to.</param>
            <param name="culture">Culture</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.To``1(System.Object)">
            <summary>
            Converts a value to a destination type.
            </summary>
            <param name="value">The value to convert.</param>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <returns>The converted value.</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.ConvertEnum(System.String)">
            <summary>
            Convert enum for front-end
            </summary>
            <param name="str">Input string</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.GetDifferenceInYears(System.DateTime,System.DateTime)">
            <summary>
            Get difference in years
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.Core.CommonHelper.GetPrivateFieldValue(System.Object,System.String)">
            <summary>
            Get private fields property value
            </summary>
            <param name="target">Target object</param>
            <param name="fieldName">Field name</param>
            <returns>Value</returns>
        </member>
        <member name="P:VTQT.Core.CommonHelper.DefaultFileProvider">
            <summary>
            Gets or sets the default file provider
            </summary>
        </member>
        <member name="T:VTQT.Core.Configuration.HostingConfig">
            <summary>
            Represents startup hosting configuration parameters
            </summary>
        </member>
        <member name="P:VTQT.Core.Configuration.HostingConfig.ForwardedHttpHeader">
            <summary>
            Gets or sets custom forwarded HTTP header (e.g. CF-Connecting-IP, X-FORWARDED-PROTO, etc)
            </summary>
        </member>
        <member name="P:VTQT.Core.Configuration.HostingConfig.UseHttpClusterHttps">
            <summary>
            Gets or sets a value indicating whether to use HTTP_CLUSTER_HTTPS
            </summary>
        </member>
        <member name="P:VTQT.Core.Configuration.HostingConfig.UseHttpXForwardedProto">
            <summary>
            Gets or sets a value indicating whether to use HTTP_X_FORWARDED_PROTO
            </summary>
        </member>
        <member name="T:VTQT.Core.Configuration.ISettings">
            <summary>
            Setting interface
            </summary>
        </member>
        <member name="F:VTQT.Core.Configuration.LoggingHelper.LoggerTypes.SeriLogger">
            <summary>
            Serilog
            </summary>
        </member>
        <member name="F:VTQT.Core.Configuration.LoggingHelper.LoggerTypes.ElasticLogger">
            <summary>
            Elastic
            </summary>
        </member>
        <member name="P:VTQT.Core.Configuration.XBaseConfig.DisplayFullErrorStack">
            <summary>
            Gets or sets a value indicating whether to display the full error in production environment.
            It's ignored (always enabled) in development environment
            </summary>
        </member>
        <member name="P:VTQT.Core.Configuration.XBaseConfig.AppProjectType">
            <summary>
            Loại Project App (AppProjectType)
            </summary>
        </member>
        <member name="P:VTQT.Core.Configuration.XBaseConfig.AppType">
            <summary>
            App Type (AppHelperBase)
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Apps.AppSvcEntity">
            <summary>Danh sách Ứng dụng</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.AppType">
            <summary>Loại ứng dụng</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.Name">
            <summary>Tên ứng dụng (đa ngôn ngữ)</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.ShortName">
            <summary>Tên viết tắt</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.Description">
            <summary>Mô tả (đa ngôn ngữ)</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.Icon">
            <summary>Icon</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.BackgroundColor">
            <summary>Màu nền</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.Url">
            <summary>Đường dẫn</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.Hosts">
            <summary>Hosts</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.SslEnabled">
            <summary>Kích hoạt SSL</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.CdnUrl">
            <summary>Cdn Url</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.DefaultLanguageId">
            <summary>Ngôn ngữ mặc định (Ref: Language)</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.ShowOnMenu">
            <summary>Hiển thị lên menu</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.AppSvcEntity.DisplayOrder">
            <summary>Thứ tự hiển thị</summary>
        </member>
        <member name="T:VTQT.Core.Domain.Apps.IAppMappingSupported">
            <summary>
            Represents an entity which supports store mapping
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Apps.IAppMappingSupported.LimitedToApps">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Common.CatalogSettings">
            <summary>
            Catalog settings
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Common.CatalogSettings.IgnoreAppLimitations">
            <summary>
            Gets or sets a value indicating whether to ignore "limit per store" rules (side-wide). It can significantly improve performance when enabled.
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Common.CatalogSettings.EnableHtmlTextCollapser">
            <summary>
            Gets or sets a value indicating if html long text should be collapsed
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Common.CatalogSettings.HtmlTextCollapsedHeight">
            <summary>
            Gets or sets the height of collapsed text
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.CommonSettings">
            <summary>
            Common settings
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.CommonSettings.UseResponseCompression">
            <summary>
            Gets or sets a value indicating whether to compress response (gzip by default). 
            You may want to disable it, for example, If you have an active IIS Dynamic Compression Module configured at the server level
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.CommonSettings.EnableHtmlMinification">
            <summary>
            Gets or sets a value indicating whether to enable markup minification
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.CommonSettings.EnableJsBundling">
            <summary>
            A value indicating whether JS file bundling and minification is enabled
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.CommonSettings.EnableCssBundling">
            <summary>
            A value indicating whether CSS file bundling and minification is enabled
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.AppProjectType">
            <summary>
            Loại Project App
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.CaptchaType">
            <summary>
            Represents an type of reCAPTCHA
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.CaptchaType.CheckBoxReCaptchaV2">
            <summary>
            Use reCAPTCHA v2 check box
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.CaptchaType.ReCaptchaV3">
            <summary>
            Use reCAPTCHA v3
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.ActiveStatus">
            <summary>
            Trạng thái kích hoạt
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.ActiveStatus.Activated">
            <summary>
            Kích hoạt
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.ActiveStatus.Deactivated">
            <summary>
            Ngừng kích hoạt
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.PrepareModelFor">
            <summary>
            Prepare for Model CRUD
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.LogLevel">
            <summary>
            Represents a log level
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Directory.CurrencySettings">
            <summary>
            Currency settings
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Directory.CurrencySettings.PrimaryCurrencyId">
            <summary>
            Primary currency identifier
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Directory.CurrencySettings.PrimaryExchangeRateCurrencyId">
            <summary>
             Primary exchange rate currency identifier
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Directory.MeasureSettings">
            <summary>
            Measure settings
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Directory.MeasureSettings.BaseDimensionId">
            <summary>
            Base dimension identifier
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Directory.MeasureSettings.BaseWeightId">
            <summary>
            Base weight identifier
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Localization.ILocalizedEntity">
            <summary>
            Represents a localized entity
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Localization.LanguageSvcEntity">
            <summary>Danh sách Ngôn ngữ hệ thống</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.Name">
            <summary>Tên ngôn ngữ</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.LanguageCulture">
            <summary>Mã ngôn ngữ địa phương (VD: en-US, vi-VN)</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.UniqueSeoCode">
            <summary>Mã ngôn ngữ ISO 2 ký tự (VD: en, vi)</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.FlagImageFileName">
            <summary>Tên file cờ quốc gia</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.Rtl">
            <summary>Bố cục phải-qua-trái</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.LimitedToApps">
            <summary>Giới hạn cho các App</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.DefaultCurrencyId">
            <summary>Tiền tệ mặc định (Ref: Currency)</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.Published">
            <summary>Phát hành</summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LanguageSvcEntity.DisplayOrder">
            <summary>Thứ tự hiển thị</summary>
        </member>
        <member name="T:VTQT.Core.Domain.Localization.LocalizationSettings">
            <summary>
            Localization settings
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LocalizationSettings.DefaultAdminLanguageId">
            <summary>
            Default admin area language identifier
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled">
            <summary>
            A value indicating whether SEO friendly URLs with multiple languages are enabled
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LocalizationSettings.AutomaticallyDetectLanguage">
            <summary>
            A value indicating whether we should detect the current language by a customer region (browser settings)
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LocalizationSettings.LoadAllLocaleRecordsOnStartup">
            <summary>
            A value indicating whether to load all LocaleStringResource records on application startup
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LocalizationSettings.LoadAllLocalizedPropertiesOnStartup">
            <summary>
            A value indicating whether to load all LocalizedProperty records on application startup
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LocalizationSettings.LoadAllUrlRecordsOnStartup">
            <summary>
            A value indicating whether to load all search engine friendly names (slugs) on application startup
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Localization.LocalizationSettings.IgnoreRtlPropertyForAdminArea">
            <summary>
            A value indicating whether to we should ignore RTL language property for admin area.
            It's useful for store owners with RTL languages for public store but preferring LTR for admin area
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Security.CaptchaSettings">
            <summary>
            CAPTCHA settings
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.Enabled">
            <summary>
            Is CAPTCHA enabled?
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.CaptchaType">
            <summary>
            Type of reCAPTCHA
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ShowOnLoginPage">
            <summary>
            A value indicating whether CAPTCHA should be displayed on the login page
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ShowOnRegistrationPage">
            <summary>
            A value indicating whether CAPTCHA should be displayed on the registration page
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ShowOnContactUsPage">
            <summary>
            A value indicating whether CAPTCHA should be displayed on the contacts page
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ShowOnForgotPasswordPage">
            <summary>
            A value indicating whether CAPTCHA should be displayed on the "forgot password" page
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ReCaptchaApiUrl">
            <summary>
            The base reCAPTCHA API URL
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ReCaptchaPublicKey">
            <summary>
            reCAPTCHA public key
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ReCaptchaPrivateKey">
            <summary>
            reCAPTCHA private key
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ReCaptchaV3ScoreThreshold">
            <summary>
            reCAPTCHA V3 score threshold
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ReCaptchaTheme">
            <summary>
            reCAPTCHA theme
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ReCaptchaRequestTimeout">
            <summary>
            The length of time, in seconds, before the reCAPTCHA request times out
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.ReCaptchaDefaultLanguage">
            <summary>
            reCAPTCHA default language
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.CaptchaSettings.AutomaticallyChooseLanguage">
            <summary>
            A value indicating whether reCAPTCHA language should be set automatically
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Security.SecuritySettings">
            <summary>
            Security settings
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.SecuritySettings.EncryptionKey">
            <summary>
            Gets or sets an encryption key
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.SecuritySettings.AdminAreaAllowedIpAddresses">
            <summary>
            Gets or sets a list of admin area allowed IP addresses
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.SecuritySettings.HoneypotEnabled">
            <summary>
            Gets or sets a value indicating whether honeypot is enabled on the registration page
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.SecuritySettings.HoneypotInputName">
            <summary>
            Gets or sets a honeypot input name
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Security.SecuritySettings.AllowNonAsciiCharactersInHeaders">
            <summary>
            Gets or sets a value indicating whether to allow non-ASCII characters in headers
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Seo.ISlugSupported">
            <summary>
            Represents an entity which supports slug (SEO friendly one-word URLs)
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Seo.PageTitleSeoAdjustment">
            <summary>
            Represents a page title SEO adjustment
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.Seo.PageTitleSeoAdjustment.PagenameAfterStorename">
            <summary>
            Pagename comes after storename
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.Seo.PageTitleSeoAdjustment.StorenameAfterPagename">
            <summary>
            Storename comes after pagename
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Seo.SeoSettings">
            <summary>
            SEO settings
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.PageTitleSeparator">
            <summary>
            Page title separator
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.PageTitleSeoAdjustment">
            <summary>
            Page title SEO adjustment
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.HomepageTitle">
            <summary>
            Home page title
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.HomepageDescription">
            <summary>
            Home page description
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.DefaultTitle">
            <summary>
            Default title
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.DefaultMetaKeywords">
            <summary>
            Default META keywords
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.DefaultMetaDescription">
            <summary>
            Default META description
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.GenerateProductMetaDescription">
            <summary>
            A value indicating whether product META descriptions will be generated automatically (if not entered)
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.ConvertNonWesternChars">
            <summary>
            A value indicating whether we should convert non-western chars to western ones
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.AllowUnicodeCharsInUrls">
            <summary>
            A value indicating whether unicode chars are allowed
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.CanonicalUrlsEnabled">
            <summary>
            A value indicating whether canonical URL tags should be used
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.QueryStringInCanonicalUrlsEnabled">
            <summary>
            A value indicating whether to use canonical URLs with query string parameters
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.WwwRequirement">
            <summary>
            WWW requires (with or without WWW)
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.TwitterMetaTags">
            <summary>
            A value indicating whether Twitter META tags should be generated
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.OpenGraphMetaTags">
            <summary>
            A value indicating whether Open Graph META tags should be generated
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.ReservedUrlRecordSlugs">
            <summary>
            Slugs (sename) reserved for some other needs
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.CustomHeadTags">
            <summary>
            Custom tags in the <![CDATA[<head></head>]]> section
            </summary>
        </member>
        <member name="P:VTQT.Core.Domain.Seo.SeoSettings.MicrodataEnabled">
            <summary>
            A value indicating whether Microdata tags should be generated
            </summary>
        </member>
        <member name="T:VTQT.Core.Domain.Seo.WwwRequirement">
            <summary>
            Represents WWW requirement
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.Seo.WwwRequirement.NoMatter">
            <summary>
            Doesn't matter (do nothing)
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.Seo.WwwRequirement.WithWww">
            <summary>
            Pages should have WWW prefix
            </summary>
        </member>
        <member name="F:VTQT.Core.Domain.Seo.WwwRequirement.WithoutWww">
            <summary>
            Pages should not have WWW prefix
            </summary>
        </member>
        <member name="T:VTQT.Core.Events.EntityDeletedEvent`1">
            <summary>
            A container for passing entities that have been deleted. This is not used for entities that are deleted logically via a bit column.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VTQT.Core.Events.EntityDeletedEvent`1.#ctor(`0)">
            <summary>
            Ctor
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="P:VTQT.Core.Events.EntityDeletedEvent`1.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="T:VTQT.Core.Events.EntityInsertedEvent`1">
            <summary>
            A container for entities that have been inserted.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VTQT.Core.Events.EntityInsertedEvent`1.#ctor(`0)">
            <summary>
            Ctor
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="P:VTQT.Core.Events.EntityInsertedEvent`1.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="T:VTQT.Core.Events.EntityUpdatedEvent`1">
            <summary>
            A container for entities that are updated.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VTQT.Core.Events.EntityUpdatedEvent`1.#ctor(`0)">
            <summary>
            Ctor
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="P:VTQT.Core.Events.EntityUpdatedEvent`1.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="T:VTQT.Core.Events.EventPublisherExtensions">
            <summary>
            Event publisher extensions
            </summary>
        </member>
        <member name="M:VTQT.Core.Events.EventPublisherExtensions.EntityInsertedAsync``1(VTQT.Core.Events.IEventPublisher,``0)">
            <summary>
            Entity inserted
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="eventPublisher">Event publisher</param>
            <param name="entity">Entity</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:VTQT.Core.Events.EventPublisherExtensions.EntityUpdatedAsync``1(VTQT.Core.Events.IEventPublisher,``0)">
            <summary>
            Entity updated
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="eventPublisher">Event publisher</param>
            <param name="entity">Entity</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:VTQT.Core.Events.EventPublisherExtensions.EntityDeletedAsync``1(VTQT.Core.Events.IEventPublisher,``0)">
            <summary>
            Entity deleted
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="eventPublisher">Event publisher</param>
            <param name="entity">Entity</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="T:VTQT.Core.Events.IEventPublisher">
            <summary>
            Represents an event publisher
            </summary>
        </member>
        <member name="M:VTQT.Core.Events.IEventPublisher.PublishAsync``1(``0)">
            <summary>
            Publish event to consumers
            </summary>
            <typeparam name="TEvent">Type of event</typeparam>
            <param name="event">Event object</param>
        </member>
        <member name="M:VTQT.Core.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param><param name="y">The second object of type <paramref name="T"/> to compare.</param>
        </member>
        <member name="M:VTQT.Core.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:VTQT.Core.Html.BBCodeHelper.ToHtml(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Formats the text
            </summary>
            <param name="text">Text</param>
            <param name="replaceBold">A value indicating whether to replace Bold</param>
            <param name="replaceItalic">A value indicating whether to replace Italic</param>
            <param name="replaceUnderline">A value indicating whether to replace Underline</param>
            <param name="replaceUrl">A value indicating whether to replace URL</param>
            <param name="replaceCode">A value indicating whether to replace Code</param>
            <param name="replaceQuote">A value indicating whether to replace Quote</param>
            <returns>Formatted text</returns>
        </member>
        <member name="M:VTQT.Core.Html.BBCodeHelper.RemoveQuotes(System.String)">
            <summary>
            Removes all quotes from string
            </summary>
            <param name="str">Source string</param>
            <returns>string</returns>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.CLikeFormat">
            <summary>
            Provides a base class for formatting languages similar to C.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CLikeFormat.CommentRegex">
            <summary>
            Regular expression string to match single line and multi-line 
            comments (// and /* */). 
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CLikeFormat.StringRegex">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.CodeFormat">
            <summary>
            Provides a base class for formatting most programming languages.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CodeFormat.Keywords">
            <summary>
            Must be overridden to provide a list of keywords defined in 
            each language.
            </summary>
            <remarks>
            Keywords must be separated with spaces.
            </remarks>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CodeFormat.Preprocessors">
            <summary>
            Can be overridden to provide a list of preprocessors defined in 
            each language.
            </summary>
            <remarks>
            Preprocessors must be separated with spaces.
            </remarks>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CodeFormat.StringRegex">
            <summary>
            Must be overridden to provide a regular expression string
            to match strings literals. 
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CodeFormat.CommentRegex">
            <summary>
            Must be overridden to provide a regular expression string
            to match comments. 
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CodeFormat.CaseSensitive">
            <summary>
            Determines if the language is case sensitive.
            </summary>
            <value><b>true</b> if the language is case sensitive, <b>false</b> 
            otherwise. The default is true.</value>
            <remarks>
            A case-insensitive language formatter must override this 
            property to return false.
            </remarks>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.CodeFormat.#ctor">
            <summary/>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.CodeFormat.MatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            matching token in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.CodeFormatHelper">
            <summary>
            Represents a code format helper
            </summary>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.CodeFormatHelper.CodeEvaluatorSimple(System.Text.RegularExpressions.Match)">
            <summary>
            Code evaluator method
            </summary>
            <param name="match">Match</param>
            <returns>Formatted text</returns>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.CodeFormatHelper.StripHtml(System.String)">
            <summary>
            Strips HTML
            </summary>
            <param name="html">HTML</param>
            <returns>Formatted text</returns>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.CodeFormatHelper.Highlight(VTQT.Core.Html.CodeFormatter.HighlightOptions,System.String)">
            <summary>
            Returns the formatted text.
            </summary>
            <param name="options">Whatever options were set in the regex groups.</param>
            <param name="text">Send the e.body so it can get formatted.</param>
            <returns>The formatted string of the match.</returns>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.CodeFormatHelper.FormatTextSimple(System.String)">
            <summary>
            Formats the text
            </summary>
            <param name="text">Text</param>
            <returns>Formatted text</returns>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.CSharpFormat">
            <summary>
            Generates color-coded HTML 4.01 from C# source code.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CSharpFormat.Keywords">
            <summary>
            The list of C# keywords.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.CSharpFormat.Preprocessors">
            <summary>
            The list of C# preprocessors.
            </summary>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.HighlightOptions">
            <summary>
            Handles all of the options for changing the rendered code.
            </summary>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.HtmlFormat">
            <summary>
            Generates color-coded HTML 4.01 from HTML/XML/ASPX source code.
            </summary>
            <remarks>
            <para>
            This implementation assumes that code inside &lt;script&gt; blocks 
            is JavaScript, and code inside &lt;% %&gt; blocks is C#.</para>
            <para>
            The default tab width is set to 2 characters in this class.</para>
            </remarks>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.HtmlFormat.#ctor">
            <summary/>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.HtmlFormat.AttributeMatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            attribute's name/value in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.HtmlFormat.MatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            matching token in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.JavaScriptFormat">
            <summary>
            Generates color-coded HTML 4.01 from JavaSctript source code.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.JavaScriptFormat.Keywords">
            <summary>
            The list of JavaScript keywords.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.JavaScriptFormat.Preprocessors">
            <summary>
            Use the pre-processor color to mark directives that start with @.
            </summary>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.MshFormat">
            <summary>
            Generates color-coded HTML 4.01 from MSH (code name Monad) source code.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.MshFormat.CommentRegex">
            <summary>
            Regular expression string to match single line comments (#).
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.MshFormat.StringRegex">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.MshFormat.Keywords">
            <summary>
            The list of MSH keywords.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.MshFormat.Preprocessors">
            <summary>
            Use preprocessors property to hilight operators.
            </summary>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.SourceFormat">
            <summary>
            Provides a base implementation for all code formatters.
            </summary>
            <remarks>
            <para>
            To display the formatted code on your web site, the web page must 
            refer to a stylesheet that defines the formatting for the different 
            CSS classes generated by CSharpFormat:
            .csharpcode, pre, .rem, .kwrd, .str, .op, .preproc, .alt, .lnum.
            </para>
            <para>
            Note that if you have multi-line comments in your source code
            (like /* ... */), the "line numbers" or "alternate line background" 
            options will generate code that is not strictly HTML 4.01 compliant. 
            The code will still look good with IE5+ or Mozilla 0.8+. 
            </para>
            </remarks>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.SourceFormat.#ctor">
            <summary/>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.SourceFormat.TabSpaces">
            <summary>
            Gets or sets the tabs width.
            </summary>
            <value>The number of space characters to substitute for tab 
            characters. The default is <b>4</b>, unless overridden is a 
            derived class.</value>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.SourceFormat.LineNumbers">
            <summary>
            Enables or disables line numbers in output.
            </summary>
            <value>When <b>true</b>, line numbers are generated. 
            The default is <b>false</b>.</value>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.SourceFormat.Alternate">
            <summary>
            Enables or disables alternating line background.
            </summary>
            <value>When <b>true</b>, lines background is alternated. 
            The default is <b>false</b>.</value>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.SourceFormat.EmbedStyleSheet">
            <summary>
            Enables or disables the embedded CSS style sheet.
            </summary>
            <value>When <b>true</b>, the CSS &lt;style&gt; element is included 
            in the HTML output. The default is <b>false</b>.</value>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.SourceFormat.FormatCode(System.IO.Stream)">
            <overloads>Transform source code to HTML 4.01.</overloads>
            
            <summary>
            Transforms a source code stream to HTML 4.01.
            </summary>
            <param name="source">Source code stream.</param>
            <returns>A string containing the HTML formatted code.</returns>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.SourceFormat.FormatCode(System.String)">
            <summary>
            Transforms a source code string to HTML 4.01.
            </summary>
            <returns>A string containing the HTML formatted code.</returns>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.SourceFormat.FormatSubCode(System.String)">
            <summary>
            Allows formatting a part of the code in a different language,
            for example a JavaScript block inside an HTML file.
            </summary>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.SourceFormat.GetCssStream">
            <summary>
            Gets the CSS stylesheet as a stream.
            </summary>
            <returns>A text <see cref="T:System.IO.Stream"/> of the CSS definitions.</returns>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.SourceFormat.GetCssString">
            <summary>
            Gets the CSS stylesheet as a string.
            </summary>
            <returns>A string containing the CSS definitions.</returns>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.SourceFormat.CodeRegex">
            <summary>
            The regular expression used to capture language tokens.
            </summary>
        </member>
        <member name="M:VTQT.Core.Html.CodeFormatter.SourceFormat.MatchEval(System.Text.RegularExpressions.Match)">
            <summary>
            Called to evaluate the HTML fragment corresponding to each 
            matching token in the code.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> resulting from a 
            single regular expression match.</param>
            <returns>A string containing the HTML code fragment.</returns>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.TsqlFormat">
            <summary>
            Generates color-coded T-SQL source code.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.TsqlFormat.CommentRegex">
            <summary>
            Regular expression string to match single line 
            comments (--). 
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.TsqlFormat.StringRegex">
            <summary>
            Regular expression string to match string literals. 
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.TsqlFormat.CaseSensitive">
            <summary>
            Returns <b>false</b>, since T-SQL is not case sensitive.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.TsqlFormat.Keywords">
            <summary>
            The list of T-SQL keywords.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.TsqlFormat.Preprocessors">
            <summary>
            Use the pre-processor color to mark keywords that start with @@.
            </summary>
        </member>
        <member name="T:VTQT.Core.Html.CodeFormatter.VisualBasicFormat">
            <summary>
            Generates color-coded HTML 4.01 from Visual Basic source code.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.VisualBasicFormat.CaseSensitive">
            <summary>
            Determines if the language is case sensitive.
            </summary>
            <value>Always <b>true</b>, since VB is not case sensitive.</value>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.VisualBasicFormat.CommentRegex">
            <summary>
            Regular expression string to match comments (' and REM). 
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.VisualBasicFormat.StringRegex">
            <summary>
            Regular expression string to match string and character literals. 
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.VisualBasicFormat.Keywords">
            <summary>
            The list of VB keywords.
            </summary>
        </member>
        <member name="P:VTQT.Core.Html.CodeFormatter.VisualBasicFormat.Preprocessors">
            <summary>
            The list of VB preprocessors.
            </summary>
        </member>
        <member name="T:VTQT.Core.Html.HtmlUtils">
            <summary>
            Utility class for html manipulation or creation
            </summary>
        </member>
        <member name="M:VTQT.Core.Html.HtmlUtils.FormatText(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Formats the text
            </summary>
            <param name="text">Text</param>
            <param name="stripTags">A value indicating whether to strip tags</param>
            <param name="convertPlainTextToHtml">A value indicating whether HTML is allowed</param>
            <param name="allowHtml">A value indicating whether HTML is allowed</param>
            <param name="allowBBCode">A value indicating whether BBCode is allowed</param>
            <param name="resolveLinks">A value indicating whether to resolve links</param>
            <param name="addNoFollowTag">A value indicating whether to add "noFollow" tag</param>
            <returns>Formatted text</returns>
        </member>
        <member name="M:VTQT.Core.Html.HtmlUtils.StripTags(System.String)">
            <summary>
            Strips tags
            </summary>
            <param name="html">Text</param>
            <returns>Formatted text</returns>
        </member>
        <member name="M:VTQT.Core.Html.HtmlUtils.ReplaceAnchorTags(System.String)">
            <summary>
            Replace anchor text (remove a tag from the following url <a href="http://example.com">Name</a> and output only the string "Name")
            </summary>
            <param name="text">Text</param>
            <returns>Text</returns>
        </member>
        <member name="M:VTQT.Core.Html.HtmlUtils.ConvertPlainTextToHtml(System.String)">
            <summary>
            Converts plain text to HTML
            </summary>
            <param name="text">Text</param>
            <returns>Formatted text</returns>
        </member>
        <member name="M:VTQT.Core.Html.HtmlUtils.ConvertHtmlToPlainText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts HTML to plain text
            </summary>
            <param name="text">Text</param>
            <param name="decode">A value indicating whether to decode text</param>
            <param name="replaceAnchorTags">A value indicating whether to replace anchor text (remove a tag from the following url <a href="http://example.com">Name</a> and output only the string "Name")</param>
            <returns>Formatted text</returns>
        </member>
        <member name="M:VTQT.Core.Html.HtmlUtils.ConvertPlainTextToTable(System.String,System.String)">
            <summary>
            Converts an attribute string spec to a html table putting each new line in a TR and each attr name/value in a TD.
            </summary>
            <param name="text">The text to convert</param>
            <returns>The formatted (html) string</returns>
        </member>
        <member name="M:VTQT.Core.Html.HtmlUtils.ConvertPlainTextToParagraph(System.String)">
            <summary>
            Converts text to paragraph
            </summary>
            <param name="text">Text</param>
            <returns>Formatted text</returns>
        </member>
        <member name="M:VTQT.Core.Html.HtmlUtils.RelativizeFontSizes(System.String,System.Int32)">
            <summary>
            Converts all occurences of pixel-based inline font-size expression to relative 'em'
            </summary>
            <param name="html"></param>
            <param name="baseFontSizePx"></param>
            <returns></returns>
        </member>
        <member name="T:VTQT.Core.Html.ResolveLinksHelper">
            <summary>
            Represents a ResolveLinks helper
            </summary>
        </member>
        <member name="F:VTQT.Core.Html.ResolveLinksHelper.regex">
            <summary>
            The regular expression used to parse links.
            </summary>
        </member>
        <member name="M:VTQT.Core.Html.ResolveLinksHelper.ShortenUrl(System.String,System.Int32)">
            <summary>
            Shortens any absolute URL to a specified maximum length
            </summary>
        </member>
        <member name="M:VTQT.Core.Html.ResolveLinksHelper.FormatText(System.String)">
            <summary>
            Formats the text
            </summary>
            <param name="text">Text</param>
            <returns>Formatted text</returns>
        </member>
        <member name="T:VTQT.Core.Http.Extensions.SessionExtensions">
            <summary>
            Represents extensions of ISession
            </summary>
        </member>
        <member name="M:VTQT.Core.Http.Extensions.SessionExtensions.Set``1(Microsoft.AspNetCore.Http.ISession,System.String,``0)">
            <summary>
            Set value to Session
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="session">Session</param>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:VTQT.Core.Http.Extensions.SessionExtensions.Get``1(Microsoft.AspNetCore.Http.ISession,System.String)">
            <summary>
            Get value from session
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="session">Session</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="T:VTQT.Core.Http.HttpDefaults">
            <summary>
            Represents default values related to HTTP features
            </summary>
        </member>
        <member name="P:VTQT.Core.Http.HttpDefaults.DefaultHttpClient">
            <summary>
            Gets the name of the default HTTP client
            </summary>
        </member>
        <member name="P:VTQT.Core.Http.HttpDefaults.IsPostBeingDoneRequestItem">
            <summary>
            Gets the name of a request item that stores the value that indicates whether the client is being redirected to a new location using POST
            </summary>
        </member>
        <member name="P:VTQT.Core.Http.HttpDefaults.HttpClusterHttpsHeader">
            <summary>
            Gets the name of HTTP_CLUSTER_HTTPS header
            </summary>
        </member>
        <member name="P:VTQT.Core.Http.HttpDefaults.HttpXForwardedProtoHeader">
            <summary>
            Gets the name of HTTP_X_FORWARDED_PROTO header
            </summary>
        </member>
        <member name="P:VTQT.Core.Http.HttpDefaults.XForwardedForHeader">
            <summary>
            Gets the name of X-FORWARDED-FOR header
            </summary>
        </member>
        <member name="T:VTQT.Core.IAppContext">
            <summary>
            App context
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.AppDomainTypeFinder">
            <summary>
            A class that finds types needed by Nop by looping assemblies in the 
            currently executing AppDomain. Only assemblies whose names matches
            certain patterns are investigated and an optional list of assemblies
            referenced by <see cref="P:VTQT.Core.Infrastructure.AppDomainTypeFinder.AssemblyNames"/> are always investigated.
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.AddAssembliesInAppDomain(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Iterates all assemblies in the AppDomain and if it's name matches the configured patterns add it to our list.
            </summary>
            <param name="addedAssemblyNames"></param>
            <param name="assemblies"></param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.AddConfiguredAssemblies(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Adds specifically configured assemblies.
            </summary>
            <param name="addedAssemblyNames"></param>
            <param name="assemblies"></param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.Matches(System.String)">
            <summary>
            Check if a dll is one of the shipped dlls that we know don't need to be investigated.
            </summary>
            <param name="assemblyFullName">
            The name of the assembly to check.
            </param>
            <returns>
            True if the assembly should be loaded into Nop.
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.Matches(System.String,System.String)">
            <summary>
            Check if a dll is one of the shipped dlls that we know don't need to be investigated.
            </summary>
            <param name="assemblyFullName">
            The assembly name to match.
            </param>
            <param name="pattern">
            The regular expression pattern to match against the assembly name.
            </param>
            <returns>
            True if the pattern matches the assembly name.
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.LoadMatchingAssemblies(System.String)">
            <summary>
            Makes sure matching assemblies in the supplied folder are loaded in the app domain.
            </summary>
            <param name="directoryPath">
            The physical path to a directory containing dlls to load in the app domain.
            </param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.DoesTypeImplementOpenGeneric(System.Type,System.Type)">
            <summary>
            Does type implement generic?
            </summary>
            <param name="type"></param>
            <param name="openGeneric"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.FindClassesOfType``1(System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.FindClassesOfType(System.Type,System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <param name="assignTypeFrom">Assign type from</param>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
            <returns></returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="assemblies">Assemblies</param>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <param name="assignTypeFrom">Assign type from</param>
            <param name="assemblies">Assemblies</param>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.AppDomainTypeFinder.GetAssemblies">
            <summary>
            Gets the assemblies related to the current implementation.
            </summary>
            <returns>A list of assemblies</returns>
        </member>
        <member name="P:VTQT.Core.Infrastructure.AppDomainTypeFinder.App">
            <summary>The app domain to look for types in.</summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.AppDomainTypeFinder.LoadAppDomainAssemblies">
            <summary>Gets or sets whether Nop should iterate assemblies in the app domain when loading Nop types. Loading patterns are applied when loading these assemblies.</summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.AppDomainTypeFinder.AssemblyNames">
            <summary>Gets or sets assemblies loaded a startup in addition to those loaded in the AppDomain.</summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.AppDomainTypeFinder.AssemblySkipLoadingPattern">
            <summary>Gets the pattern for dlls that we know don't need to be investigated.</summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.AppDomainTypeFinder.AssemblyRestrictToLoadingPattern">
            <summary>Gets or sets the pattern for dll that will be investigated. For ease of use this defaults to match all but to increase performance you might want to configure a pattern that includes assemblies and your own.</summary>
            <remarks>If you change this so that Nop assemblies aren't investigated (e.g. by not including something like "^Nop|..." you may break core functionality.</remarks>
        </member>
        <member name="T:VTQT.Core.Infrastructure.BaseSingleton">
            <summary>
            Provides access to all "singletons" stored by <see cref="T:VTQT.Core.Infrastructure.Singleton`1"/>.
            </summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.BaseSingleton.AllSingletons">
            <summary>
            Dictionary of type to singleton instances.
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.DependencyManagement.IDependencyRegistrar">
            <summary>
            Dependency registrar interface
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.DependencyManagement.IDependencyRegistrar.Register(Autofac.ContainerBuilder,VTQT.Core.Infrastructure.ITypeFinder,VTQT.Core.Configuration.XBaseConfig)">
            <summary>
            Register services and interfaces
            </summary>
            <param name="builder">Container builder</param>
            <param name="typeFinder">Type finder</param>
            <param name="config">Config</param>
        </member>
        <member name="P:VTQT.Core.Infrastructure.DependencyManagement.IDependencyRegistrar.Order">
            <summary>
            Gets order of this dependency registrar implementation
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.EngineContext">
            <summary>
            Provides access to the singleton instance of the Nop engine.
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.EngineContext.Create">
            <summary>
            Create a static instance of the Nop engine.
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.EngineContext.Replace(VTQT.Core.Infrastructure.IEngine)">
            <summary>
            Sets the static engine instance to the supplied engine. Use this method to supply your own engine implementation.
            </summary>
            <param name="engine">The engine to use.</param>
            <remarks>Only use this method if you know what you're doing.</remarks>
        </member>
        <member name="P:VTQT.Core.Infrastructure.EngineContext.Current">
            <summary>
            Gets the singleton Nop engine used to access Nop services.
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.IEngine">
            <summary>
            Classes implementing this interface can serve as a portal for the various services composing the Nop engine. 
            Edit functionality, modules and implementations access most Nop functionality through this interface.
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IEngine.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,VTQT.Core.Configuration.XBaseConfig)">
            <summary>
            Add and configure services
            </summary>
            <param name="services">Collection of service descriptors</param>
            <param name="configuration">Configuration of the application</param>
            <param name="config">Nop configuration parameters</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IEngine.ConfigureRequestPipeline(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configure HTTP request pipeline
            </summary>
            <param name="application">Builder for configuring an application's request pipeline</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IEngine.Resolve``1(System.String)">
            <summary>
            Resolve dependency
            </summary>
            <typeparam name="T">Type of resolved service</typeparam>
            <returns>Resolved service</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IEngine.Resolve(System.Type,System.String)">
            <summary>
            Resolve dependency
            </summary>
            <param name="type">Type of resolved service</param>
            <returns>Resolved service</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IEngine.ResolveAll``1">
            <summary>
            Resolve dependencies
            </summary>
            <typeparam name="T">Type of resolved services</typeparam>
            <returns>Collection of resolved services</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IEngine.ResolveUnregistered(System.Type)">
            <summary>
            Resolve unregistered service
            </summary>
            <param name="type">Type of service</param>
            <returns>Resolved service</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IEngine.RegisterDependencies(Autofac.ContainerBuilder,VTQT.Core.Configuration.XBaseConfig)">
            <summary>
            Register dependencies
            </summary>
            <param name="containerBuilder">Container builder</param>
            <param name="config">Nop configuration parameters</param>
        </member>
        <member name="T:VTQT.Core.Infrastructure.IStartupTask">
            <summary>
            Interface which should be implemented by tasks run on startup
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IStartupTask.Execute">
            <summary>
            Executes a task
            </summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.IStartupTask.Order">
            <summary>
            Gets order of this startup task implementation
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.ITypeFinder">
            <summary>
            Classes implementing this interface provide information about types 
            to various services in the Nop engine.
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.ITypeFinder.FindClassesOfType``1(System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.ITypeFinder.FindClassesOfType(System.Type,System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <param name="assignTypeFrom">Assign type from</param>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
            <returns></returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.ITypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="assemblies">Assemblies</param>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.ITypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Find classes of type
            </summary>
            <param name="assignTypeFrom">Assign type from</param>
            <param name="assemblies">Assemblies</param>
            <param name="onlyConcreteClasses">A value indicating whether to find only concrete classes</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.ITypeFinder.GetAssemblies">
            <summary>
            Gets the assemblies related to the current implementation.
            </summary>
            <returns>A list of assemblies</returns>
        </member>
        <member name="T:VTQT.Core.Infrastructure.IXBaseFileProvider">
            <summary>
            A file provider abstraction
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path
            </summary>
            <param name="paths">An array of parts of the path</param>
            <returns>The combined paths</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path unless they already exist
            </summary>
            <param name="path">The directory to create</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.CreateFile(System.String)">
            <summary>
            Creates or overwrites a file in the specified path
            </summary>
            <param name="path">The path and name of the file to create</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.DeleteDirectory(System.String)">
            <summary>
            Depth-first recursive delete, with handling for descendant directories open in Windows Explorer.
            </summary>
            <param name="path">Directory path</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.DeleteFile(System.String)">
            <summary>
            Deletes the specified file
            </summary>
            <param name="filePath">The name of the file to be deleted. Wildcard characters are not supported</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk
            </summary>
            <param name="path">The path to test</param>
            <returns>
            true if path refers to an existing directory; false if the directory does not exist or an error occurs when
            trying to determine if the specified file exists
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.DirectoryMove(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location
            </summary>
            <param name="sourceDirName">The path of the file or directory to move</param>
            <param name="destDirName">
            The path to the new location for sourceDirName. If sourceDirName is a file, then destDirName
            must also be a file name
            </param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.EnumerateFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in
            a specified path, and optionally searches subdirectories.
            </summary>
            <param name="directoryPath">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An enumerable collection of the full names (including paths) for the files in
            the directory specified by path and that match the specified search pattern
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed
            </summary>
            <param name="sourceFileName">The file to copy</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists
            </summary>
            <param name="filePath">The file to check</param>
            <returns>
            True if the caller has the required permissions and path contains the name of an existing file; otherwise,
            false.
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.FileLength(System.String)">
            <summary>
            Gets the length of the file in bytes, or -1 for a directory or non-existing files
            </summary>
            <param name="path">File path</param>
            <returns>The length of the file</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.FileMove(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name
            </summary>
            <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path</param>
            <param name="destFileName">The new path and name for the file</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetAbsolutePath(System.String[])">
            <summary>
            Returns the absolute path to the directory
            </summary>
            <param name="paths">An array of parts of the path</param>
            <returns>The absolute path to the directory</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetAccessControl(System.String)">
            <summary>
            Gets a System.Security.AccessControl.DirectorySecurity object that encapsulates the access control list (ACL) entries for a specified directory
            </summary>
            <param name="path">The path to a directory containing a System.Security.AccessControl.DirectorySecurity object that describes the file's access control list (ACL) information</param>
            <returns>An object that encapsulates the access control rules for the file described by the path parameter</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetCreationTime(System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information</param>
            <returns>
            A System.DateTime structure set to the creation date and time for the specified file or directory. This value
            is expressed in local time
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            Returns the names of the subdirectories (including their paths) that match the
            specified search pattern in the specified directory
            </summary>
            <param name="path">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of subdirectories in path. This
            parameter can contain a combination of valid literal and wildcard characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An array of the full names (including paths) of the subdirectories that match
            the specified criteria, or an empty array if no directories are found
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string
            </summary>
            <param name="path">The path of a file or directory</param>
            <returns>
            Directory information for path, or null if path denotes a root directory or is null. Returns
            System.String.Empty if path does not contain directory information
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetDirectoryNameOnly(System.String)">
            <summary>
            Returns the directory name only for the specified path string
            </summary>
            <param name="path">The path of directory</param>
            <returns>The directory name</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetFileExtension(System.String)">
            <summary>
            Returns the extension of the specified path string
            </summary>
            <param name="filePath">The path string from which to get the extension</param>
            <returns>The extension of the specified path (including the period ".")</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string
            </summary>
            <param name="path">The path string from which to obtain the file name and extension</param>
            <returns>The characters after the last directory character in path</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension
            </summary>
            <param name="filePath">The path of the file</param>
            <returns>The file name, minus the last period (.) and all characters following it</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns the names of files (including their paths) that match the specified search
            pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="directoryPath">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An array of the full names (including paths) for the files in the specified directory
            that match the specified search pattern, or an empty array if no files are found.
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information</param>
            <returns>A System.DateTime structure set to the date and time that the specified file</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information</param>
            <returns>
            A System.DateTime structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in local time
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last
            written to
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information</param>
            <returns>
            A System.DateTime structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in UTC time
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetParentDirectory(System.String)">
            <summary>
            Retrieves the parent directory of the specified path
            </summary>
            <param name="directoryPath">The path for which to retrieve the parent directory</param>
            <returns>The parent directory, or null if path is the root directory, including the root of a UNC server or share name</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.GetVirtualPath(System.String)">
            <summary>
            Gets a virtual path from a physical disk path.
            </summary>
            <param name="path">The physical disk path</param>
            <returns>The virtual path. E.g. "~/bin"</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.IsDirectory(System.String)">
            <summary>
            Checks if the path is directory
            </summary>
            <param name="path">Path for check</param>
            <returns>True, if the path is a directory, otherwise false</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical disk path.
            </summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.ReadAllBytes(System.String)">
            <summary>
            Reads the contents of the file into a byte array
            </summary>
            <param name="filePath">The file for reading</param>
            <returns>A byte array containing the contents of the file</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading</param>
            <param name="encoding">The encoding applied to the contents of the file</param>
            <returns>A string containing all lines of the file</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to
            </summary>
            <param name="path">The file for which to set the date and time information</param>
            <param name="lastWriteTimeUtc">
            A System.DateTime containing the value to set for the last write date and time of path.
            This value is expressed in UTC time
            </param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes the specified byte array to the file
            </summary>
            <param name="filePath">The file to write to</param>
            <param name="bytes">The bytes to write to the file</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseFileProvider.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding,
            and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to</param>
            <param name="contents">The string to write to the file</param>
            <param name="encoding">The encoding to apply to the string</param>
        </member>
        <member name="T:VTQT.Core.Infrastructure.IXBaseStartup">
            <summary>
            Represents object for the configuring services and middleware on application startup
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add and configure any of the middleware
            </summary>
            <param name="services">Collection of service descriptors</param>
            <param name="configuration">Configuration of the application</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.IXBaseStartup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configure the using of added middleware
            </summary>
            <param name="application">Builder for configuring an application's request pipeline</param>
        </member>
        <member name="P:VTQT.Core.Infrastructure.IXBaseStartup.Order">
            <summary>
            Gets order of this startup configuration implementation
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.Mapper.AutoMapperConfiguration">
            <summary>
            AutoMapper configuration
            </summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.Mapper.AutoMapperConfiguration.Mapper">
            <summary>
            Mapper
            </summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.Mapper.AutoMapperConfiguration.MapperConfiguration">
            <summary>
            Mapper configuration
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.Mapper.AutoMapperConfiguration.Init(AutoMapper.MapperConfiguration)">
            <summary>
            Initialize mapper
            </summary>
            <param name="config">Mapper configuration</param>
        </member>
        <member name="T:VTQT.Core.Infrastructure.Mapper.IOrderedMapperProfile">
            <summary>
            Mapper profile registrar interface
            </summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.Mapper.IOrderedMapperProfile.Order">
            <summary>
            Gets order of this configuration implementation
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.Singleton`1">
            <summary>
            A statically compiled "singleton" used to store objects throughout the 
            lifetime of the app domain. Not so much singleton in the pattern's 
            sense of the word as a standardized way to store single instances.
            </summary>
            <typeparam name="T">The type of object to store.</typeparam>
            <remarks>Access to the instance is not synchronized.</remarks>
        </member>
        <member name="P:VTQT.Core.Infrastructure.Singleton`1.Instance">
            <summary>
            The singleton instance for the specified type T. Only one instance (at the time) of this object for each type of T.
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.WebAppTypeFinder">
            <summary>
            Provides information about types in the current web application. 
            Optionally this class can look at all assemblies in the bin folder.
            </summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.WebAppTypeFinder.EnsureBinFolderAssembliesLoaded">
            <summary>
            Gets or sets whether assemblies in the bin folder of the web application should be specifically checked for being loaded on application load. This is need in situations where plugins need to be loaded in the AppDomain after the application been reloaded.
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.WebAppTypeFinder.GetBinDirectory">
            <summary>
            Gets a physical disk path of \Bin directory
            </summary>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.WebAppTypeFinder.GetAssemblies">
            <summary>
            Get assemblies
            </summary>
            <returns>Result</returns>
        </member>
        <member name="T:VTQT.Core.Infrastructure.XBaseEngine">
            <summary>
            Represents Nop engine
            </summary>
        </member>
        <member name="P:VTQT.Core.Infrastructure.XBaseEngine._serviceProvider">
            <summary>
            Gets or sets service provider
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.GetServiceProvider">
            <summary>
            Get IServiceProvider
            </summary>
            <returns>IServiceProvider</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.RunStartupTasks(VTQT.Core.Infrastructure.ITypeFinder)">
            <summary>
            Run startup tasks
            </summary>
            <param name="typeFinder">Type finder</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.RegisterDependencies(Autofac.ContainerBuilder,VTQT.Core.Configuration.XBaseConfig)">
            <summary>
            Register dependencies
            </summary>
            <param name="containerBuilder">Container builder</param>
            <param name="config">Nop configuration parameters</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.AddAutoMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,VTQT.Core.Infrastructure.ITypeFinder)">
            <summary>
            Register and configure AutoMapper
            </summary>
            <param name="services">Collection of service descriptors</param>
            <param name="typeFinder">Type finder</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,VTQT.Core.Configuration.XBaseConfig)">
            <summary>
            Add and configure services
            </summary>
            <param name="services">Collection of service descriptors</param>
            <param name="configuration">Configuration of the application</param>
            <param name="config">Nop configuration parameters</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.ConfigureRequestPipeline(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configure HTTP request pipeline
            </summary>
            <param name="application">Builder for configuring an application's request pipeline</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.Resolve``1(System.String)">
            <summary>
            Resolve dependency
            </summary>
            <typeparam name="T">Type of resolved service</typeparam>
            <returns>Resolved service</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.Resolve(System.Type,System.String)">
            <summary>
            Resolve dependency
            </summary>
            <param name="type">Type of resolved service</param>
            <returns>Resolved service</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.ResolveAll``1">
            <summary>
            Resolve dependencies
            </summary>
            <typeparam name="T">Type of resolved services</typeparam>
            <returns>Collection of resolved services</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseEngine.ResolveUnregistered(System.Type)">
            <summary>
            Resolve unregistered service
            </summary>
            <param name="type">Type of service</param>
            <returns>Resolved service</returns>
        </member>
        <member name="P:VTQT.Core.Infrastructure.XBaseEngine.ServiceProvider">
            <summary>
            Service provider
            </summary>
        </member>
        <member name="T:VTQT.Core.Infrastructure.XBaseFileProvider">
            <summary>
            IO functions using the on-disk file system
            </summary>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Initializes a new instance of a NopFileProvider
            </summary>
            <param name="webHostEnvironment">Hosting environment</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.IsUncPath(System.String)">
            <summary>
            Determines if the string is a valid Universal Naming Convention (UNC)
            for a server and share path.
            </summary>
            <param name="path">The path to be tested.</param>
            <returns><see langword="true"/> if the path is a valid UNC path; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path
            </summary>
            <param name="paths">An array of parts of the path</param>
            <returns>The combined paths</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path unless they already exist
            </summary>
            <param name="path">The directory to create</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.CreateFile(System.String)">
            <summary>
            Creates or overwrites a file in the specified path
            </summary>
            <param name="path">The path and name of the file to create</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.DeleteDirectory(System.String)">
            <summary>
             Depth-first recursive delete, with handling for descendant directories open in Windows Explorer.
            </summary>
            <param name="path">Directory path</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.DeleteFile(System.String)">
            <summary>
            Deletes the specified file
            </summary>
            <param name="filePath">The name of the file to be deleted. Wildcard characters are not supported</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.DirectoryExists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk
            </summary>
            <param name="path">The path to test</param>
            <returns>
            true if path refers to an existing directory; false if the directory does not exist or an error occurs when
            trying to determine if the specified file exists
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.DirectoryMove(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location
            </summary>
            <param name="sourceDirName">The path of the file or directory to move</param>
            <param name="destDirName">
            The path to the new location for sourceDirName. If sourceDirName is a file, then destDirName
            must also be a file name
            </param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.EnumerateFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in
            a specified path, and optionally searches subdirectories.
            </summary>
            <param name="directoryPath">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An enumerable collection of the full names (including paths) for the files in
            the directory specified by path and that match the specified search pattern
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed
            </summary>
            <param name="sourceFileName">The file to copy</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists
            </summary>
            <param name="filePath">The file to check</param>
            <returns>
            True if the caller has the required permissions and path contains the name of an existing file; otherwise,
            false.
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.FileLength(System.String)">
            <summary>
            Gets the length of the file in bytes, or -1 for a directory or non-existing files
            </summary>
            <param name="path">File path</param>
            <returns>The length of the file</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.FileMove(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name
            </summary>
            <param name="sourceFileName">The name of the file to move. Can include a relative or absolute path</param>
            <param name="destFileName">The new path and name for the file</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetAbsolutePath(System.String[])">
            <summary>
            Returns the absolute path to the directory
            </summary>
            <param name="paths">An array of parts of the path</param>
            <returns>The absolute path to the directory</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetAccessControl(System.String)">
            <summary>
            Gets a System.Security.AccessControl.DirectorySecurity object that encapsulates the access control list (ACL) entries for a specified directory
            </summary>
            <param name="path">The path to a directory containing a System.Security.AccessControl.DirectorySecurity object that describes the file's access control list (ACL) information</param>
            <returns>An object that encapsulates the access control rules for the file described by the path parameter</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetCreationTime(System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information</param>
            <returns>
            A System.DateTime structure set to the creation date and time for the specified file or directory. This value
            is expressed in local time
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            Returns the names of the subdirectories (including their paths) that match the
            specified search pattern in the specified directory
            </summary>
            <param name="path">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of subdirectories in path. This
            parameter can contain a combination of valid literal and wildcard characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An array of the full names (including paths) of the subdirectories that match
            the specified criteria, or an empty array if no directories are found
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string
            </summary>
            <param name="path">The path of a file or directory</param>
            <returns>
            Directory information for path, or null if path denotes a root directory or is null. Returns
            System.String.Empty if path does not contain directory information
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetDirectoryNameOnly(System.String)">
            <summary>
            Returns the directory name only for the specified path string
            </summary>
            <param name="path">The path of directory</param>
            <returns>The directory name</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetFileExtension(System.String)">
            <summary>
            Returns the extension of the specified path string
            </summary>
            <param name="filePath">The path string from which to get the extension</param>
            <returns>The extension of the specified path (including the period ".")</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string
            </summary>
            <param name="path">The path string from which to obtain the file name and extension</param>
            <returns>The characters after the last directory character in path</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension
            </summary>
            <param name="filePath">The path of the file</param>
            <returns>The file name, minus the last period (.) and all characters following it</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns the names of files (including their paths) that match the specified search
            pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="directoryPath">The path to the directory to search</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters
            , but doesn't support regular expressions.
            </param>
            <param name="topDirectoryOnly">
            Specifies whether to search the current directory, or the current directory and all
            subdirectories
            </param>
            <returns>
            An array of the full names (including paths) for the files in the specified directory
            that match the specified search pattern, or an empty array if no files are found.
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information</param>
            <returns>A System.DateTime structure set to the date and time that the specified file</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information</param>
            <returns>
            A System.DateTime structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in local time
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last
            written to
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information</param>
            <returns>
            A System.DateTime structure set to the date and time that the specified file or directory was last written to.
            This value is expressed in UTC time
            </returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetParentDirectory(System.String)">
            <summary>
            Retrieves the parent directory of the specified path
            </summary>
            <param name="directoryPath">The path for which to retrieve the parent directory</param>
            <returns>The parent directory, or null if path is the root directory, including the root of a UNC server or share name</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetVirtualPath(System.String)">
            <summary>
            Gets a virtual path from a physical disk path.
            </summary>
            <param name="path">The physical disk path</param>
            <returns>The virtual path. E.g. "~/bin"</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.IsDirectory(System.String)">
            <summary>
            Checks if the path is directory
            </summary>
            <param name="path">Path for check</param>
            <returns>True, if the path is a directory, otherwise false</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical disk path.
            </summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.ReadAllBytes(System.String)">
            <summary>
            Reads the contents of the file into a byte array
            </summary>
            <param name="filePath">The file for reading</param>
            <returns>A byte array containing the contents of the file</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading</param>
            <param name="encoding">The encoding applied to the contents of the file</param>
            <returns>A string containing all lines of the file</returns>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to
            </summary>
            <param name="path">The file for which to set the date and time information</param>
            <param name="lastWriteTimeUtc">
            A System.DateTime containing the value to set for the last write date and time of path.
            This value is expressed in UTC time
            </param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Writes the specified byte array to the file
            </summary>
            <param name="filePath">The file to write to</param>
            <param name="bytes">The bytes to write to the file</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding,
            and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to</param>
            <param name="contents">The string to write to the file</param>
            <param name="encoding">The encoding to apply to the string</param>
        </member>
        <member name="M:VTQT.Core.Infrastructure.XBaseFileProvider.GetFileInfo(System.String)">
            <summary>Locate a file at the given path.</summary>
            <param name="subpath">Relative path that identifies the file.</param>
            <returns>The file information. Caller must check Exists property.</returns>
        </member>
        <member name="T:VTQT.Core.IPagedList`1">
            <summary>
            Paged list interface
            </summary>
        </member>
        <member name="P:VTQT.Core.IPagedList`1.PageIndex">
            <summary>
            Page index
            </summary>
        </member>
        <member name="P:VTQT.Core.IPagedList`1.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:VTQT.Core.IPagedList`1.TotalCount">
            <summary>
            Total count
            </summary>
        </member>
        <member name="P:VTQT.Core.IPagedList`1.TotalPages">
            <summary>
            Total pages
            </summary>
        </member>
        <member name="P:VTQT.Core.IPagedList`1.HasPreviousPage">
            <summary>
            Has previous page
            </summary>
        </member>
        <member name="P:VTQT.Core.IPagedList`1.HasNextPage">
            <summary>
            Has next age
            </summary>
        </member>
        <member name="T:VTQT.Core.IWebHelper">
            <summary>
            Represents a web helper
            </summary>
        </member>
        <member name="M:VTQT.Core.IWebHelper.GetUrlReferrer">
            <summary>
            Get URL referrer if exists
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.GetCurrentIpAddress">
            <summary>
            Get IP address from HTTP context
            </summary>
            <returns>String of IP address</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.GetThisPageUrl(System.Boolean,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets this page URL
            </summary>
            <param name="includeQueryString">Value indicating whether to include query strings</param>
            <param name="useSsl">Value indicating whether to get SSL secured page URL. Pass null to determine automatically</param>
            <param name="lowercaseUrl">Value indicating whether to lowercase URL</param>
            <returns>Page URL</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.IsCurrentConnectionSecured">
            <summary>
            Gets a value indicating whether current connection is secured
            </summary>
            <returns>True if it's secured, otherwise false</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.GetAppHost(System.Boolean)">
            <summary>
            Gets store host location
            </summary>
            <param name="useSsl">Whether to get SSL secured URL</param>
            <returns>Store host location</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.GetAppLocation(System.Nullable{System.Boolean})">
            <summary>
            Gets store location
            </summary>
            <param name="useSsl">Whether to get SSL secured URL; pass null to determine automatically</param>
            <returns>Store location</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.IsStaticResource">
            <summary>
            Returns true if the requested resource is one of the typical resources that needn't be processed by the CMS engine.
            </summary>
            <returns>True if the request targets a static resource file.</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.ModifyQueryString(System.String,System.String,System.String[])">
            <summary>
            Modify query string of the URL
            </summary>
            <param name="url">Url to modify</param>
            <param name="key">Query parameter key to add</param>
            <param name="values">Query parameter values to add</param>
            <returns>New URL with passed query parameter</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.RemoveQueryString(System.String,System.String,System.String)">
            <summary>
            Remove query parameter from the URL
            </summary>
            <param name="url">Url to modify</param>
            <param name="key">Query parameter key to remove</param>
            <param name="value">Query parameter value to remove; pass null to remove all query parameters with the specified key</param>
            <returns>New URL without passed query parameter</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.QueryString``1(System.String)">
            <summary>
            Gets query string value by name
            </summary>
            <typeparam name="T">Returned value type</typeparam>
            <param name="name">Query parameter name</param>
            <returns>Query string value</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.RestartAppDomain">
            <summary>
            Restart application domain
            </summary>
        </member>
        <member name="P:VTQT.Core.IWebHelper.IsRequestBeingRedirected">
            <summary>
            Gets a value that indicates whether the client is being redirected to a new location
            </summary>
        </member>
        <member name="P:VTQT.Core.IWebHelper.IsPostBeingDone">
            <summary>
            Gets or sets a value that indicates whether the client is being redirected to a new location using POST
            </summary>
        </member>
        <member name="M:VTQT.Core.IWebHelper.GetCurrentRequestProtocol">
            <summary>
            Gets current HTTP request protocol
            </summary>
        </member>
        <member name="M:VTQT.Core.IWebHelper.IsLocalRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets whether the specified HTTP request URI references the local host.
            </summary>
            <param name="req">HTTP request</param>
            <returns>True, if HTTP request URI references to the local host</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.GetRawUrl(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Get the raw path and full query of request
            </summary>
            <param name="request">HTTP request</param>
            <returns>Raw URL</returns>
        </member>
        <member name="M:VTQT.Core.IWebHelper.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets whether the request is made with AJAX 
            </summary>
            <param name="request">HTTP request</param>
            <returns>Result</returns>
        </member>
        <member name="T:VTQT.Core.IWorkContext">
            <summary>
            Represents work context
            </summary>
        </member>
        <member name="M:VTQT.Core.Localization.LocalizationHelper.EnumerateParentCultures(System.String)">
            <summary>
            Enumerates all parent cultures, excluding the top-most invariant culture
            </summary>
            <param name="locale">The ISO culture code, e.g. de-DE, en-US or just en</param>
            <returns>Parent cultures</returns>
        </member>
        <member name="M:VTQT.Core.Localization.LocalizationHelper.EnumerateParentCultures(System.Globalization.CultureInfo)">
            <summary>
            Enumerates all parent cultures, excluding the top-most invariant culture
            </summary>
            <param name="culture">The culture info to enumerate parents for</param>
            <returns>Parent cultures</returns>
        </member>
        <member name="T:VTQT.Core.Localization.LocalizedString">
            <summary>
            Localized string
            </summary>
        </member>
        <member name="P:VTQT.Core.Localization.LocalizedString.JsText">
            <summary>
            Returns a js encoded string which already contains delimiters.
            </summary>
        </member>
        <member name="M:VTQT.Core.Logging.ILogger.IsEnabledFor(VTQT.Core.Domain.LogLevel)">
            <summary>
            Checks if this logger is enabled for a given <see cref="T:VTQT.Core.Domain.LogLevel"/> passed as parameter. 
            </summary>
            <param name="level">true if this logger is enabled for level, otherwise false</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.Logging.ILogger.Log(VTQT.Core.Domain.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Generates a logging event for the specified level using the message and exception
            </summary>
            <param name="level">The level of the message to be logged</param>
            <param name="exception">The exception to log, including its stack trace. Pass null to not log an exception</param>
            <param name="message">The message object to log</param>
            <param name="args">An Object array containing zero or more objects to format. Can be null.</param>
        </member>
        <member name="T:VTQT.Core.MimeTypes">
            <summary>
            Collection of MimeType Constants for using to avoid Typos
            If needed MimeTypes missing feel free to add
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationForceDownload">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationJson">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationManifestJson">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationOctetStream">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationPdf">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationRssXml">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationXml">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationXWwwFormUrlencoded">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ApplicationXZipCo">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ImageBmp">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ImageGif">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ImageJpeg">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ImagePJpeg">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ImagePng">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ImageTiff">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.ImageWebp">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.TextCss">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.TextCsv">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.TextJavascript">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.TextPlain">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:VTQT.Core.MimeTypes.TextXlsx">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:VTQT.Core.PagedList`1">
            <summary>
            Paged list
            </summary>
            <typeparam name="T">T</typeparam>
        </member>
        <member name="M:VTQT.Core.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="source">source</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="getOnlyTotalCount">A value in indicating whether you want to load only total number of records. Set to "true" if you don't want to load data from database</param>
        </member>
        <member name="M:VTQT.Core.PagedList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="source">source</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
        </member>
        <member name="M:VTQT.Core.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="source">source</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="totalCount">Total count</param>
        </member>
        <member name="P:VTQT.Core.PagedList`1.PageIndex">
            <summary>
            Page index
            </summary>
        </member>
        <member name="P:VTQT.Core.PagedList`1.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:VTQT.Core.PagedList`1.TotalCount">
            <summary>
            Total count
            </summary>
        </member>
        <member name="P:VTQT.Core.PagedList`1.TotalPages">
            <summary>
            Total pages
            </summary>
        </member>
        <member name="P:VTQT.Core.PagedList`1.HasPreviousPage">
            <summary>
            Has previous page
            </summary>
        </member>
        <member name="P:VTQT.Core.PagedList`1.HasNextPage">
            <summary>
            Has next page
            </summary>
        </member>
        <member name="T:VTQT.Core.Security.DataProtectionDefaults">
            <summary>
            Represents default values related to data protection
            </summary>
        </member>
        <member name="P:VTQT.Core.Security.DataProtectionDefaults.RedisDataProtectionKey">
            <summary>
            Gets the key used to store the protection key list to Redis (used with the PersistDataProtectionKeysToRedis option enabled)
            </summary>
        </member>
        <member name="T:VTQT.Core.TypeConverterRegistrationStartUpTask">
            <summary>
            Startup task for the registration custom type converters
            </summary>
        </member>
        <member name="M:VTQT.Core.TypeConverterRegistrationStartUpTask.Execute">
            <summary>
            Executes a task
            </summary>
        </member>
        <member name="P:VTQT.Core.TypeConverterRegistrationStartUpTask.Order">
            <summary>
            Gets order of this startup task implementation
            </summary>
        </member>
        <member name="T:VTQT.Core.Utilities.Cloning.CloningByExpressionTreesExtensions">
            <summary>
            Superfast deep copier class, which uses Expression trees.
            </summary>
        </member>
        <member name="M:VTQT.Core.Utilities.Cloning.CloningByExpressionTreesExtensions.DeepCopyByExpressionTree``1(``0,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates a deep copy of an object.
            </summary>
            <typeparam name="T">Object type.</typeparam>
            <param name="original">Object to copy.</param>
            <param name="copiedReferencesDict">Dictionary of already copied objects (Keys: original objects, Values: their copies).</param>
            <returns></returns>
        </member>
        <member name="M:VTQT.Core.Utilities.Cloning.CloningBySerializationExtensions.CloneJson``1(``0)">
            <summary>
            Perform a deep Copy of the object, using Json as a serialisation method.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:VTQT.Core.WebHelper">
            <summary>
            Represents a web helper
            </summary>
        </member>
        <member name="M:VTQT.Core.WebHelper.IsRequestAvailable">
            <summary>
            Check whether current HTTP request is available
            </summary>
            <returns>True if available; otherwise false</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.IsIpAddressSet(System.Net.IPAddress)">
            <summary>
            Is IP address specified
            </summary>
            <param name="address">IP address</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.GetUrlReferrer">
            <summary>
            Get URL referrer if exists
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.GetCurrentIpAddress">
            <summary>
            Get IP address from HTTP context
            </summary>
            <returns>String of IP address</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.GetThisPageUrl(System.Boolean,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets this page URL
            </summary>
            <param name="includeQueryString">Value indicating whether to include query strings</param>
            <param name="useSsl">Value indicating whether to get SSL secured page URL. Pass null to determine automatically</param>
            <param name="lowercaseUrl">Value indicating whether to lowercase URL</param>
            <returns>Page URL</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.IsCurrentConnectionSecured">
            <summary>
            Gets a value indicating whether current connection is secured
            </summary>
            <returns>True if it's secured, otherwise false</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.GetAppHost(System.Boolean)">
            <summary>
            Gets app host location
            </summary>
            <param name="useSsl">Whether to get SSL secured URL</param>
            <returns>Store host location</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.GetAppLocation(System.Nullable{System.Boolean})">
            <summary>
            Gets app location
            </summary>
            <param name="useSsl">Whether to get SSL secured URL; pass null to determine automatically</param>
            <returns>Store location</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.IsStaticResource">
            <summary>
            Returns true if the requested resource is one of the typical resources that needn't be processed by the cms engine.
            </summary>
            <returns>True if the request targets a static resource file.</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.ModifyQueryString(System.String,System.String,System.String[])">
            <summary>
            Modify query string of the URL
            </summary>
            <param name="url">Url to modify</param>
            <param name="key">Query parameter key to add</param>
            <param name="values">Query parameter values to add</param>
            <returns>New URL with passed query parameter</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.RemoveQueryString(System.String,System.String,System.String)">
            <summary>
            Remove query parameter from the URL
            </summary>
            <param name="url">Url to modify</param>
            <param name="key">Query parameter key to remove</param>
            <param name="value">Query parameter value to remove; pass null to remove all query parameters with the specified key</param>
            <returns>New URL without passed query parameter</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.QueryString``1(System.String)">
            <summary>
            Gets query string value by name
            </summary>
            <typeparam name="T">Returned value type</typeparam>
            <param name="name">Query parameter name</param>
            <returns>Query string value</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.RestartAppDomain">
            <summary>
            Restart application domain
            </summary>
        </member>
        <member name="P:VTQT.Core.WebHelper.IsRequestBeingRedirected">
            <summary>
            Gets a value that indicates whether the client is being redirected to a new location
            </summary>
        </member>
        <member name="P:VTQT.Core.WebHelper.IsPostBeingDone">
            <summary>
            Gets or sets a value that indicates whether the client is being redirected to a new location using POST
            </summary>
        </member>
        <member name="M:VTQT.Core.WebHelper.GetCurrentRequestProtocol">
            <summary>
            Gets current HTTP request protocol
            </summary>
        </member>
        <member name="M:VTQT.Core.WebHelper.IsLocalRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets whether the specified HTTP request URI references the local host.
            </summary>
            <param name="req">HTTP request</param>
            <returns>True, if HTTP request URI references to the local host</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.GetRawUrl(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Get the raw path and full query of request
            </summary>
            <param name="request">HTTP request</param>
            <returns>Raw URL</returns>
        </member>
        <member name="M:VTQT.Core.WebHelper.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets whether the request is made with AJAX 
            </summary>
            <param name="request">HTTP request</param>
            <returns>Result</returns>
        </member>
        <member name="T:VTQT.Core.XBaseException">
            <summary>
            Represents errors that occur during application execution
            </summary>
        </member>
        <member name="M:VTQT.Core.XBaseException.#ctor">
            <summary>
            Initializes a new instance of the Exception class.
            </summary>
        </member>
        <member name="M:VTQT.Core.XBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:VTQT.Core.XBaseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="M:VTQT.Core.XBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:VTQT.Core.XBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:VTQT.Caching.CachingDefaults">
            <summary>
            Represents default values related to caching
            </summary>
        </member>
        <member name="P:VTQT.Caching.CachingDefaults.CacheTime">
            <summary>
            Gets the default cache time in minutes
            </summary>
        </member>
        <member name="P:VTQT.Caching.CachingDefaults.ShortTermCacheTime">
            <summary>
            Gets or sets the short term cache time in minutes
            </summary>
        </member>
        <member name="P:VTQT.Caching.CachingDefaults.BundledFilesCacheTime">
            <summary>
            Gets or sets the bundled files cache time in minutes
            </summary>
        </member>
        <member name="P:VTQT.Caching.CachingDefaults.EntityByIdCacheKey">
            <summary>
            Gets a key for caching
            </summary>
            <remarks>
            {0} : Entity type name
            {1} : Entity id
            </remarks>
        </member>
        <member name="P:VTQT.Caching.CachingDefaults.EntityPrefix">
            <summary>
            Gets a key pattern to clear cache
            </summary>
            <remarks>
            {0} : Entity type name
            </remarks>
        </member>
        <member name="T:VTQT.Caching.CachingSettings">
            <summary>
            Caching settings
            </summary>
        </member>
        <member name="P:VTQT.Caching.CachingSettings.DefaultCacheTime">
            <summary>
            Gets or sets the default cache time in minutes
            </summary>
        </member>
        <member name="P:VTQT.Caching.CachingSettings.ShortTermCacheTime">
            <summary>
            Gets or sets the short term cache time in minutes
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastActivator.Constructor">
            <summary>
            Gets the backing <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastActivator.ParameterTypes">
            <summary>
            Gets the parameter types from the backing <see cref="T:System.Reflection.ConstructorInfo"/>
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastActivator.Invoker">
            <summary>
            Gets the constructor invoker.
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.FastActivator.Activate(System.Object[])">
            <summary>
            Creates an instance of the type using the specified parameters.
            </summary>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastActivator.MakeFastInvoker(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a single fast constructor invoker. The result is not cached.
            </summary>
            <param name="constructorInfo">constructorInfo to create invoker for.</param>
            <returns>a fast invoker.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastActivator.GetActivators(System.Type)">
            <summary>
            Creates and caches fast constructor invokers 
            </summary>
            <param name="type">The type to extract fast constructor invokers for</param>
            <returns>A cached array of all public instance constructors from the given type.</returns>
            <remarks>The parameterless default constructor is always excluded from the list of activators</remarks>
        </member>
        <member name="M:VTQT.ComponentModel.FastActivator.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="args">
            An array of arguments that match in number, order, and type the parameters of the constructor to invoke. 
            If args is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. 
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastActivator.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="args">
            An array of arguments that match in number, order, and type the parameters of the constructor to invoke. 
            If args is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. 
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="P:VTQT.ComponentModel.FastInvoker.Method">
            <summary>
            Gets the backing <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastInvoker.ParameterTypes">
            <summary>
            Gets the parameter types from the backing <see cref="T:System.Reflection.MethodInfo"/>
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastInvoker.Invoker">
            <summary>
            Gets the method invoker.
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.FastInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the method using the specified parameters.
            </summary>
            <returns>The method invocation result.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastInvoker.MakeFastInvoker(System.Reflection.MethodInfo)">
            <summary>
            Creates a single fast method invoker. The result is not cached.
            </summary>
            <param name="method">Method to create invoker for.</param>
            <returns>The fast method invoker delegate.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastInvoker.Invoke(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes a method using the specified object and parameter instances.
            </summary>
            <param name="obj">The objectinstance</param>
            <param name="methodName">Method name</param>
            <param name="parameterTypes">Argument types of the matching method overload (in exact order)</param>
            <param name="parameters">Parameter instances to pass to invocation</param>
            <returns>The method invocation result.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastInvoker.GetInvoker``1(System.String,System.Type[])">
            <summary>
            Creates and caches a fast method invoker.
            </summary>
            <param name="methodName">Name of method to create an invoker for.</param>
            <param name="argTypes">Argument types of method to create an invoker for.</param>
            <returns>The fast method invoker.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastInvoker.GetInvoker(System.Type,System.String,System.Type[])">
            <summary>
            Creates and caches a fast method invoker.
            </summary>
            <param name="type">The type to extract fast method invoker for.</param>
            <param name="methodName">Name of method to create an invoker for.</param>
            <param name="argTypes">Argument types of method to create an invoker for.</param>
            <returns>The fast method invoker.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastInvoker.GetInvoker(System.Reflection.MethodInfo)">
            <summary>
            Creates and caches a fast method invoker.
            </summary>
            <param name="method">Method info instance to create an invoker for.</param>
            <returns>The fast method invoker.</returns>
        </member>
        <member name="F:VTQT.ComponentModel.PropertyCachingStrategy.Uncached">
            <summary>
            Don't cache FastProperty instances
            </summary>
        </member>
        <member name="F:VTQT.ComponentModel.PropertyCachingStrategy.Cached">
            <summary>
            Always cache FastProperty instances
            </summary>
        </member>
        <member name="F:VTQT.ComponentModel.PropertyCachingStrategy.EagerCached">
            <summary>
            Always cache FastProperty instances. PLUS cache all other properties of the declaring type.
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.FastProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a <see cref="T:VTQT.ComponentModel.FastProperty"/>.
            This constructor does not cache the helper. For caching, use <see cref="!:GetProperties(object, PropertyCachingStrategy)"/>.
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastProperty.ValueGetter">
            <summary>
            Gets the property value getter.
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastProperty.ValueSetter">
            <summary>
            Gets the property value setter.
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastProperty.Property">
            <summary>
            Gets the backing <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="P:VTQT.ComponentModel.FastProperty.Name">
            <summary>
            Gets (or sets in derived types) the property name.
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.FastProperty.GetValue(System.Object)">
            <summary>
            Returns the property value for the specified <paramref name="instance"/>.
            </summary>
            <param name="instance">The object whose property value will be returned.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastProperty.SetValue(System.Object,System.Object)">
            <summary>
            Sets the property value for the specified <paramref name="instance" />.
            </summary>
            <param name="instance">The object whose property value will be set.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:VTQT.ComponentModel.FastProperty.ObjectToDictionary(System.Object,System.Func{System.String,System.String},System.Boolean)">
             <summary>
             Given an object, adds each instance property with a public get method as a key and its
             associated value to a dictionary.
            
             If the object is already an <see>
                     <cref>IDictionary{string, object}</cref>
                 </see>
                 instance, then a copy
             is returned.
             </summary>
             <param name="keySelector">Key selector</param>
             <param name="deep">When true, converts all nested objects to dictionaries also</param>
             <remarks>
             The implementation of FastProperty will cache the property accessors per-type. This is
             faster when the the same type is used multiple times with ObjectToDictionary.
             </remarks>
        </member>
        <member name="M:VTQT.ComponentModel.FastProperty.GetVisibleProperties(System.Type,VTQT.ComponentModel.PropertyCachingStrategy)">
            <summary>
            <para>
            Creates and caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:VTQT.ComponentModel.FastProperty.GetVisibleProperties(System.Type,VTQT.ComponentModel.PropertyCachingStrategy)"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="type">The type to extract property accessors for.</param>
            <returns>
            A cached array of all public property getters from the type.
            </returns>
        </member>
        <member name="M:VTQT.ComponentModel.FastProperty.GetProperties(System.Type,VTQT.ComponentModel.PropertyCachingStrategy)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            specified type.
            </summary>
            <param name="type">The type to extract property accessors for.</param>
            <returns>A cached array of all public property getters from the type of target instance.
            </returns>
        </member>
        <member name="M:VTQT.ComponentModel.DelegatedAccessor.MakeNullSafeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter which is safe for a null input object. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>A fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="T:VTQT.ComponentModel.GenericDictionaryTypeConverter`2">
            <summary>
            Generic Dictionary type converted
            </summary>
            <typeparam name="K">Key type (simple)</typeparam>
            <typeparam name="V">Value type (simple)</typeparam>
        </member>
        <member name="F:VTQT.ComponentModel.GenericDictionaryTypeConverter`2.typeConverterKey">
            <summary>
            Type converter
            </summary>
        </member>
        <member name="F:VTQT.ComponentModel.GenericDictionaryTypeConverter`2.typeConverterValue">
            <summary>
            Type converter
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.GenericDictionaryTypeConverter`2.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can        
            convert an object in the given source type to the native type of the converter
            using the context.
            </summary>
            <param name="context">Context</param>
            <param name="sourceType">Source type</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.ComponentModel.GenericDictionaryTypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the converter's native type.
            </summary>
            <param name="context">Context</param>
            <param name="culture">Culture</param>
            <param name="value">Value</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.ComponentModel.GenericDictionaryTypeConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified destination type using the specified context and arguments
            </summary>
            <param name="context">Context</param>
            <param name="culture">Culture</param>
            <param name="value">Value</param>
            <param name="destinationType">Destination type</param>
            <returns>Result</returns>
        </member>
        <member name="T:VTQT.ComponentModel.GenericListTypeConverter`1">
            <summary>
            Generic List type converted
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="F:VTQT.ComponentModel.GenericListTypeConverter`1.typeConverter">
            <summary>
            Type converter
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.GenericListTypeConverter`1.GetStringArray(System.String)">
            <summary>
            Get string array from a comma-separate string
            </summary>
            <param name="input">Input</param>
            <returns>Array</returns>
        </member>
        <member name="M:VTQT.ComponentModel.GenericListTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can        
            convert an object in the given source type to the native type of the converter
            using the context.
            </summary>
            <param name="context">Context</param>
            <param name="sourceType">Source type</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.ComponentModel.GenericListTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the converter's native type.
            </summary>
            <param name="context">Context</param>
            <param name="culture">Culture</param>
            <param name="value">Value</param>
            <returns>Result</returns>
        </member>
        <member name="M:VTQT.ComponentModel.GenericListTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified destination type using the specified context and arguments
            </summary>
            <param name="context">Context</param>
            <param name="culture">Culture</param>
            <param name="value">Value</param>
            <param name="destinationType">Destination type</param>
            <returns>Result</returns>
        </member>
        <member name="T:VTQT.ComponentModel.HybridExpando">
            <summary>
            Class that provides extensible properties and methods to an
            existing object when cast to dynamic. This
            dynamic object stores 'extra' properties in a dictionary or
            checks the actual properties of the instance passed via 
            constructor.
            
            This class can be subclassed to extend an existing type or 
            you can pass in an instance to extend. Properties (both
            dynamic and strongly typed) can be accessed through an 
            indexer.
            
            This type allows you three ways to access its properties:
            
            Directly: any explicitly declared properties are accessible
            Dynamic: dynamic cast allows access to dictionary and native properties/methods
            Dictionary: Any of the extended properties are accessible via IDictionary interface
            </summary>
        </member>
        <member name="F:VTQT.ComponentModel.HybridExpando._instance">
            <summary>
            Instance of object passed in
            </summary>
        </member>
        <member name="F:VTQT.ComponentModel.HybridExpando._instanceType">
            <summary>
            Cached type of the instance
            </summary>
        </member>
        <member name="F:VTQT.ComponentModel.HybridExpando._instanceProps">
            <summary>
            Adjusted property list for the wrapped instance type after white/black-list members has been applied.
            </summary>
        </member>
        <member name="F:VTQT.ComponentModel.HybridExpando.Properties">
            <summary>
            String Dictionary that contains the extra dynamic values
            stored on this object/instance
            </summary>        
            <remarks>Using PropertyBag to support XML Serialization of the dictionary</remarks>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.#ctor(System.Boolean)">
            <summary>
            This constructor just works off the internal dictionary and any 
            public properties of this object.
            
            Note you can subclass HybridExpando.
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.#ctor(System.Object,System.Boolean)">
            <summary>
            Allows passing in an existing instance variable to 'extend'.        
            </summary>
            <remarks>
            You can pass in null here if you don't want to 
            check native properties and only check the Dictionary!
            </remarks>
            <param name="instance"></param>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.#ctor(System.Object,System.Collections.Generic.IEnumerable{System.String},VTQT.ComponentModel.MemberOptMethod,System.Boolean)">
            <summary>
            Allows passing in an existing instance variable to 'extend'
            along with a list of member names to allow or disallow.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Try to retrieve a member by name first from instance properties
            followed by the collection entries.
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Property setter implementation tries to retrieve value from instance 
            first then into this object
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.Override(System.String,System.Object)">
            <summary>
            Dynamic invocation method. Currently allows only for Reflection based
            operation (no ability to add methods dynamically).
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VTQT.ComponentModel.HybridExpando.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" -->
        <member name="M:VTQT.ComponentModel.HybridExpando.GetProperty(System.Object,System.String,System.Object@)">
            <summary>
            Reflection Helper method to retrieve a property
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Reflection helper method to set a property value
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.InvokeMethod(System.Object,System.String,System.Object[],System.Object@)">
            <summary>
            Reflection helper method to invoke a method
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:VTQT.ComponentModel.HybridExpando.Item(System.String)">
            <summary>
            Convenience method that provides a string Indexer 
            to the Properties collection AND the strongly typed
            properties of the object by name.
            
            // dynamic
            exp["Address"] = "112 nowhere lane"; 
            // strong
            var name = exp["StronglyTypedProperty"] as string; 
            </summary>
            <remarks>
            The getter checks the Properties dictionary first
            then looks in PropertyInfo for properties.
            The setter checks the instance properties before
            checking the Properties dictionary.
            </remarks>
            <param name="key"></param>
            
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.GetProperties(System.Boolean)">
            <summary>
            Returns all properties 
            </summary>
            <param name="includeInstanceProperties"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)">
            <summary>
            Checks whether a property exists in the Property collection
            or as a property on the instance
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.HybridExpando.Contains(System.String,System.Boolean)">
            <summary>
            Checks whether a property exists in the Property collection
            or as a property on the instance
            </summary>
            <param name="propertyName"></param>
            <param name="includeInstanceProperties"></param>
            <returns></returns>
        </member>
        <member name="T:VTQT.ComponentModel.PropertyBag">
            <summary>
            Creates a serializable string/object dictionary that is XML serializable
            Encodes keys as element names and values as simple values with a type
            attribute that contains an XML type name. Complex names encode the type 
            name with type='___namespace.classname' format followed by a standard xml
            serialized format. The latter serialization can be slow so it's not recommended
            to pass complex types if performance is critical.
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag.CreateFromXml(System.String)">
            <summary>
            Creates an instance of a propertybag from an Xml string
            </summary>
            <param name="xml">Serialize</param>
            <returns></returns>
        </member>
        <member name="T:VTQT.ComponentModel.PropertyBag`1">
            <summary>
            Creates a serializable string for generic types that is XML serializable.
            
            Encodes keys as element names and values as simple values with a type
            attribute that contains an XML type name. Complex names encode the type 
            name with type='___namespace.classname' format followed by a standard xml
            serialized format. The latter serialization can be slow so it's not recommended
            to pass complex types if performance is critical.
            </summary>
            <typeparam name="TValue">Must be a reference type. For value types use type object</typeparam>
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag`1.TypeUtils.GetTypeFromName(System.String)">
            <summary>
            Helper routine that looks up a type name and tries to retrieve the
            full type reference in the actively executing assemblies.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag`1.TypeUtils.MapTypeToXmlType(System.Type)">
            <summary>
            Converts a .NET type into an XML compatible type - roughly
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag`1.GetSchema">
            <summary>
            Not implemented - this means no schema information is passed
            so this won't work with ASMX/WCF services.
            </summary>
            <returns></returns>       
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the dictionary to XML. Keys are 
            serialized to element names and values as 
            element values. An xml type attribute is embedded
            for each serialized element - a .NET type
            element is embedded for each complex type and
            prefixed with three underscores.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the custom serialized format
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag`1.ToXml">
            <summary>
            Serializes this dictionary to an XML string
            </summary>
            <returns>XML String or Null if it fails</returns>
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag`1.FromXml(System.String)">
            <summary>
            Deserializes from an XML string
            </summary>
            <param name="xml"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:VTQT.ComponentModel.PropertyBag`1.CreateFromXml(System.String)">
            <summary>
            Creates an instance of a propertybag from an Xml string
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:VTQT.ComponentModel.ReaderWriteLockDisposable">
            <summary>
            Provides a convenience methodology for implementing locked access to resources. 
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:VTQT.ComponentModel.ReaderWriteLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim,VTQT.ComponentModel.ReaderWriteLockType)">
            <summary>
            Initializes a new instance of the <see cref="T:VTQT.ComponentModel.ReaderWriteLockDisposable"/> class.
            </summary>
            <param name="rwLock">The readers–writer lock</param>
            <param name="readerWriteLockType">Lock type</param>
        </member>
        <member name="T:VTQT.ComponentModel.ReaderWriteLockType">
            <summary>
            Reader/Write locker type
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.SerializeObject(System.Object,System.String,System.Boolean)">
            <summary>
            Serializes an object instance to a file.
            </summary>
            <param name="instance">the object instance to serialize</param>
            <param name="fileName"></param>
            <param name="binarySerialization">determines whether XML serialization or binary serialization is used</param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.SerializeObject(System.Object,System.Xml.XmlTextWriter,System.Boolean)">
            <summary>
            Overload that supports passing in an XML TextWriter. 
            </summary>
            <remarks>
            Note the Writer is not closed when serialization is complete 
            so the caller needs to handle closing.
            </remarks>
            <param name="instance">object to serialize</param>
            <param name="writer">XmlTextWriter instance to write output to</param>       
            <param name="throwExceptions">Determines whether false is returned on failure or an exception is thrown</param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.SerializeObject(System.Object,System.String@)">
            <summary>
            Serializes an object into an XML string variable for easy 'manual' serialization
            </summary>
            <param name="instance">object to serialize</param>
            <param name="xmlResultString">resulting XML string passed as an out parameter</param>
            <returns>true or false</returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.SerializeObject(System.Object,System.String@,System.Boolean)">
            <summary>
            Serializes an object into a string variable for easy 'manual' serialization
            </summary>
            <param name="instance"></param>
            <param name="xmlResultString">Out parm that holds resulting XML string</param>
            <param name="throwExceptions">If true causes exceptions rather than returning false</param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.SerializeObject(System.Object,System.Byte[]@,System.Boolean)">
            <summary>
            Serializes an object instance to a file.
            </summary>
            <param name="instance">the object instance to serialize</param>
            <param name="resultBuffer"></param>
            <param name="throwExceptions"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.SerializeObjectToString(System.Object,System.Boolean)">
            <summary>
            Serializes an object to an XML string. Unlike the other SerializeObject overloads
            this methods *returns a string* rather than a bool result!
            </summary>
            <param name="instance"></param>
            <param name="throwExceptions">Determines if a failure throws or returns null</param>
            <returns>
            null on error otherwise the Xml String.         
            </returns>
            <remarks>
            If null is passed in null is also returned so you might want
            to check for null before calling this method.
            </remarks>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.DeSerializeObject(System.String,System.Type,System.Boolean)">
            <summary>
            Deserializes an object from file and returns a reference.
            </summary>
            <param name="fileName">name of the file to serialize to</param>
            <param name="objectType">The Type of the object. Use typeof(yourobject class)</param>
            <param name="binarySerialization">determines whether we use Xml or Binary serialization</param>
            <returns>Instance of the deserialized object or null. Must be cast to your object type</returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.DeSerializeObject(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Deserializes an object from file and returns a reference.
            </summary>
            <param name="fileName">name of the file to serialize to</param>
            <param name="objectType">The Type of the object. Use typeof(yourobject class)</param>
            <param name="binarySerialization">determines whether we use Xml or Binary serialization</param>
            <param name="throwExceptions">determines whether failure will throw rather than return null on failure</param>
            <returns>Instance of the deserialized object or null. Must be cast to your object type</returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.DeSerializeObject(System.Xml.XmlReader,System.Type)">
            <summary>
            Deserialize an object from an XmlReader object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.DeSerializeObject(System.Byte[],System.Type,System.Boolean)">
            <summary>
            Deseializes a binary serialized object from  a byte array
            </summary>
            <param name="buffer"></param>
            <param name="objectType"></param>
            <param name="throwExceptions"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.ComponentModel.SerializationUtils.ObjectToString(System.Object,System.String,VTQT.ComponentModel.ObjectToStringTypes)">
            <summary>
            Returns a string of all the field value pairs of a given object.
            Works only on non-statics.
            </summary>
            <param name="instance"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:VTQT.ComponentModel.ITypeConverter">
            <summary>
            Converts objects.
            </summary>
        </member>
        <member name="M:VTQT.ComponentModel.ITypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="type">A Type that represents the type you want to convert from. </param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.ITypeConverter.CanConvertTo(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="type">A Type that represents the type you want to convert to. </param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.ITypeConverter.ConvertFrom(System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. If null is passed, the invariant culture is assumed.</param>
            <param name="value">The object to convert.</param>
            <returns>An object that represents the converted value.</returns>
        </member>
        <member name="M:VTQT.ComponentModel.ITypeConverter.ConvertTo(System.Globalization.CultureInfo,System.String,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. If null is passed, the invariant culture is assumed.</param>
            <param name="format">A standard or custom format expression.</param>
            <param name="value">The object to convert.</param>
            <param name="to">The type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:VTQT.ConversionExtensions.ToDateTimeIso8601(System.String)">
            <summary>
            Parse ISO-8601 UTC timestamp including milliseconds.
            </summary>
            <remarks>
            Dublicate can be found in HmacAuthentication class.
            </remarks>
        </member>
        <member name="M:VTQT.ConversionExtensions.ToObject(System.Byte[])">
            <summary>
            Converts a byte array into an object.
            </summary>
            <param name="bytes">Object to deserialize. May be null.</param>
            <returns>Deserialized object, or null if input was null.</returns>
        </member>
        <member name="M:VTQT.ConversionExtensions.Hash(System.Byte[],System.Boolean)">
            <summary>
            Computes the MD5 hash of a byte array
            </summary>
            <param name="value">The byte array to compute the hash for</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:VTQT.ConversionExtensions.Zip(System.Byte[])">
            <summary>
            Compresses the input buffer with <see cref="T:System.IO.Compression.GZipStream"/>
            </summary>
            <param name="buffer">Decompressed input</param>
            <returns>The compressed result</returns>
        </member>
        <member name="M:VTQT.ConversionExtensions.UnZip(System.Byte[])">
            <summary>
            Decompresses the input buffer with <see cref="T:System.IO.Compression.GZipStream"/> decompression
            </summary>
            <param name="buffer">Compressed input</param>
            <returns>The decompressed result</returns>
        </member>
        <member name="M:VTQT.DateTimeExtensions.ToUniversalTime(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable date/time value to UTC.
            </summary>
            <param name="value">The nullable date/time</param>
            <returns>The nullable date/time in UTC</returns>
        </member>
        <member name="M:VTQT.DateTimeExtensions.ToLocalTime(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable UTC date/time value to local time.
            </summary>
            <param name="value">The nullable UTC date/time</param>
            <returns>The nullable UTC date/time as local time</returns>
        </member>
        <member name="M:VTQT.DateTimeExtensions.GetEvenHourDate(System.Nullable{System.DateTime})">
            <summary>
            Returns a date that is rounded to the next even hour above the given
            date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 09:00:00. If the date's time is in the 23rd hour, the
            date's 'day' will be promoted, and the time will be set to 00:00:00.
            </p>
            </summary>
            <param name="value">the Date to round, if <see langword="null" /> the current time will
            be used</param>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:VTQT.DateTimeExtensions.GetEvenMinuteDate(System.Nullable{System.DateTime})">
            <summary>
            Returns a date that is rounded to the next even minute above the given
            date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:14:00. If the date's time is in the 59th minute,
            then the hour (and possibly the day) will be promoted.
            </p>
            </summary>
            <param name="value">The Date to round, if <see langword="null" /> the current time will  be used</param>
            <returns>The new rounded date</returns>
        </member>
        <member name="M:VTQT.DateTimeExtensions.GetEvenMinuteDateBefore(System.Nullable{System.DateTime})">
            <summary>
            Returns a date that is rounded to the previous even minute below the
            given date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:13:00.
            </p>
            </summary>
            <param name="value">the Date to round, if <see langword="null" /> the current time will
            be used</param>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:VTQT.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Get the first day of the month for
            any full date submitted
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Get the last day of the month for any
            full date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.DateTimeExtensions.ToUnixTime(System.DateTime)">
            <summary>
            Epoch time. Number of seconds since midnight (UTC) on 1st January 1970.
            </summary>
        </member>
        <member name="M:VTQT.DateTimeExtensions.FromUnixTime(System.Int64)">
            <summary>
            UTC date based on number of seconds since midnight (UTC) on 1st January 1970.
            </summary>
        </member>
        <member name="M:VTQT.DateTimeExtensions.ToNativeString(System.DateTime)">
            <summary>
            Converts a DateTime to a string with native digits
            </summary>
        </member>
        <member name="M:VTQT.DateTimeExtensions.ToNativeString(System.DateTime,System.IFormatProvider)">
            <summary>
            Converts a DateTime to a string with native digits
            </summary>
        </member>
        <member name="M:VTQT.DateTimeExtensions.ToNativeString(System.DateTime,System.String)">
            <summary>
            Converts a DateTime to a string with native digits
            </summary>
        </member>
        <member name="M:VTQT.DateTimeExtensions.ToNativeString(System.DateTime,System.String,System.IFormatProvider)">
            <summary>
            Converts a DateTime to a string with native digits
            </summary>
        </member>
        <member name="M:VTQT.CollectionSlicer.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Slices the iteration over an enumerable by the given slice sizes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source sequence to slice</param>
            <param name="sizes">
            Slice sizes. At least one size is required. Multiple sizes result in differently sized slices,
            whereat the last size is used for the "rest" (if any)
            </param>
            <returns>The sliced enumerable</returns>
        </member>
        <member name="M:VTQT.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each item while iterating through a list. 
            This is a handy shortcut for <c>foreach(item in list) { ... }</c>
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="source">The list, which holds the objects.</param>
            <param name="action">The action delegate which is called on each item while iterating.</param>
        </member>
        <member name="M:VTQT.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs an action on each item while iterating through a list. 
            This is a handy shortcut for <c>foreach(item in list) { ... }</c>
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="source">The list, which holds the objects.</param>
            <param name="action">The action delegate which is called on each item while iterating.</param>
        </member>
        <member name="M:VTQT.EnumerableExtensions.ToDictionarySafe``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts an enumerable to a dictionary while tolerating duplicate entries (last wins)
            </summary>
            <param name="source">source</param>
            <param name="keySelector">keySelector</param>
            <returns>Result as dictionary</returns>
        </member>
        <member name="M:VTQT.EnumerableExtensions.ToDictionarySafe``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Converts an enumerable to a dictionary while tolerating duplicate entries (last wins)
            </summary>
            <param name="source">source</param>
            <param name="keySelector">keySelector</param>
            <param name="comparer">comparer</param>
            <returns>Result as dictionary</returns>
        </member>
        <member name="M:VTQT.EnumerableExtensions.ToDictionarySafe``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Converts an enumerable to a dictionary while tolerating duplicate entries (last wins)
            </summary>
            <param name="source">source</param>
            <param name="keySelector">keySelector</param>
            <param name="elementSelector">elementSelector</param>
            <returns>Result as dictionary</returns>
        </member>
        <member name="M:VTQT.EnumerableExtensions.ToDictionarySafe``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Converts an enumerable to a dictionary while tolerating duplicate entries (last wins)
            </summary>
            <param name="source">source</param>
            <param name="keySelector">keySelector</param>
            <param name="elementSelector">elementSelector</param>
            <param name="comparer">comparer</param>
            <returns>Result as dictionary</returns>
        </member>
        <member name="M:VTQT.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>The distinct by.</summary>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TKey">Key type</typeparam>
            <returns>the unique list</returns>
        </member>
        <member name="M:VTQT.EnumerableExtensions.OrderBySequence``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Orders a collection of entities by a specific ID sequence
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="source">The entity collection to sort</param>
            <param name="ids">The IDs to order by</param>
            <returns>The sorted entity collection</returns>
        </member>
        <member name="M:VTQT.EnumerableExtensions.BuildQueryString(System.Collections.Specialized.NameValueCollection,System.Text.Encoding,System.Boolean)">
            <summary>
            Builds an URL query string
            </summary>
            <param name="nvc">Name value collection</param>
            <param name="encoding">Encoding type. Can be null.</param>
            <param name="encode">Whether to encode keys and values</param>
            <returns>The query string without leading a question mark</returns>
        </member>
        <member name="M:VTQT.EnumerableExtensions.Remove``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Safe way to remove selected entries from a list.
            </summary>
            <remarks>To be used for materialized lists only, not IEnumerable or similar.</remarks>
            <typeparam name="T">Object type.</typeparam>
            <param name="list">List.</param>
            <param name="selector">Selector for the entries to be removed.</param>
            <returns>Number of removed entries.</returns>
        </member>
        <member name="M:VTQT.HttpExtensions.IsAppLocalUrl(Microsoft.AspNetCore.Http.HttpRequest,System.String)">
            <summary>
            Returns wether the specified url is local to the host or not
            </summary>
            <param name="request"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:VTQT.HttpExtensions.IsHttps(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Gets a value which indicates whether the HTTP connection uses secure sockets (HTTPS protocol). 
            Works with Cloud's load balancers.
            </summary>
        </member>
        <member name="M:VTQT.HttpExtensions.IsStaticResourceRequested(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets a value which indicates whether the current request requests a static resource, like .txt, .pdf, .js, .css etc.
            </summary>
        </member>
        <member name="M:VTQT.HttpExtensions.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>Determines whether the specified HTTP request is an AJAX request.</summary>
            <returns>true if the specified HTTP request is an AJAX request; otherwise, false.</returns>
            <param name="request">The HTTP request.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> parameter is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:VTQT.MiscExtensions.ToHexString(System.Byte[],System.Int32)">
            <summary>
            Converts bytes into a hex string.
            </summary>
        </member>
        <member name="M:VTQT.MiscExtensions.Grow(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Append grow if string builder is empty. Append delimiter and grow otherwise.
            </summary>
            <param name="sb">Target string builder</param>
            <param name="grow">Value to append</param>
            <param name="delimiter">Delimiter to use</param>
        </member>
        <member name="M:VTQT.ObjectExtensions.DeepClone``1(``0)">
            <summary>
            Perform a deep Copy of the object, using Json as a serialisation method.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="M:VTQT.StringExtensions.FormatInvariant(System.String,System.Object[])">
            <summary>
            Formats a string to an invariant culture
            </summary>
            <param name="format">The format string.</param>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="M:VTQT.StringExtensions.FormatCurrent(System.String,System.Object[])">
            <summary>
            Formats a string to the current culture.
            </summary>
            <param name="format">The format string.</param>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="M:VTQT.StringExtensions.FormatCurrentUI(System.String,System.Object[])">
            <summary>
            Formats a string to the current UI culture.
            </summary>
            <param name="format">The format string.</param>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="M:VTQT.StringExtensions.IsCaseSensitiveEqual(System.String,System.String)">
            <summary>
            Determines whether this instance and another specified System.String object have the same value.
            </summary>
            <param name="value">The string to check equality.</param>
            <param name="comparing">The comparing with string.</param>
            <returns>
            <c>true</c> if the value of the comparing parameter is the same as this string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VTQT.StringExtensions.IsCaseInsensitiveEqual(System.String,System.String)">
            <summary>
            Determines whether this instance and another specified System.String object have the same value.
            </summary>
            <param name="value">The string to check equality.</param>
            <param name="comparing">The comparing with string.</param>
            <returns>
            <c>true</c> if the value of the comparing parameter is the same as this string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VTQT.StringExtensions.IsEmpty(System.String)">
            <summary>
            Determines whether the string is null, empty or all whitespace.
            </summary>
        </member>
        <member name="M:VTQT.StringExtensions.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="value">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VTQT.StringExtensions.Hash(System.String,System.Text.Encoding,System.Boolean)">
            <remarks>to get equivalent result to PHPs md5 function call Hash("my value", Encoding.ASCII, false).</remarks>
        </member>
        <member name="M:VTQT.StringExtensions.Mask(System.String,System.Int32)">
            <summary>
            Mask by replacing characters with asterisks.
            </summary>
            <param name="value">The string</param>
            <param name="length">Number of characters to leave untouched.</param>
            <returns>The mask string</returns>
        </member>
        <member name="M:VTQT.StringExtensions.EnsureNumericOnly(System.String)">
            <summary>
            Ensures that a string only contains numeric values
            </summary>
            <param name="str">Input string</param>
            <returns>Input string with only numeric values, empty string if input is null or empty</returns>
        </member>
        <member name="M:VTQT.StringExtensions.Compact(System.String,System.Boolean)">
            <summary>
            Removes all redundant whitespace (empty lines, double space etc.).
            Use ~! literal to keep whitespace wherever necessary.
            </summary>
            <param name="input">Input</param>
            <returns>The compacted string</returns>
        </member>
        <member name="M:VTQT.StringExtensions.GetLines(System.String,System.Boolean,System.Boolean)">
            <summary>
            Splits the input string by carriage return.
            </summary>
            <param name="input">The string to split</param>
            <returns>A sequence with string items per line</returns>
        </member>
        <member name="M:VTQT.StringExtensions.EnsureStartsWith(System.String,System.String)">
            <summary>
            Ensure that a string starts with a string.
            </summary>
            <param name="value">The target string</param>
            <param name="startsWith">The string the target string should start with</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:VTQT.StringExtensions.EnsureEndsWith(System.String,System.String)">
            <summary>
            Ensures the target string ends with the specified string.
            </summary>
            <param name="endWith">The target.</param>
            <param name="value">The value.</param>
            <returns>The target string with the value string at the end.</returns>
        </member>
        <member name="M:VTQT.StringExtensions.SplitPascalCase(System.String)">
            <summary>
            Replaces pascal casing with spaces. For example "CustomerId" would become "Customer Id".
            Strings that already contain spaces are ignored.
            </summary>
            <param name="value">String to split</param>
            <returns>The string after being split</returns>
        </member>
        <member name="M:VTQT.StringExtensions.SplitSafe(System.String,System.String)">
            <summary>
            Splits a string into a string array
            </summary>
            <param name="value">String value to split</param>
            <param name="separator">If <c>null</c> then value is searched for a common delimiter like pipe, semicolon or comma</param>
            <returns>String array</returns>
        </member>
        <member name="M:VTQT.StringExtensions.SplitToPair(System.String,System.String@,System.String@,System.String,System.Boolean)">
            <summary>Splits a string into two strings</summary>
            <returns>true: success, false: failure</returns>
        </member>
        <member name="M:VTQT.StringExtensions.Dump(System.String,System.Boolean)">
            <summary>Debug.WriteLine</summary>
        </member>
        <member name="M:VTQT.StringExtensions.ToAttribute(System.String,System.String,System.Boolean)">
            <summary>Smart way to create a HTML attribute with a leading space.</summary>
            <param name="value">Name of the attribute.</param>
            <param name="name"></param>
            <param name="htmlEncode"></param>
        </member>
        <member name="M:VTQT.StringExtensions.Grow(System.String,System.String,System.String)">
            <summary>
            Appends grow and uses delimiter if the string is not empty.
            </summary>
        </member>
        <member name="M:VTQT.StringExtensions.NaIfEmpty(System.String)">
            <summary>
            Returns n/a if string is empty else self.
            </summary>
        </member>
        <member name="M:VTQT.StringExtensions.Replace(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Replaces substring with position x1 to x2 by replaceBy.
            </summary>
        </member>
        <member name="M:VTQT.StringExtensions.ReplaceNativeDigits(System.String,System.IFormatProvider)">
            <summary>
            Replaces digits in a string with culture native digits (if digit substitution for culture is required)
            </summary>
        </member>
        <member name="M:VTQT.TypeExtensions.GetNonNullableType(System.Type)">
            <summary>
            Gets the underlying type of a <see cref="T:System.Nullable`1" /> type.
            </summary>
        </member>
        <member name="M:VTQT.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
             <summary>
             Returns single attribute from the type
             </summary>
             <typeparam name="TAttribute">Attribute to use</typeparam>
             <param name="target">Attribute provider</param>
            <param name="inherits"><see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/></param>
             <returns><em>Null</em> if the attribute is not found</returns>
             <exception cref="T:System.InvalidOperationException">If there are 2 or more attributes</exception>
        </member>
        <member name="M:VTQT.TypeExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Given a particular MemberInfo, return the custom attributes of the
            given type on that member.
            </summary>
            <typeparam name="TAttribute">Type of attribute to retrieve.</typeparam>
            <param name="target">The member to look at.</param>
            <param name="inherits">True to include attributes inherited from base classes.</param>
            <returns>Array of found attributes.</returns>
        </member>
        <member name="M:VTQT.TypeExtensions.GetAllAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Given a particular MemberInfo, find all the attributes that apply to this
            member. Specifically, it returns the attributes on the type, then (if it's a
            property accessor) on the property, then on the member itself.
            </summary>
            <typeparam name="TAttribute">Type of attribute to retrieve.</typeparam>
            <param name="member">The member to look at.</param>
            <param name="inherits">true to include attributes inherited from base classes.</param>
            <returns>Array of found attributes.</returns>
        </member>
        <member name="M:VTQT.TypeExtensions.GetPropertyFromMethod(System.Reflection.MethodBase)">
            <summary>
            Given a MethodBase for a property's get or set method,
            return the corresponding property info.
            </summary>
            <param name="method">MethodBase for the property's get or set method.</param>
            <returns>PropertyInfo for the property, or null if method is not part of a property.</returns>
        </member>
        <member name="T:VTQT.ComparableObject">
            <summary>
            Provides a standard base class for facilitating sophisticated comparison of objects.
            </summary>
        </member>
        <member name="M:VTQT.ComparableObject.GetHashCode">
            <summary>
            Used to provide the hashcode identifier of an object using the signature
            properties of the object; Since it is recommended that GetHashCode change infrequently,
            if at all, in an object's lifetime; it's important that properties are carefully
            selected which truly represent the signature of an object.
            </summary>
        </member>
        <member name="M:VTQT.ComparableObject.GetTypeUnproxied">
            <summary>
            Returns the real underlying type of proxied objects.
            </summary>
        </member>
        <member name="M:VTQT.ComparableObject.HasSameSignatureAs(VTQT.ComparableObject)">
            <summary>
            You may override this method to provide your own comparison routine.
            </summary>
        </member>
        <member name="M:VTQT.ComparableObject.GetSignatureProperties">
            <summary>
            </summary>
        </member>
        <member name="M:VTQT.ComparableObject.GetSignaturePropertyNamesCore">
            <summary>
            Enforces the template method pattern to have child objects determine which specific
            properties should and should not be included in the object signature comparison.
            </summary>
        </member>
        <member name="M:VTQT.ComparableObject.RegisterSignatureProperty(System.String)">
            <summary>
            Adds an extra property to the type specific signature properties list.
            </summary>
            <param name="propertyName">Name of the property to add.</param>
            <remarks>Both lists are <c>unioned</c>, so
            that no duplicates can occur within the global descriptor collection.</remarks>
        </member>
        <member name="T:VTQT.ComparableObject`1">
            <summary>
            Generic version of <see cref="T:VTQT.ComparableObject" />.
            </summary>
        </member>
        <member name="M:VTQT.ComparableObject`1.RegisterSignatureProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an extra property to the type specific signature properties list.
            </summary>
            <param name="expression">The lambda expression for the property to add.</param>
            <remarks>Both lists are <c>unioned</c>, so
            that no duplicates can occur within the global descriptor collection.</remarks>
        </member>
        <member name="M:VTQT.Guard.NotNull``1(System.Func{``0})">
            <summary>
            Throws proper exception if the class reference is null.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value">Class reference to check.</param>
            <exception cref="T:System.InvalidOperationException">If class reference is null.</exception>
        </member>
        <member name="T:VTQT.Utilities.SecureRandomNumberGenerator">
            <summary>
             Represents the class implementation of cryptographic random number generator derive
            </summary>
        </member>
        <member name="M:VTQT.Utilities.SecureRandomNumberGenerator.Dispose">
            <summary>
            Dispose secure random
            </summary>
        </member>
    </members>
</doc>
