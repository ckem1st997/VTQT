@model AppSearchModel
<!-- #region Page Header -->
<div class="page-bar">
    <ul class="page-breadcrumb"></ul>
    <div class="page-toolbar">
        <div class="pull-right">
            <a data-action="create" href="javascript:void(0)" class="btn blue btn-sm"><i class="flaticon2-plus"></i> @T("Common.AddNew")</a>
            <a data-action="edit" href="javascript:void(0)" class="btn yellow btn-sm"><i class="flaticon2-pen"></i> @T("Common.Edit")</a>
            <a data-action="deletes" href="javascript:void(0)" class="btn red btn-sm"><i class="flaticon-delete"></i> @T("Common.Deletes")</a>
        </div>
    </div>
</div>
<!-- #endregion -->
<!-- #region Page Content -->
<div class="page-data" style="padding-top: 10px">
    <div class="row full-height">
        @(Html.Kendo().Grid<AppModel>()
            .Name("grd")
            .HtmlAttributes(new { style = "height: 100%" })
            .Columns(columns =>
            {
                columns.Select().Width(30);
                columns.Bound(x => x.Name).ClientTemplate("#=grd.tmp.name(Name)#").Width(320);
                columns.Bound(x => x.Url).ClientTemplate("#=grd.tmp.url(Url)#").Width(180);
                columns.Bound(x => x.Hosts).Encoded(false).Width(180);
                columns.Bound(x => x.CdnUrl).ClientTemplate("#=grd.tmp.cdnUrl(CdnUrl)#").Width(180);
                columns.Bound(x => x.SslEnabled).ClientTemplate("#=grd.tmp.sslEnabled(SslEnabled)#").Centered().Width(100);
                columns.Bound(x => x.DisplayOrder).Width(110).Centered();
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .ServerOperation(true)
                .PageSize(AdminAreaSettings.GridPageSize)
                .Read(read => read.Action("Get", "App").Data("grd.data"))
            )
            .NoRecords()
            .Scrollable(scr => scr.Enabled(true))
            .Pageable(pageable => pageable.ButtonCount(AdminAreaSettings.GridButtonCount).Info(true).Input(true).Numeric(true).PageSizes(AdminAreaSettings.GridPageSizeOptions).PreviousNext(true).Refresh(true))
            .Selectable(selectable => selectable.Type(GridSelectionType.Row).Mode(GridSelectionMode.Multiple))
            .Navigatable())
    </div>
</div>

<ul id="mnu" style="display: none">
    <li data-action="details">
        <i class="flaticon-eye font-blue-dark"></i> @T("Common.Details")
    </li>
    <li data-action="create">
        <i class="flaticon2-plus font-blue"></i> @T("Common.AddNew")
    </li>
    <li data-action="edit">
        <i class="flaticon2-pen font-yellow"></i> @T("Common.Edit")
    </li>
    <li class="k-separator"></li>
    <li data-action="refresh">
        <i class="flaticon-refresh font-green"></i> @T("Common.Refresh")
    </li>
    <li data-action="deletes">
        <i class="flaticon-delete font-red"></i> @T("Common.Delete")
    </li>
</ul>
<!-- #endregion -->
<!-- #region Scripts -->
@section HeadScripts {
    <script>
        // Fields
        var master = {
            urlDetails: '@Url.Action("Details")',
            urlCreate: '@Url.Action("Create")',
            urlEdit: '@Url.Action("Edit")',
            urlDeletes: '@Url.Action("Deletes")',
            toolbar: {
                el: '.page-toolbar',
                $el: {},
                actions: {
                    init: function () { }
                },
                init: function () { }
            },
            grd: {
                el: '#grd',
                $el: {},
                api: {},
                actions: {
                    init: function () { }
                },
                tmp: {
                    name: function (name) { },
                    url: function (url) { },
                    cdnUrl: function (cdnUrl) { },
                    sslEnabled: function (sslEnabled) { }
                },
                data: function () { },
                init: function () { }
            },
            mnu: {
                el: '#mnu',
                $el: {},
                api: {},
                init: function () { }
            },
            init: function () { },
            details: function (id) { },
            create: function () { },
            edit: function (id) { },
            deletes: function () { },
            refresh: function () { },
            actionCallback: function () { }
        };
        var toolbar = master.toolbar;
        var grd = master.grd;
        var mnu = master.mnu;

        grd.data = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');

            var searchModel = {
                Keywords: $keywords.val()
            };
            return searchModel;
        };
    </script>
}

@section Scripts {
    <script>
        // Methods
        master.details = function() {
            var id = grd.api.selectedIds()[0];
            if (id) {
                app.window.form.open({ url: `${master.urlDetails}/${id}`, options: { width: '55%' } });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.create = function() {
            app.window.form.open({ url: master.urlCreate, options: { width: '55%' }, callback: master.actionCallback });
        };
        master.edit = function() {
            var id = grd.api.selectedIds()[0];
            if (id) {
                app.window.form.open({ url: `${master.urlEdit}/${id}`, options: { width: '55%' }, callback: master.actionCallback });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.deletes = function() {
            var ids = grd.api.selectedIds();
            if (ids.length > 0) {
                app.window.deletes.open({ url: master.urlDeletes, ids: ids, options: { width: '450px' }, callback: master.actionCallback });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.refresh = function() {
            grd.api.reload();
        };
        master.actionCallback = function() {
            grd.api.reload();
        };

        // Inits
        master.init = function() {
            toolbar.init();
            grd.init();
            mnu.init();
        };

        toolbar.init = function() {
            toolbar.$el = $(toolbar.el);

            toolbar.actions.init();
        };
        toolbar.actions.init = function() {
            var $toolbar = toolbar.$el;

            admin.pageToolbar.actions.initCreate($toolbar, master.create);
            admin.pageToolbar.actions.initEdit($toolbar, master.edit);
            admin.pageToolbar.actions.initDeletes($toolbar, master.deletes);
        };
        grd.init = function() {
            grd.$el = $(grd.el);
            grd.api = grd.$el.data('kendoGrid');

            grd.actions.init();
        };
        grd.actions.init = function() {
            grd.api.initDblClick(master.edit);
            grd.api.initEdit(master.edit);
        };
        mnu.init = function() {
            mnu.$el = $(mnu.el);
            mnu.$el.kendoContextMenu({
                orientation: 'vertical',
                target: master.grd.el,
                filter: 'tbody tr[role="row"]',
                animation: {
                    open: { effects: "fadeIn" },
                    duration: 0
                },
                open: function(e) {
                    var $row = $(e.target);
                    var selected = master.grd.api.select().length;
                    if (selected === 0 || (!$row.hasClass('k-state-selected') && selected > 0)) {
                        master.grd.api.clearSelection();
                        master.grd.api.select($row);
                    }
                },
                select: function(e) {
                    var action = $(e.item).attr('data-action');
                    switch (action) {
                    case 'details':
                        master.details();
                        break;
                    case 'create':
                        master.create();
                        break;
                    case 'edit':
                        master.edit();
                        break;
                    case 'deletes':
                        master.deletes();
                        break;
                    case 'refresh':
                        master.refresh();
                        break;
                    default:
                        break;
                    }
                }
            });
            mnu.api = mnu.$el.data("kendoContextMenu");
        };

        // Templates
        grd.tmp.name = function(name) {
            return `<a data-action="edit" href="javascript:void(0)">${name}</a>`;
        };
        grd.tmp.url = function (url) {
            return '<a href="{0}" target="_blank">{0}</a>'.format(window.htmlEncode(url));
        }
        grd.tmp.cdnUrl = function (cdnUrl) {
            return cdnUrl != null ? '<a href="{0}" target="_blank">{0}</a>'.format(window.htmlEncode(cdnUrl)) : '';
        }
        grd.tmp.sslEnabled = function (sslEnabled) {
            return sslEnabled ? '<i class="fa fa-check green pointer"></i>' : '<i class="fa fa-lock yellow pointer"></i>';
        };

        // Startup
        $(function() {
            master.init();
        });
    </script>
}
<!-- #endregion -->
