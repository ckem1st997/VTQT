@model StorageValueSearchModel
@section HeadScripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2014-11-29/FileSaver.min.js"></script>
    <link href="~/SpreadJS.12.0.7/css/gc.spread.sheets.12.0.7.css" rel="stylesheet"/>
    <link href="~/SpreadJS.12.0.7/css/gc.spread.sheets.excel2016colorful.12.0.7.css" rel="stylesheet"/>
    <script src="~/SpreadJS.12.0.7/scripts/gc.spread.sheets.all.12.0.7.min.js"></script>
    <script src="~/SpreadJS.12.0.7/scripts/interop/gc.spread.excelio.12.0.7.min.js"></script>
    <script src="~/SpreadJS.12.0.7/scripts/interop/gc.spread.sheets.migration.12.0.7.min.js"></script>
    <script src="~/SpreadJS.12.0.7/scripts/license.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.devbridge-autocomplete/1.2.27/jquery.autocomplete.min.js"></script>
    <script src="~/js/pagination.min.js"></script>

}
<style>
    .splitter_panel .vsplitter {
        background-color: #d7d7d7;
    }

    .k-button.k-button-icontext.k-grid-delete {
        color: #fff !important;
        background-color: #e7505a !important;
        border-color: #e7505a !important;
        border-radius: 6px !important;
        font-family: 'Segoe UI',Tahoma,'Helvetica Neue',Helvetica,Arial,'sans-serif' !important;
    }
    .k-button.k-button-icontext {
        color: #fff !important;
        background-color: #c49f47 !important;
        border-color: #c49f47 !important;
        border-radius: 6px !important;
    }

</style>
<script>

     function forgeryToken() {
         return kendo.antiForgeryTokens();
     }


     //#region Fields
     var master = {
         urlTree: '@Url.Action("GetTree")',
         urlAddItem: '@Url.Action("AddItem")',
         urlAddTable: '@Url.Action("AddTable")',
         urlRunQueryImport: '@Url.Action("RunQueryImport")',
         urlAddImportExcel: '@Url.Action("AddImport")',
         urlUpdateImportExcel: '@Url.Action("UpdateImport")',
         urlgetSqlUpdateImportExcel: '@Url.Action("GenSqlToUpdate")',
         urlCreateType: '@Url.Action("Create", "TypeValue")',
         urlDetails: '@Url.Action("Details")',
         urlEdit: '@Url.Action("Edit")',
         urlResult: '@Url.Action("GetResult")',
         grdIndex: {
             selector: '#grdIndex',
             $this: {},
             api: {},
             init: function () { },
             edit: function (e) { },
             create: function (e) { },
             error: function (e) { },
             actions: {
                    init: function () { }
             },
            tmp: {
            name: function (name) { },
            role: function (role) { },
            activate: function (activate) { }
                    },
             templates: {
                 flag: function (id, flag) { },
                 name: function (id, name) { },
                 resources: function (id) { },
                 downloadFile:function (id){},
                 editExcel:function (id){},
                 published: function (published) { }
             }
         },
         toolbar: {
             el: '.page-toolbar',
             $el: {},
             actions: {
                 init: function () { }
             },
             init: function () { }
         },
         btnAddItem: {
             selector: '#btnAdd',
             $this: {},
             init: function () { }
          },       
         btnAddTable: {
             selector: '#btnAddTable',
             $this: {},
             init: function () { }
          },
         btnAddImportExcel: {
            selector: '#btnAddImportExcel',
            $this: {},
            init: function () { }
            },        
            btnUpdateImportExcel: {
            selector: '#btnUpdateImportExcel',
            $this: {},
            init: function () { }
            },
          btnAddTypeValue: {
             selector: '#btnAddTypeValue',
             $this: {},
             init: function () { }
          },
         treeIndex: {
             selector: '#treeIndex',
             $this: {},
             api: {},
             init: function () { }
         },
         btnSearch: {
             el: '#btnSearch',
             $el: {},
             init: function () { }
         },

         init: function () { },
         export: function () { },
         actionCallback: function () { },
         actionCallbackPages: function () { },
         details: function () { },
         getlistrole: function () { },
         setlistrole: function () { },
         showlisrtrole: function () { },
         create: function () { },
         edit: function () { },
         deletes: function () { },

     };


     var grdIndex = master.grdIndex;
     var treeIndex = master.treeIndex;
     var btnSearch = master.btnSearch;
     var toolbar = master.toolbar;
     var btnAddItem = master.btnAddItem;
     var btnAddTypeValue = master.btnAddTypeValue;
     var btnAddImportExcel = master.btnAddImportExcel;
     var btnUpdateImportExcel = master.btnUpdateImportExcel;
     var btnAddTable = master.btnAddTable;

     btnAddTypeValue.init=function (){
              $(btnAddTypeValue.selector).click(function (e) {
                   app.window.form.open({ url: master.urlCreateType, options: { width: '550px' } ,callback: master.actionCallbackPages});
              });

     };    

     master.edit = function() {
             var id = grdIndex.api.selectedIds()[0];
             if (id) {
                 app.window.form.open({ url: `${master.urlEdit}/${id}`, options: { width: '550px' },callback: function () {

                     var itemModel = window.frmAddItemEdit.$el.serializeObject();
                     itemModel.NameTableRefense=_.join(window.frmAddItemEdit.$NameTableRefense.val(), ',');
                     itemModel.OptionSelectColumn = _.join(window.frmAddItemEdit.$OptionSelectColumn.val(), ',');
                     itemModel.OptionSelectColumn=  itemModel.OptionSelectColumn.replace('+','\n');
                     $.ajax({
                      type: 'POST',
                      data:{model:itemModel},
                      dataType: 'json',
                      url: master.urlEdit,
                      beforeSend: function(jqXhr, settings) {
                          app.ui.loader(grdIndex.$this, true);
                      },
                      success: function(msg) {
                        app.ui.loader(grdIndex.$this, false);
                         window.frmAddItemEdit.winForm.close();
                         grdIndex.api.reload();
                      }
                     });

                     }});
             } else {
                 notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
             }
         };
     master.details = function() {
             var id = grdIndex.api.selectedIds()[0];
             if (id) {
                 app.window.form.open({ url: `${master.urlDetails}/${id}`, options: { width: '550px' } });
             } else {
                 notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
             }
         };
     master.actionCallback = function() {
         grdIndex.api.reload();
     };
     master.actionCallbackPages= function() {
         $.pjax({ url: `/admin/StorageValue` });
    };
      btnAddItem.init = function () {
         btnAddItem.$this = $(btnAddItem.selector);

         btnAddItem.$this.click(function (e) {
             app.window.form.open({
                 url: master.urlAddItem, options: { width: '550px' }, callback: function ()
                 {
                     var itemModel = window.frmAddItem.$el.serializeObject();
                     itemModel.NameTableRefense = _.join(window.frmAddItem.$NameTableRefense.val(), ',');
                     itemModel.OptionSelectColumn = _.join(window.frmAddItem.$OptionSelectColumn.val(), ',');
                    $.ajax({
                       type: 'POST',
                       data:{model:itemModel},
                       dataType: 'json',
                       url: master.urlAddItem,
                       beforeSend: function(jqXhr, settings) {
                           app.ui.loader(grdIndex.$this, true);
                       },
                       success: function(msg) {
                         app.ui.loader(grdIndex.$this, false);
                        //    window.frmAddItem.winForm.close();
                               grdIndex.api.reload();
                       }
                   });

                 }
             });
         });
    }
      btnAddTable.init = function () {
         btnAddTable.$this = $(btnAddTable.selector);

         btnAddTable.$this.click(function (e) {
             app.window.form.open({
                 url: master.urlAddTable, options: { width: '550px' }, callback: function ()
                 {
                     var itemModel = window.frmAddTable.$el.serializeObject();
                     console.log(itemModel);
                     itemModel.ListColumn = _.join(window.frmAddTable.$ListColumn.val(), ',');
                     if (itemModel.ActiveInput==true) {
                         itemModel.Data=itemModel.ListColumn;
                     }
                    $.ajax({
                       type: 'POST',
                       data:{model:itemModel},
                       dataType: 'json',
                       url: master.urlAddTable,
                       beforeSend: function(jqXhr, settings) {
                           app.ui.loader(grdIndex.$this, true);
                       },
                       success: function(msg) {
                         app.ui.loader(grdIndex.$this, false);
                         if (msg && msg.success)
                            window.frmAddTable.winForm.close();
                         grdIndex.api.reload();
                       }
                   });

                 }
             });
         });
    }

     btnAddImportExcel.init = function () {
         btnAddImportExcel.$this = $(btnAddImportExcel.selector);
         //idTypeValue
         btnAddImportExcel.$this.click(function (e) {
             app.window.form.open({
                // url: master.urlAddImportExcel+'?idTypeValue='+treeIndex.api.activeNode.key, options: { width: '550px' }, callback: function ()
                 url: master.urlAddImportExcel, options: { width: '550px' }, callback: function ()
                 {
                     var itemModel = window.frmAddItem.$el.serializeObject();
                     itemModel.NameTableRefense = _.join(window.frmAddItem.$NameTableRefense.val(), ',');
                     itemModel.OptionSelectColumn = _.join(window.frmAddItem.$OptionSelectColumn.val(), ',');
                  //   debugger;
                    $.ajax({
                       type: 'POST',
                       data:{query:itemModel.DataSave},
                       dataType: 'json',
                       url: master.urlRunQueryImport,
                       beforeSend: function(jqXhr, settings) {
                           app.ui.loader(grdIndex.$this, true);
                       },
                       success: function(msg) {
                            app.ui.loader(grdIndex.$this, false);
                          // if (msg && msg.success){
                          //         window.frmAddItem.winForm.close();
                          //            grdIndex.api.reload();
                          //       }


                       }
                   });

                 }
             });
         });
     }   
     
     btnUpdateImportExcel.init = function () {
         btnUpdateImportExcel.$this = $(btnUpdateImportExcel.selector);
         //idTypeValue
         btnUpdateImportExcel.$this.click(function (e) {
             app.window.form.open({
               //  url: master.urlUpdateImportExcel+'?idTypeValue='+treeIndex.api.activeNode.key, options: { width: '550px' }, callback: function ()
                 url: master.urlUpdateImportExcel, options: { width: '750px' }, callback: function ()
                 {
                     var itemModel = window.frmUpdateItem.$el.serializeObject();
                     itemModel.NameTableRefense = _.join(window.frmUpdateItem.$NameTableRefense.val(), ',');
                     itemModel.OptionSelectColumn = _.join(window.frmUpdateItem.$OptionSelectColumn.val(), ',');
                     itemModel.UpdateSelectColumn = _.join(window.frmUpdateItem.$UpdateSelectColumn.val(), ',');

                   $.ajax({
                      type: 'POST',
                       data:{query:itemModel.DataSave},
                      dataType: 'json',
                      url: master.urlRunQueryImport,
                      beforeSend: function(jqXhr, settings) {
                          app.ui.loader(grdIndex.$this, true);
                      },
                      success: function(msg) {
                        app.ui.loader(grdIndex.$this, false);
                         if (msg && msg.success){
                                 window.frmUpdateItem.winForm.close();
                                    grdIndex.api.reload();
                               }
                      }
                   });

                 }
             });
         });
     }
     //#region Events
     grdIndex.error = function (e) {
         if (e.errors) {
             var message = '@T("Common.Error").JavaScriptStringEncode():\n';
             $.each(e.errors, function (key, value) {
                 if ('errors' in value) {
                     $.each(value.errors, function () {
                         message += this + "\n";
                     });
                 }
             });
             alert(message);
         }
     }

     grdIndex.data = function () {
         var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
         var typeValueId = null;
     if (!_.isEmpty(treeIndex.api) && treeIndex.api.getActiveNode())
         typeValueId = treeIndex.api.activeNode.key;

     var searchModel = {
         Keywords: $keywords.val(),
         TypeValueId:typeValueId
     };
     return searchModel;
     }



     master.init = function () {
         grdIndex.init();
         grdIndex.actions.init();
         treeIndex.init();
         btnSearch.init();
         toolbar.init();
         btnAddItem.init();
         btnAddTypeValue.init();
         btnAddImportExcel.init();
         btnUpdateImportExcel.init();
         btnAddTable.init();
     }

      toolbar.init = function () {
                 toolbar.$el = $(toolbar.el);

                 toolbar.actions.init();
             };
             toolbar.actions.init = function () {
                 var $toolbar = toolbar.$el;
                 $toolbar.find('a[data-action="export"]').click(function (e) {
                     master.export();
                 });
                 $toolbar.find('a[data-action="importexcel"]').click(function (e) {
                     master.importExcel();
                 });
             };

             grdIndex.init = function () {
                 grdIndex.$this = $(grdIndex.selector);
                 grdIndex.api = grdIndex.$this.data('kendoGrid');
             }
             treeIndex.init = function () {
                 treeIndex.$this = $(treeIndex.selector);
                 treeIndex.$this.fancytree({
                     source: {
                         url: master.urlTree,
                         beforeSend: function (jqXHR, settings) {
                             grdIndex.api.clear();
                         },
                         complete: function () {
                              var lastKeySelected = '@Model.TypeValueId';
                             $("#treeIndex").fancytree("getTree").getNodeByKey(lastKeySelected).setActive();
                         }
                     },
                     postProcess: function (event, data) {
                         data.result = data.response.data;
                     },
                     activate: function (event, data) {
                         $('#@Html.FieldIdFor(m => m.Keywords)').val("");
                         var node = data.node;
                         if (node.statusNodeType !== 'loading') {
                             grdIndex.api.resetPage();
                         }
                     }
                 });
                 treeIndex.api = treeIndex.$this.fancytree("getTree");
             }

             btnSearch.init = function () {
                 btnSearch.$el = $(btnSearch.el);

                 const search = _.debounce(() => {
                     grdIndex.api.resetPage();
                 }, app.ui.def.debounce.timeout);
                 btnSearch.$el.click(function (e) {
                     search();
                     return false;
                 });
             };

        grdIndex.actions.init = function () {
                 grdIndex.api.initDblClick(master.details);
                 grdIndex.api.initEdit(master.edit);
                 grdIndex.api.initActivate(master.activates);
        };
        // Templates
        grdIndex.tmp.name = function(name) {
            return `<a data-action="edit" href="javascript:void(0)">${name}</a>`;
        };
        grdIndex.tmp.downloadFile = function(e) {
             e.preventDefault();
             var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             window.location = '@Url.Action("Download")'+'/'+dataItem.Id;
        };
        grdIndex.tmp.editExcel = function(e) {
             e.preventDefault();
             var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
           //  $.pjax({ url: '/Admin/StorageValue/EditFileToExcel/' + dataItem.Id });
            window.location = '/Admin/StorageValue/EditFileToExcel/' + dataItem.Id;


        };

</script>
<!-- #region Page Header -->
<div class="page-bar">
    <ul class="page-breadcrumb"></ul>
    <div class="page-toolbar">
        <div class="pull-right">
            <a id="btnAddTable" href="javascript:void(0)" class="btn  btn-sm" style="background-color: #5bb345;color: white">
                <i class="flaticon-logout"></i> Tạo mới bảng
            </a>
            <a id="btnAddImportExcel" href="javascript:void(0)" class="btn green btn-sm">
                <i class="fa fa-minus"></i> Thêm dữ liệu
            </a>
            <a id="btnUpdateImportExcel" href="javascript:void(0)" class="btn red btn-sm">
                <i class="fa fa-edit"></i> Chỉnh sử dữ liệu
            </a>
            <a id="btnAdd" href="javascript:void(0)" class="btn blue btn-sm">
                <i class="flaticon2-plus"></i> @T("Common.AddNew")
            </a>
            @* <a data-action="export" href="javascript:void(0)" class="btn purple btn-sm"> *@
            @*     <i class="fa fa-print"></i> @T("Common.ExportData") *@
            @* </a> *@
        </div>
    </div>
</div>
<div class="splitter fixed-layout-split" data-position="230px" style="border-top: 1px solid #d7d7d7;">
    <div class="leftPane">
        <div id="treeIndex" style="height: 96%"></div>
        <div style="    float: right;
                        margin-right: 10px;">
            <button id="btnAddTypeValue" class="btn blue btn-sm">@T("Common.AddNew")</button>

        </div>
    </div>
    <div class="rightPane">
        <div class="page-data">
            <div class="row search-form">
                <form style="display:flex;align-items:center;">
                    <div class="search-label">
                        @T("Common.Search"):
                    </div>
                    <div class="col-md-4">
                        <div class="form-group form-group-sm">
                            @Html.TextBoxFor(m => m.Keywords, new { @class = "form-control", placeholder = T("Common.Fields.EnterKeywords") })
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="form-group form-group-sm">
                            <button type="submit" id="btnSearch" class="btn btn-default btn-sm">
                                <i class="fa fa-search"></i> @T("Common.GetData")
                            </button>
                        </div>
                    </div>
                </form>

            </div>
            <div class="row full-height">
                @Html.AntiForgeryToken()
                @(Html.Kendo().Grid<StorageValueModel>()
                    .Name("grdIndex")
                    .HtmlAttributes(new { style = "height: 100%" })
                    .Columns(columns =>
                    {
                        // columns.Select().Width(30);
                        columns.Bound(x => x.VoucherByName).Width(150);
                        columns.Bound(x => x.VoucherDate).Width(90).Format("{0:hh:mm dd/MM/yyyy}");
                        columns.Bound(x => x.Name).ClientTemplate("#=grdIndex.tmp.name(Name)#").Width(100);
                        columns.Bound(x => x.ModifiedByName).Width(150);
                        columns.Bound(x => x.ModifiedDate).Width(90).Format("{0:hh:mm dd/MM/yyyy}");
                        columns.Bound(x => x.FileName).Width(150);
                        columns.Bound(x => x.TimeYear).Width(50);
                        columns.Bound(x => x.TimeMouth).Width(50);
                        columns.Bound(x => x.TimeDay).Width(50);
                        columns.Bound(x => x.Status).Width(100);
                        columns.Command(commands =>
                        {
                            // .Template("<a role='button'><i class='fa fa-download' aria-hidden='true'></i></a>")
                            commands.Destroy().Text(T("Common.Delete"));
                            //commands.Custom("Download").Click("grdIndex.tmp.downloadFile");
                            commands.Custom("Dữ liệu").Click("grdIndex.tmp.editExcel");
                        }).Width(150).HtmlAttributes(new { style = "text-align: center" }).Title("Chức năng");
                    })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .Model(m => { m.Id(x => x.Id); })
                        .PageSize(AdminAreaSettings.GridPageSize)
                        .ServerOperation(true)
                        .Read(read => read.Action("Read", "StorageValue").Data("grdIndex.data"))
                        .Destroy(destroy => destroy.Action("Deletes", "StorageValue").Data("forgeryToken"))
                        .Events(events => events.Error("grdIndex.error")))
                    .Selectable(selectable => selectable
                        .Mode(GridSelectionMode.Single))
                    .NoRecords()
                    .AutoBind(true)
                    .Scrollable(scr => scr.Enabled(true))
                    .Pageable(pageable => pageable.ButtonCount(AdminAreaSettings.GridButtonCount).Info(true).Input(true).Numeric(true).PageSizes(AdminAreaSettings.GridPageSizeOptions).PreviousNext(true).Refresh(true))
                    .Navigatable())
            </div>
        </div>
    </div>
</div>


<script>


    $(function () {
        master.init();

    });
    //#endregion
</script>

