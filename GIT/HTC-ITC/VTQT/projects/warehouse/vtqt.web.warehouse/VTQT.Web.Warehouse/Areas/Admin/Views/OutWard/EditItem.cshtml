@model OutwardDetailModel
@{
    Layout = null;
}

<div class="form fixed-layout-form">
    <form data-form-type="ajax" class="form-horizontal">
        <div class="form-body">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                <h4 class="modal-title">Sửa vật tư</h4>
            </div>
            <div class="modal-body">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.OutwardId)

                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.ItemId, true, new { @class = "control-label col-md-4" }, true)
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.ItemId, Model.AvailableItems, "Chọn vật tư", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.UnitId, true, new { @class = "control-label col-md-4" }, true)
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.UnitId, Model.AvailableUnits, "Chọn đơn vị tính", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.UIQuantity, true, new { @class = "control-label col-md-4" }, true)
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.UIQuantity, new { htmlAttributes = new { style = "width: 100%" } })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.UIPrice, true, new { @class = "control-label col-md-4" }, true)
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.UIPrice, new { htmlAttributes = new { style = "width: 100%" } })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.Amount, true, new { @class = "control-label col-md-4" }, true)
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.Amount, new { htmlAttributes = new { style = "width: 100%" } })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.AccObjectId, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.AccObjectId, Model.AvailableAccObject, string.Format(T("Common.SelectObject"), T("Common.AccObject")), new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
                @*<div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.AccountMore, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.AccountMore, Model.AvailableAccountMores, "Chọn tài khoản nợ", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.AccountYes, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.AccountYes, Model.AvailableAccountYes, "Chọn tài khoản có", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>*@
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.Status, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.Status, new { htmlAttributes = new { @class = "form-control", style = "width: 100%" } })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.DepartmentId, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.DepartmentId, Model.AvailableOrganizations, "Chọn phòng ban", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.EmployeeId, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.EmployeeId, Model.AvailableUsers, "Chọn nhân viên", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.StationId, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.StationId, Model.AvailableStations, "Chọn trạm", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.ProjectId, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.ProjectId, Model.AvailableProjects, "Chọn dự án", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
                <div class="form-group form-group-sm">
                    @Html.XBaseLabelFor(m => m.CustomerId, true, new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.CustomerId, Model.AvailableCustomers, "Chọn khách hàng", new { @class = "form-control", style = "width: 100%" })
                    </div>
                </div>
            </div>
            <div class="modal-footer form-actions">
                <button type="submit" class="btn blue btn-sm">
                    <i class="fa fa-spinner fa-spin spin-submit"></i>
                    <i class="fa fa-check"></i> @T("Common.Save")
                </button>
                <button type="button" class="btn btn-default btn-sm" data-dismiss="modal">
                    <i class="fa fa-times"></i> @T("Common.Close")
                </button>
            </div>
        </div>
    </form>
</div>


<script>
    frmEditItem = {
        el: 'form[data-client-form-id="@ClientFormId"]',
        $el: {},
        winForm: {},
        $itemId: $('#@Html.FieldIdFor(m => m.ItemId)'),
        $unitId: $('#@Html.FieldIdFor(m => m.UnitId)'),
        $departmentId: $('#@Html.FieldIdFor(m => m.DepartmentId)'),
        $employeeId: $('#@Html.FieldIdFor(m => m.EmployeeId)'),
        $stationId: $('#@Html.FieldIdFor(m => m.StationId)'),
        $projectId: $('#@Html.FieldIdFor(m => m.ProjectId)'),
        $customerId: $('#@Html.FieldIdFor(m => m.CustomerId)'),
        init: function () { }
    };

    frmEditItem.init = function () {
        //Init Window
        frmEditItem.$el = $(frmEditItem.el);
        frmEditItem.winForm = frmEditItem.$el.data('winForm');
    };

    $("#ItemId").on("select2:select", function (e) {
        var data = e.params.data;
                    $.ajax({
                        type: 'GET',
                        data: { id: data.id },
                dataType: 'json',
                url: '@Url.Action("GetUnitByItemId", "OutWard")',
                        success: function (msg) {
                            $('#UnitId').val(msg.Data);
                            $('#UnitId').trigger('change');
                }
            });
        return false;
    });
    $("#ItemId").on("select2:select", function (e) {
        $('#UnitId').empty();
        var data = e.params.data;
        $.ajax({
            type: 'GET',
            data: { id: data.id },
            dataType: 'json',
            url: '@Url.Action("GetWareHouseItemUnitByItemId", "Inward")',
            success: function (msg) {
                $("#UnitId").select2({
                    data: msg
                });
            }
        });
        return false;
    });

    $("#UIQuantity").keyup(function() {
        @*var $salaryTotal = $('#@Html.FieldIdFor(m => m.Amount)');
        parseFloat($("#UIPrice").val().replace(",", "."))
        $salaryTotal.data("kendoNumericTextBox").value(parseFloat($(this).val().replace(",", ".")) * parseFloat($("#UIPrice").val().replace(",", ".")));*@

          var ItemId = $('#@Html.FieldIdFor(m => m.ItemId)');
        if (ItemId.val() === undefined || ItemId.val().length<1) {
                    notify({ text: '@T("Notifies.NotifyWarning.NotSelectItem").JavaScriptStringEncode()', type: 'warning' });
                    return false;
                }
        var $salaryTotal = $('#@Html.FieldIdFor(m => m.Amount)');
        $salaryTotal.data("kendoNumericTextBox").value(parseFloat($(this).val().replace(",", ".")) * parseFloat($("#UIPrice").val().replace(",", ".")));
                    $.ajax({
                        type: 'POST',
                        data: { WareHouseId: $("#WareHouseID").val(), ItemId: ItemId.val() },
                        url: '@Url.Action("CheckUIQuantity")',
                        success: function (msg) {
                            if (msg.data.data.length > 0) {
                                        var res = msg.data.data[0].Quantity;
                                        console.log(res)
                                        var ui = parseFloat($("#UIQuantity").val())
                                        if (ui > res || res == undefined)
                                        {
                                            app.window.confirm.open({
                                                title: 'Xác nhận ghi giảm',
                                                text: '@T("Notifies.NotifyWarning.UIQuantity").JavaScriptStringEncode()',
                                                callback: function () {
                                                    grdIndex.api.dataSource.insert(item);
                                                    window.frmAddItem.winForm.close();

                                                }
                                            });
                                        }
                                        return;
                                    }
                                    else {
                                        grdIndex.api.dataSource.insert(item);
                                        window.frmAddItem.winForm.close();
                                    }
                        }
                    });

    });
    $("#UIPrice").keyup(function () {
        var $salaryTotal = $('#@Html.FieldIdFor(m => m.Amount)');
        $salaryTotal.data("kendoNumericTextBox").value(parseFloat($(this).val().replace(",", ".")) * parseFloat($("#UIQuantity").val().replace(",", ".")));
    });
    $(function () {
        frmEditItem.init();
    });
</script>