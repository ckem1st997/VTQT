@model WareHouseLimitSearchModel


<script>
                function onChange(e) {
                var colIdx = e.container.index();
                    var dataItem = e.sender.dataItem($(e.container).parent());
                    var listunits = @Html.Raw(JsonConvert.SerializeObject(ViewData["units"]));
                    var unit = listunits.find(x => x.Id === dataItem.WareHouseItemModel.UnitId)
                    if (colIdx == 1 && unit !== undefined) {
                        dataItem.set("UnitModel", unit);
                }
    }

    function onAdd(e) {
        if (e.model.isNew()) {
        var dataItem = e.sender.dataItem($(e.container).parent());
        var wareHouseId = null;
        if (!_.isEmpty(treeIndex.api) && treeIndex.api.getActiveNode())
                wareHouseId = treeIndex.api.activeNode.key;
            console.log(wareHouseId)
            if (wareHouseId === null || wareHouseId === undefined || wareHouseId.length<5) {
            notify({ text: '@T("Notifies.NotWareHouseSelect").JavaScriptStringEncode()', type: 'info' });

            grdIndex.api.dataSource.cancelChanges(dataItem);
            this.refresh()
               return false;
        }
        var listunits = @Html.Raw(JsonConvert.SerializeObject(ViewData["units"]));
        var listitem = @Html.Raw(JsonConvert.SerializeObject(ViewData["warehouses"]));
        var item = listitem.find(x => x.Id === wareHouseId)
        if (item != undefined)
            dataItem.set("WareHouseModel", item)
        var unit = listunits.find(x => x.Id === dataItem.WareHouseItemModel.UnitId)
                    if (unit !== undefined) {
                        dataItem.set("UnitModel", unit);
                }
        }

            }
</script>

<div class="page-bar">
    <ul class="page-breadcrumb"></ul>
    <div class="page-toolbar">
        <div class="pull-right">
            <a data-action="importexcel" href="javascript:void(0)" class="btn blue btn-sm"><i class="fa fa-file-excel-o"></i> @T("Common.ImportExcel")</a>
            <a data-action="export" href="javascript:void(0)" class="btn purple btn-sm"><i class="fa fa-print"></i> @T("Common.ExportData")</a>
        </div>
    </div>
</div>
<div class="splitter fixed-layout-split" data-position="230px">
    <div class="leftPane">
        <div id="treeIndex" class="full-height"></div>
    </div>
    <div class="rightPane">
        <div class="page-data">
            <div class="row search-form">
                <form style="display:flex;align-items:center;">
                    <div class="search-label">
                        @T("Common.Search"):
                    </div>
                    <div class="col-md-4">
                        <div class="form-group form-group-sm">
                            @Html.TextBoxFor(m => m.Keywords, new { @class = "form-control", placeholder = T("Common.Fields.EnterKeywords") })
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="form-group form-group-sm">
                            <button type="submit" id="btnSearch" class="btn btn-default btn-sm">
                                <i class="fa fa-search"></i> @T("Common.GetData")
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="row full-height">
                @Html.AntiForgeryToken()
                @(Html.Kendo().Grid<WareHouseLimitModel>()
                    .Name("grdIndex")
                    .HtmlAttributes(new {style = "height: 99%" })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.WareHouseModel).EditorTemplateName("WareHouse").ClientTemplate("#=WareHouseModel.Name#").Width(200);
                        columns.Bound(x => x.WareHouseItemModel).EditorTemplateName("WareHouseItem").ClientTemplate("#=WareHouseItemModel.Name#").Width(200);
                        columns.Bound(x => x.UnitModel).EditorTemplateName("Unit").ClientTemplate("#=UnitModel.UnitName#").Width(200);
                        columns.Bound(x => x.UnitName).Hidden();
                        columns.Bound(x => x.MinQuantity).Width(100);
                        columns.Bound(x => x.MaxQuantity).Width(100);
                        columns.Command(commands =>
                        {
                            commands.Destroy().Text(T("Common.Delete"));
                        }).Width(150).HtmlAttributes(new {style = "text-align: center"});
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Create().Text(T("Common.AddNew"));
                        toolbar.Save().Text(T("Common.Save")).CancelText(T("Common.Cancel"));
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .Model(m =>
                        {
                            m.Id(x => x.Id);
                            m.Field(p => p.WareHouseModel).DefaultValue(
                                ViewData["defaultWarehouse"] as WareHouseModel);
                            m.Field(p => p.WareHouseItemModel).DefaultValue(
                                ViewData["defaultWarehouseItem"] as WareHouseItemModel);
                            m.Field(p => p.UnitModel).DefaultValue(
                                ViewData["defaultUnit"] as UnitModel);
                        })
                        .PageSize(AdminAreaSettings.GridPageSize)
                        .ServerOperation(true)
                        .Create(create => create.Action("Create", "WareHouseLimit").Data("forgeryToken"))
                        .Read(read => read.Action("Read", "WareHouseLimit").Data("grdIndex.data"))
                        .Update(update => update.Action("Update", "WareHouseLimit").Data("forgeryToken"))
                        .Destroy(destroy => destroy.Action("Deletes", "WareHouseLimit").Data("forgeryToken"))
                        .Events(events => events.Error("grdIndex.error"))
                    )
                    .NoRecords()
                    .AutoBind(false)
                    .Scrollable(scr => scr.Enabled(true))
                    .Pageable(pageable => pageable.ButtonCount(AdminAreaSettings.GridButtonCount).Info(true).Input(true).Numeric(true).PageSizes(AdminAreaSettings.GridPageSizeOptions).PreviousNext(true).Refresh(true))
                    .Navigatable()
                     .Events(e => e.Edit("onAdd").CellClose("onChange"))
                    )
            </div>
        </div>
    </div>
</div>

<!-- #endregion -->
<!-- #region Scripts -->
@section HeadScripts {
    <script>
        function forgeryToken() {
            return kendo.antiForgeryTokens();
        }

        //#region Fields
        var master = {
            urlTree: '@Url.Action("GetTree")',
            urlExport: '@Url.Action("ExportOrder")',
            urlImportExcel: '@Url.Action("ImportExcel")',
            toolbar: {
                el: '.page-toolbar',
                $el: {},
                actions: {
                    init: function () { }
                },
                init: function () { }
            },
            grdIndex: {
                selector: '#grdIndex',
                $this: {},
                api: {},
                init: function () { },
                edit: function (e) { },
                create: function (e) { },
                error: function (e) { },
                templates: {
                    flag: function (id, flag) { },
                    name: function (id, name) { },
                    resources: function (id) { },
                    published: function (published) { }
                },

            },
            treeIndex: {
                selector: '#treeIndex',
                $this: {},
                api: {},
                init: function () { }
            },
            btnSearch: {
                el: '#btnSearch',
                $el: {},
                init: function () { }
            },

            init: function () { },
            export: function () { }

        };
        var grdIndex = master.grdIndex;
        var toolbar = master.toolbar;
        var treeIndex = master.treeIndex;
        var btnSearch = master.btnSearch;
        //#endregion

        //#region Events
        grdIndex.error = function (e) {
            if (e.errors) {
                var message = '@T("Common.Error").JavaScriptStringEncode():\n';
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }
        grdIndex.data = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var wareHouseId = null;
        if (!_.isEmpty(treeIndex.api) && treeIndex.api.getActiveNode())
            wareHouseId = treeIndex.api.activeNode.key;

        var searchModel = {
            Keywords: $keywords.val(),
            WareHouesId: wareHouseId
        };
        return searchModel;
        }
        //#endregion
    </script>
}

@section Scripts {
    <script>

        //#region Methods
        master.importExcel = function () {
            app.window.form.open({ url: `${master.urlImportExcel}`, options: { width: '800px' } });
            console.log();
        };
        //#endregion

        //#region Init
        master.init = function () {
            grdIndex.init();
            treeIndex.init();
            btnSearch.init();
            toolbar.init();
        }

        grdIndex.init = function () {
            grdIndex.$this = $(grdIndex.selector);
            grdIndex.api = grdIndex.$this.data('kendoGrid');
        }
        treeIndex.init = function () {

            treeIndex.$this = $(treeIndex.selector);
            treeIndex.$this.fancytree({
                source: {
                    url: master.urlTree,
                    beforeSend: function (jqXHR, settings) {
                        grdIndex.api.clear();
                    },
                    complete: function () {
                        var lastKeySelected = '@Model.WareHouesId';
                        $("#treeIndex").fancytree("getTree").getNodeByKey(lastKeySelected).setActive();
                    }
                },
                postProcess: function (event, data) {
                    data.result = data.response.data;
                },
                activate: function (event, data) {
                    $('#@Html.FieldIdFor(m => m.Keywords)').val("");
                    var node = data.node;
                    if (node.statusNodeType !== 'loading') {
                        grdIndex.api.resetPage();
                    }
                }
            });
            treeIndex.api = treeIndex.$this.fancytree("getTree");

        }
        master.export = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var wareHouseId = null;
            if (!_.isEmpty(treeIndex.api) && treeIndex.api.getActiveNode())
                wareHouseId = treeIndex.api.activeNode.key;
            var searchModel = {
                Keywords: $("#Keywords").val(),
                PageIndex: grdIndex.api.dataSource.page(),
                PageSize: grdIndex.api.dataSource.pageSize(),
                WareHouesId: wareHouseId
            };
            $.ajax({
                url: '@Url.Action("GetExcelReport")',
                data: searchModel,
                success: function (data) {
                    window.location = '@Url.Action("DownloadExcel")' + '?fileGuid=' + data.FileGuid
                        + '&fileName=' + data.FileName;
                }
            });
        };

        toolbar.init = function () {
            toolbar.$el = $(toolbar.el);

            toolbar.actions.init();
        };
        toolbar.actions.init = function () {
            var $toolbar = toolbar.$el;
            $toolbar.find('a[data-action="export"]').click(function (e) {
                master.export();
            });
            $toolbar.find('a[data-action="importexcel"]').click(function (e) {
                master.importExcel();
            });
        };
        btnSearch.init = function () {
            btnSearch.$el = $(btnSearch.el);

            const search = _.debounce(() => {
                grdIndex.api.resetPage();
            }, app.ui.def.debounce.timeout);
            btnSearch.$el.click(function (e) {
                search();
                return false;
            });
        };

        function onGridEdit(e) {
            e.sender.one("dataBound", function (e) {
                e.sender.dataSource.read();
            });
        }

        function bindDataAndRefresh(e) {
            var grid = $(grdIndex.selector).data("kendoGrid");
            grid.bind("dataBound", onGridEdit(e));
        }

        $(document).ready(function () {
            var grid = $(grdIndex.selector).data("kendoGrid");
            grid.bind("save", bindDataAndRefresh);
        });

        $(function () {
            master.init();

        });
        //#endregion
    </script>
}
<!-- #endregion -->
