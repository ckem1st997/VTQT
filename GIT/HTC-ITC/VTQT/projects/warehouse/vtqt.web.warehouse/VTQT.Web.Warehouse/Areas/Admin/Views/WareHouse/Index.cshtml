@model WareHouseSearchModel
<!-- #region Page Header -->

<div class="page-bar">
    <ul class="page-breadcrumb"></ul>
    <div class="page-toolbar">
        <div class="pull-right">
            <a data-action="create" href="javascript:void(0)" class="btn blue btn-sm">
                <i class="flaticon2-plus"></i> @T("Common.AddNew")
            </a>
            <a data-action="edit" href="javascript:void(0)" class="btn yellow btn-sm">
                <i class="flaticon2-pen"></i> @T("Common.Edit")
            </a>
            <a data-action="deletes" href="javascript:void(0)" class="btn red btn-sm">
                <i class="flaticon-delete"></i> @T("Common.Deletes")
            </a>
            <button type="button" class="btn purple btn-sm dropdown-toggle" data-toggle="dropdown">
                <i class="flaticon-more"></i> @T("Common.OtherActions") <i class="fa fa-angle-down"></i>
            </button>
            <ul class="dropdown-menu pull-right" role="menu">
                <li>
                    <a data-action="activate" href="javascript: void(0);">
                        <i class="fa fa-check font-blue"></i> @T("Common.Activate")
                    </a>
                </li>
                <li>
                    <a data-action="deactivate" href="javascript: void(0);">
                        <i class="fa fa-lock font-yellow"></i> @T("Common.Deactivate")
                    </a>
                </li>
                <li>
                    <a data-action="export" href="javascript:void(0)">
                        <i class="fa fa-print"></i> @T("Common.ExportData")
                    </a>
                </li>
                <li>
                    <a data-action="importexcel" href="javascript:void(0)">
                        <i class="fa fa-file-excel-o"></i> @T("Common.ImportExcel")
                    </a>
                </li>
                <li>
                    <a data-action="set-role" href="javascript:void(0)">
                        <i class="fa fa-users"></i> @T("common.authorize")
                    </a>
                </li>
                <li>
                    <a data-action="set-role-user" href="javascript:void(0)">
                        <i class="fa fa-users"></i> @T("common.authorize.children")
                    </a>
                </li>
                <li>
                    <a data-action="list-role-user" href="javascript:void(0)">
                        <i class="fa fa-users"></i> @T("common.authorize.list.role")
                    </a>
                </li>
            </ul>
        </div>
    </div>
</div>
<!-- #endregion -->
<!-- #region Page Content -->
<div class="page-data">
    <div class="row search-form">
        <form>
            <div class="search-label">
                @T("Common.Search"):
            </div>
            <div class="col-md-4">
                <div class="form-group form-group-sm">
                    <div class="input-icon right">
                        @Html.TextBoxFor(m => m.Keywords, new { @class = "form-control", placeholder = T("Common.Fields.EnterKeywords") })
                    </div>
                </div>
            </div>
            <div class="col-md-1">
                <div class="form-group form-group-sm">
                    <button type="submit" id="btnSearch" class="btn btn-default btn-sm">
                        <i class="fa fa-search"></i> @T("Common.GetData")
                    </button>
                </div>
            </div>
        </form>
    </div>
    <div class="row full-height">
        @(Html.Kendo().Grid<WareHouseModel>()
            .Name("grd")
            .HtmlAttributes(new { style = "height: 100%" })
            .Columns(columns =>
            {
                columns.Select().Locked().Width(30);
                columns.Bound(x => x.SetListRole).Locked().Title("Phân quyền").ClientTemplate("#=grd.tmp.role(Id)#").Width(150);
                columns.Bound(x => x.Code).Locked().Width(150);
                columns.Bound(x => x.Name).Locked().ClientTemplate("#=grd.tmp.name(Name)#").Width(300);
                columns.Bound(x => x.Address).Width(400);
                columns.Bound(x => x.Description).Width(400);
                columns.Bound(x => x.Inactive).ClientTemplate("#=grd.tmp.activate(!Inactive)#").Width(130).Centered().Title("Kích hoạt");
                // columns.Bound(x => x.GetListRole).ClientTemplate("#=grd.tmp.role(Name)#").Width(150);
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .ServerOperation(true)
                .PageSize(AdminAreaSettings.GridPageSize)
                .Read(read => read.Action("Get", "WareHouse").Data("grd.data"))
            )
            .NoRecords()
            .Scrollable(scr => scr.Enabled(true))
            .Pageable(pageable => pageable.ButtonCount(AdminAreaSettings.GridButtonCount).Info(true).Input(true).Numeric(true).PageSizes(AdminAreaSettings.GridPageSizeOptions).PreviousNext(true).Refresh(true))
            .Selectable(selectable => selectable.Type(GridSelectionType.Row).Mode(GridSelectionMode.Multiple))
            .Navigatable())
    </div>
</div>

<ul id="mnu" style="display: none">
    <li data-action="details">
        <i class="flaticon-eye font-blue-dark"></i> @T("Common.Details")
    </li>
    <li data-action="create">
        <i class="flaticon2-plus font-blue"></i> @T("Common.AddNew")
    </li>
    <li data-action="edit">
        <i class="flaticon2-pen font-yellow"></i> @T("Common.Edit")
    </li>
    <li data-action="activate">
        <i class="flaticon2-check-mark font-blue"></i> @T("Common.Activate")
    </li>
    <li data-action="deactivate">
        <i class="flaticon-lock font-yellow"></i> @T("Common.Deactivate")
    </li>
    <li class="k-separator"></li>
    <li data-action="refresh">
        <i class="flaticon-refresh font-green"></i> @T("Common.Refresh")
    </li>
    <li data-action="deletes">
        <i class="flaticon-delete font-red"></i> @T("Common.Delete")
    </li>
</ul>
<!-- #endregion -->
<!-- #region Scripts -->

@section HeadScripts {
    <script>
        // Fields
        var master = {
            urlDetails: '@Url.Action("Details")',
            urlCreate: '@Url.Action("Create")',
            urlEdit: '@Url.Action("Edit")',
            urlDeletes: '@Url.Action("Deletes")',
            urlActivates: '@Url.Action("Activates")',
            urlSetRoleByUser: '@Url.Action("SetListRoleByUser")',
            urlExport: '@Url.Action("ExportOrder")',
            urlImportExcel: '@Url.Action("ImportExcel")',
            urlSetListRole: '@Url.Action("SetListRole")',
            urlShowListRole: '@Url.Action("ListRoleByUser")',
            toolbar: {
                el: '.page-toolbar',
                $el: {},
                actions: {
                    init: function () { }
                },
                init: function () { }
            },
            grd: {
                el: '#grd',
                $el: {},
                api: {},
                actions: {
                    init: function () { }
                },
                tmp: {
                    name: function (name) { },
                    role: function (role) { },
                    activate: function (activate) { }
                },
                data: function () { },
                init: function () { }
            },
            mnu: {
                el: '#mnu',
                $el: {},
                api: {},
                init: function () { }
            },
            btnSearch: {
                el: '#btnSearch',
                $el: {},
                init: function () { }
            },
            init: function () { },
            details: function () { },
            getlistrole: function () { },
            setlistrole: function () { },
            showlisrtrole: function () { },
            create: function () { },
            edit: function () { },
            deletes: function () { },
            activates: function (activate, ids) { },
            refresh: function () { },
            actionCallback: function () { },
            export: function () { }
        };
        var toolbar = master.toolbar;
        var grd = master.grd;
        var mnu = master.mnu;
        var btnSearch = master.btnSearch;

        grd.data = function () {
            var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var $status = $('#@Html.FieldIdFor(m => m.Status)');

            var searchModel = {
                Keywords: $keywords.val(),
                Status: $status.val()
            };
            return searchModel;
        };
    </script>
}

@section Scripts {
    <script>
    $(document).ready(function () {
                $('#grd').on("click", "a.setrole", function () {
                    var id = $(this).attr("data-warehouse");
                    master.getlistrole(id);
                });
            });
        // Methods
        master.details = function() {
            var id = grd.api.selectedIds()[0];
            if (id) {
                app.window.form.open({ url: `${master.urlDetails}/${id}`, options: { width: '450px' } });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.showlisrtrole = function() {
            app.window.form.open({ url: `${master.urlShowListRole}`, options: { width: '550px' } });
        };
          master.getlistrole = function (id) {
            var idss = "";
            if (id !== undefined && id !== null && id.length > 0)
                idss = id;
            else
                idss = grd.api.selectedIds()[0];
             if (idss) {
                 app.window.form.open({ url: `${master.urlSetListRole}/${idss}`, options: { width: '750px' } });
             } 
             else {
                 notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
             }
         }; 
          master.setlistrole = function () {
              var ids = grd.api.selectedIds();
                         if (ids.length > 0) {
                             $.ajax({
                                 type: 'POST',
                                 data: { Ids: ids,Active: true, __RequestVerificationToken: app.form.antiForgeryToken.value },
                                 dataType: 'json',
                                 url: master.urlSetRoleByUser,
                                 beforeSend: function(jqXhr, settings) {
                                     app.ui.loader(grd.api.element, true);
                                 },
                                 success: function(msg) {
                                     if (!msg)
                                         return;
                                     if (!msg.HasError) {
                                         master.actionCallback();
                                     }
                                     app.ui.loader(grd.api.element, false);
                                 },
                                 error: function(jqXhr, textStatus, errorThrown) {
                                     app.ui.loader(grd.api.element, false);
                                 }
                             });
                         } else {
                             notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
                         }
             
         };
        master.importExcel = function () {
            app.window.form.open({ url: `${master.urlImportExcel}`, options: { width: '800px' } });
            console.log();
        };
        master.create = function() {
            app.window.form.open({ url: master.urlCreate, options: { width: '450px' }, callback: master.actionCallback });
        };
        master.edit = function() {
            var id = grd.api.selectedIds()[0];
            if (id) {
                app.window.form.open({ url: `${master.urlEdit}/${id}`, options: { width: '450px' }, callback: master.actionCallback });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.deletes = function() {
            var ids = grd.api.selectedIds();
            if (ids.length > 0) {
                app.window.deletes.open({ url: master.urlDeletes, ids: ids, options: { width: '450px' }, callback: master.actionCallback });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.activates = function(activate, ids) {
            ids = ids || grd.api.selectedIds();
            if (ids.length > 0) {
                $.ajax({
                    type: 'POST',
                    data: { Ids: ids, Active: activate, __RequestVerificationToken: app.form.antiForgeryToken.value },
                    dataType: 'json',
                    url: master.urlActivates,
                    beforeSend: function(jqXhr, settings) {
                        app.ui.loader(grd.api.element, true);
                    },
                    success: function(msg) {
                        if (!msg)
                            return;
                        if (!msg.HasError) {
                            master.actionCallback();
                        }
                        app.ui.loader(grd.api.element, false);
                    },
                    error: function(jqXhr, textStatus, errorThrown) {
                        app.ui.loader(grd.api.element, false);
                    }
                });
            } else {
                notify({ text: '@T("Notifies.NoItemsSelected").JavaScriptStringEncode()', type: 'info' });
            }
        };
        master.refresh = function() {
            grd.api.reload();
        };
        master.actionCallback = function() {
            grd.api.reload();
        };
                 master.export = function () {
             var $keywords = $('#@Html.FieldIdFor(m => m.Keywords)');
            var $status = $('#@Html.FieldIdFor(m => m.Status)');

            var searchModel = {
                Keywords: $keywords.val(),
                Status: $status.val(),
                PageIndex: grd.api.dataSource.page(),
                PageSize: grd.api.dataSource.pageSize(),
            };
            $.ajax({
                url: '@Url.Action("GetExcelReport")',
                data: searchModel,
                success: function (data) {
                    window.location = '@Url.Action("DownloadExcel")' + '?fileGuid=' + data.FileGuid
                        + '&fileName=' + data.FileName;
                }
            });
        };
        // Inits
        master.init = function() {
            toolbar.init();
            grd.init();
            mnu.init();
            btnSearch.init();
        };

        toolbar.init = function() {
            toolbar.$el = $(toolbar.el);

            toolbar.actions.init();
        };
        toolbar.actions.init = function() {
            var $toolbar = toolbar.$el;
            $toolbar.find('a[data-action="export"]').click(function (e) {
                master.export();
            });
            $toolbar.find('a[data-action="importexcel"]').click(function (e) {
                master.importExcel();
            });
            $toolbar.find('a[data-action="set-role"]').click(function (e) {
                master.getlistrole();
            });
            $toolbar.find('a[data-action="set-role-user"]').click(function (e) {
              master.setlistrole();
            });           
            $toolbar.find('a[data-action="list-role-user"]').click(function (e) {
              master.showlisrtrole();
            });
            admin.pageToolbar.actions.initCreate($toolbar, master.create);
            admin.pageToolbar.actions.initEdit($toolbar, master.edit);
            admin.pageToolbar.actions.initDeletes($toolbar, master.deletes);
            admin.pageToolbar.actions.initActivate($toolbar, master.activates);
        };
        grd.init = function() {
            grd.$el = $(grd.el);
            grd.api = grd.$el.data('kendoGrid');

            grd.actions.init();
        };
        grd.actions.init = function () {
            grd.api.initDblClick(master.details);
            grd.api.initEdit(master.edit);
            grd.api.initActivate(master.activates);
        };
        mnu.init = function() {
            mnu.$el = $(mnu.el);
            mnu.$el.kendoContextMenu({
                orientation: 'vertical',
                target: master.grd.el,
                filter: 'tbody tr[role="row"]',
                animation: {
                    open: { effects: "fadeIn" },
                    duration: 0
                },
                open: function(e) {
                    var $row = $(e.target);
                    var selected = master.grd.api.select().length;
                    if (selected === 0 || (!$row.hasClass('k-state-selected') && selected > 0)) {
                        master.grd.api.clearSelection();
                        master.grd.api.select($row);
                    }
                },
                select: function(e) {
                    var action = $(e.item).attr('data-action');
                    switch (action) {
                    case 'details':
                        master.details();
                            break;
                    case 'importExcel':
                            master.importExcel();
                            break;
                    case 'create':
                        master.create();
                        break;
                    case 'edit':
                        master.edit();
                        break;
                    case 'set-role':
                        master.getlistrole();
                        break;
                    case 'activate':
                        master.activates(true);
                        break;
                    case 'deactivate':
                        master.activates(false);
                        break;
                    case 'deletes':
                        master.deletes();
                        break;
                    case 'refresh':
                        master.refresh();
                        break;
                    default:
                        break;
                    }
                }
            });
            mnu.api = mnu.$el.data("kendoContextMenu");
        };
        btnSearch.init = function() {
            btnSearch.$el = $(btnSearch.el);

            const search = _.debounce(() => {
                grd.api.resetPage();
            }, app.ui.def.debounce.timeout);
            btnSearch.$el.click(function (e) {
                search();
                return false;
            });
        };

        // Templates
        grd.tmp.name = function(name) {
            return `<a data-action="edit" href="javascript:void(0)">${name}</a>`;
        };
        grd.tmp.role = function(id) {
            return `<a class="setrole learn-more" data-warehouse=${id} data-action="set-role"  href="javascript:void(0)" class="learn-more"> <span class="circle" aria-hidden="true"> <span class="icon arrow"></span> </span> <span class="button-text">Phân quyền</span> </a>`;
        };
        grd.tmp.activate = function(activate) {
            return activate ? '<i data-action="deactivate" class="fa fa-check green pointer"></i>' : '<i data-action="activate" class="fa fa-lock yellow pointer"></i>';
        };


        // Startup
        $(function() {
            master.init();
            
        });
        
    </script>
}

<style> 
a.learn-more {
	 position: relative;
	 display: inline-block;
	 cursor: pointer;
	 outline: none;
	 border: 0;
	 vertical-align: middle;
	 text-decoration: none;
	 background: transparent;
	 padding: 0;
	 font-size: inherit;
	 font-family: inherit;
}
 a.learn-more {
	 width: 12rem;
	 height: auto;
}
 a.learn-more .circle {
	 transition: all 0.45s cubic-bezier(0.65, 0, 0.076, 1);
	 position: relative;
	 display: block;
	 margin: 0;
	 width: 3rem;
	 height: 3rem;
	 /*background: #282936;*/
    background: #5c66ef;
	 border-radius: 1.625rem;
}
 a.learn-more .circle .icon {
	 transition: all 0.45s cubic-bezier(0.65, 0, 0.076, 1);
	 position: absolute;
	 top: 0;
	 bottom: 0;
	 margin: auto;
	 background: #fff;
}
 a.learn-more .circle .icon.arrow {
	 transition: all 0.45s cubic-bezier(0.65, 0, 0.076, 1);
	 left: 0.625rem;
	 width: 1.125rem;
	 height: 0.125rem;
	 background: none;
}
 a.learn-more .circle .icon.arrow::before {
	 position: absolute;
	 content: '';
	 top: -0.25rem;
	 right: 0.0625rem;
	 width: 0.625rem;
	 height: 0.625rem;
	 border-top: 0.125rem solid #fff;
	 border-right: 0.125rem solid #fff;
	 transform: rotate(45deg);
}
 a.learn-more .button-text {
	 transition: all 0.45s cubic-bezier(0.65, 0, 0.076, 1);
	 position: absolute;
	 top: 0;
	 left: 0;
	 right: 0;
	 bottom: 0;
	 padding: 0.65rem 0;
	 margin: 0 0 0 1.85rem;
	 color: #282936;
	 font-weight: 700;
	 line-height: 1.6;
	 text-align: center;
}
 a:hover .circle {
	 width: 100%;
}
 a:hover .circle .icon.arrow {
	 background: #fff;
	 transform: translate(1rem, 0);
}
 a:hover .button-text {
	 color: #fff;
}



button-61:hover i.flaticon2-user{
color: white;
}
    /* CSS */
    .button-61 {
      align-items: center;
      appearance: none;
      border-radius: 50px;
      border-style: none;
      box-shadow: rgba(0, 0, 0, .2) 0 3px 1px -2px,rgba(0, 0, 0, .14) 0 2px 2px 0,rgba(0, 0, 0, .12) 0 1px 5px 0;
      box-sizing: border-box;
      color: #fff;
      cursor: pointer;
      display: inline-flex;
      font-family: Roboto,sans-serif;
      font-size: .875rem;
      font-weight: 500;
      height: 36px;
      justify-content: center;
      letter-spacing: .0892857em;
      line-height: normal;
      min-width: 36px;
      outline: none;
      overflow: visible;
      padding: 0 11px;
      position: relative;
      text-align: center;
      text-decoration: none;
      text-transform: uppercase;
      transition: box-shadow 280ms cubic-bezier(.4, 0, .2, 1);
      user-select: none;
      -webkit-user-select: none;
      touch-action: manipulation;
      vertical-align: middle;
      will-change: transform,opacity;
    }
    
    .button-61:hover {
      box-shadow: #7727e9;
    }
    
    .button-61:disabled {
      background-color: rgba(0, 0, 0, .12);
      box-shadow: rgba(0, 0, 0, .2) 0 0 0 0, rgba(0, 0, 0, .14) 0 0 0 0, rgba(0, 0, 0, .12) 0 0 0 0;
      color: rgba(0, 0, 0, .37);
      cursor: default;
      pointer-events: none;
    }
    
    .button-61:not(:disabled) {
      background-color: #6200ee;
    }
    
    .button-61:focus {
      box-shadow: rgba(0, 0, 0, .2) 0 2px 4px -1px, rgba(0, 0, 0, .14) 0 4px 5px 0, rgba(0, 0, 0, .12) 0 1px 10px 0;
    }
    
    .button-61:active {
      box-shadow: rgba(0, 0, 0, .2) 0 5px 5px -3px, rgba(0, 0, 0, .14) 0 8px 10px 1px, rgba(0, 0, 0, .12) 0 3px 14px 2px;
      background: #A46BF5;
    }
</style>
<!-- #endregion -->