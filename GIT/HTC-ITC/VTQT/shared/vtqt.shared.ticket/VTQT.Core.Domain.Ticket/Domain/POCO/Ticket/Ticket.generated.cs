//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

using VTQT.Core.Domain.Apps;
using VTQT.Core.Domain.Localization;

namespace VTQT.Core.Domain.Ticket
{
	/// <summary>
	/// Database       : TicketManagement
	/// Data Source    : 192.168.100.43
	/// Server Version : 8.0.27-0ubuntu0.20.04.1
	/// </summary>
	public partial class TicketDataConnection : LinqToDB.Data.DataConnection
	{
		/// <summary>
		/// Phân cấp sự cố
		/// </summary>
		public ITable<Priority>              Priorities              { get { return this.GetTable<Priority>(); } }
		/// <summary>
		/// Danh sách các Project
		/// </summary>
		public ITable<Project>               Projects                { get { return this.GetTable<Project>(); } }
		/// <summary>
		/// Bản quan hệ n-n
		/// </summary>
		public ITable<ProjectPriority>       ProjectPriorities       { get { return this.GetTable<ProjectPriority>(); } }
		/// <summary>
		/// Bản quan hệ n-n
		/// </summary>
		public ITable<ProjectStatus>         ProjectStatus           { get { return this.GetTable<ProjectStatus>(); } }
		/// <summary>
		/// Bản quan hệ n-n
		/// </summary>
		public ITable<ProjectTicketCategory> ProjectTicketCategories { get { return this.GetTable<ProjectTicketCategory>(); } }
		/// <summary>
		/// Tình trạng của ticket
		/// </summary>
		public ITable<Status>                Status                  { get { return this.GetTable<Status>(); } }
		/// <summary>
		/// Phân nhóm trạng thái
		/// </summary>
		public ITable<StatusCategory>        StatusCategories        { get { return this.GetTable<StatusCategory>(); } }
		/// <summary>
		/// Danh sách ticket: Gồm các thông tin tổng quan
		/// </summary>
		public ITable<Ticket>                Tickets                 { get { return this.GetTable<Ticket>(); } }
		/// <summary>
		/// Thông tin chi tiết ticket trạm (quan hệ 1-1 với bảng ticket)
		/// </summary>
		public ITable<Ticket_Tram>           Ticket_Trams            { get { return this.GetTable<Ticket_Tram>(); } }
		/// <summary>
		/// Loại Ticket
		/// </summary>
		public ITable<TicketCategory>        TicketCategories        { get { return this.GetTable<TicketCategory>(); } }

		public TicketDataConnection()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public TicketDataConnection(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public TicketDataConnection(LinqToDbConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public TicketDataConnection(LinqToDbConnectionOptions<TicketDataConnection> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	/// <summary>
	/// Phân cấp sự cố
	/// </summary>
	[Serializable]
	[Table("Priority")]
	public partial class Priority : BaseEntity
	{
		/// <summary>
		/// Mã
		/// </summary>
		[Column,    Nullable] public string Code      { get; set; } // varchar(10)
		/// <summary>
		/// Tên
		/// </summary>
		[Column,    Nullable] public string Name      { get; set; } // varchar(50)
		/// <summary>
		/// Dự án (FK: Project)
		/// </summary>
		[Column,    Nullable] public string ProjectId { get; set; } // varchar(36)
		[Column, NotNull    ] public bool   Inactive  { get; set; } // bit(1)

		#region Associations

		/// <summary>
		/// FK_Priority_PK_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Priority_PK_Project", BackReferenceName="Priorities")]
		public Project Project { get; set; }

		/// <summary>
		/// FK_ProjectPriority_PK_Priority_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="PriorityId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProjectPriority> ProjectPriorities { get; set; }

		#endregion
	}

	/// <summary>
	/// Danh sách các Project
	/// </summary>
	[Serializable]
	[Table("Project")]
	public partial class Project : BaseEntity
	{
		/// <summary>
		/// Mã dự án
		/// </summary>
		[Column, NotNull] public string Code     { get; set; } // varchar(20)
		/// <summary>
		/// Tên dự án
		/// </summary>
		[Column, NotNull] public string Name     { get; set; } // varchar(50)
		[Column, NotNull] public bool   Inactive { get; set; } // bit(1)

		#region Associations

		/// <summary>
		/// FK_Priority_PK_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Priority> Priorities { get; set; }

		/// <summary>
		/// FK_ProjectPriority_PK_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProjectPriority> ProjectPriorities { get; set; }

		/// <summary>
		/// FK_ProjectStatus_PK_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProjectStatus> ProjectStatus { get; set; }

		/// <summary>
		/// FK_ProjectTicketCategory_PK_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProjectTicketCategory> ProjectTicketCategories { get; set; }

		/// <summary>
		/// FK_Status_PK_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Status> Status { get; set; }

		/// <summary>
		/// FK_TicketCategory_PK_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<TicketCategory> TicketCategories { get; set; }

		/// <summary>
		/// FK_Tickets_PK_Project_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Ticket> Tickets { get; set; }

		#endregion
	}

	/// <summary>
	/// Bản quan hệ n-n
	/// </summary>
	[Serializable]
	[Table("ProjectPriority")]
	public partial class ProjectPriority : BaseEntity
	{
		/// <summary>
		/// Dự án (FK: Project)
		/// </summary>
		[Column,    Nullable] public string ProjectId  { get; set; } // varchar(36)
		/// <summary>
		/// Độ ưu tiên (FK: Priority)
		/// </summary>
		[Column,    Nullable] public string PriorityId { get; set; } // varchar(36)

		#region Associations

		/// <summary>
		/// FK_ProjectPriority_PK_Priority
		/// </summary>
		[Association(ThisKey="PriorityId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_ProjectPriority_PK_Priority", BackReferenceName="ProjectPriorities")]
		public Priority Priority { get; set; }

		/// <summary>
		/// FK_ProjectPriority_PK_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_ProjectPriority_PK_Project", BackReferenceName="ProjectPriorities")]
		public Project Project { get; set; }

		#endregion
	}

	/// <summary>
	/// Bản quan hệ n-n
	/// </summary>
	[Serializable]
	[Table("ProjectStatus")]
	public partial class ProjectStatus : BaseEntity
	{
		[Column,    Nullable] public string ProjectId { get; set; } // varchar(36)
		[Column,    Nullable] public string StatusId  { get; set; } // varchar(36)

		#region Associations

		/// <summary>
		/// FK_ProjectStatus_PK_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_ProjectStatus_PK_Project", BackReferenceName="ProjectStatus")]
		public Project Project { get; set; }

		/// <summary>
		/// FK_ProjectStatus_PK_Status
		/// </summary>
		[Association(ThisKey="StatusId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_ProjectStatus_PK_Status", BackReferenceName="ProjectStatus")]
		public Status Status { get; set; }

		#endregion
	}

	/// <summary>
	/// Bản quan hệ n-n
	/// </summary>
	[Serializable]
	[Table("ProjectTicketCategory")]
	public partial class ProjectTicketCategory : BaseEntity
	{
		/// <summary>
		/// Dự án (FK: Project)
		/// </summary>
		[Column,    Nullable] public string ProjectId        { get; set; } // varchar(36)
		/// <summary>
		/// Loại ticket (FK: TicketCategory)
		/// </summary>
		[Column,    Nullable] public string TicketCategoryId { get; set; } // varchar(36)

		#region Associations

		/// <summary>
		/// FK_ProjectTicketCategory_PK_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_ProjectTicketCategory_PK_Project", BackReferenceName="ProjectTicketCategories")]
		public Project Project { get; set; }

		/// <summary>
		/// FK_ProjectTicketCategory_PK_TicketCategory_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="TicketCategoryId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProjectTicketCategory> ProjectTicketCategories { get; set; }

		/// <summary>
		/// FK_Status_PK_StatusCategory_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StatusCategoryId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Status> Status { get; set; }

		/// <summary>
		/// FK_ProjectTicketCategory_PK_TicketCategory
		/// </summary>
		[Association(ThisKey="TicketCategoryId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_ProjectTicketCategory_PK_TicketCategory", BackReferenceName="ProjectTicketCategories")]
		public ProjectTicketCategory TicketCategory { get; set; }

		#endregion
	}

	/// <summary>
	/// Tình trạng của ticket
	/// </summary>
	[Serializable]
	[Table("Status")]
	public partial class Status : BaseEntity
	{
		/// <summary>
		/// Mã
		/// </summary>
		[Column, NotNull    ] public string Code             { get; set; } // varchar(20)
		/// <summary>
		/// Tên
		/// </summary>
		[Column, NotNull    ] public string Name             { get; set; } // varchar(50)
		/// <summary>
		/// Nhóm trạng thái (FK: StatusCategory)
		/// </summary>
		[Column,    Nullable] public string StatusCategoryId { get; set; } // varchar(36)
		/// <summary>
		/// Dự án (FK: Project)
		/// </summary>
		[Column,    Nullable] public string ProjectId        { get; set; } // varchar(36)
		[Column, NotNull    ] public bool   Inactive         { get; set; } // bit(1)

		#region Associations

		/// <summary>
		/// FK_Status_PK_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Status_PK_Project", BackReferenceName="Status")]
		public Project Project { get; set; }

		/// <summary>
		/// FK_ProjectStatus_PK_Status_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="StatusId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<ProjectStatus> ProjectStatus { get; set; }

		/// <summary>
		/// FK_Status_PK_StatusCategory
		/// </summary>
		[Association(ThisKey="StatusCategoryId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Status_PK_StatusCategory", BackReferenceName="Status")]
		public ProjectTicketCategory StatusCategory { get; set; }

		#endregion
	}

	/// <summary>
	/// Phân nhóm trạng thái
	/// </summary>
	[Serializable]
	[Table("StatusCategory")]
	public partial class StatusCategory : BaseEntity
	{
		/// <summary>
		/// Mã
		/// </summary>
		[Column,    Nullable] public string Code     { get; set; } // varchar(10)
		/// <summary>
		/// Tên
		/// </summary>
		[Column,    Nullable] public string Name     { get; set; } // varchar(50)
		[Column,    Nullable] public bool?  Inactive { get; set; } // bit(1)
	}

	/// <summary>
	/// Danh sách ticket: Gồm các thông tin tổng quan
	/// </summary>
	[Serializable]
	[Table("Ticket")]
	public partial class Ticket : BaseEntity
	{
		/// <summary>
		/// Mã ticket tự sinh
		/// </summary>
		[Column, NotNull    ] public string    Code         { get; set; } // varchar(20)
		/// <summary>
		/// Tiêu đề của ticket
		/// </summary>
		[Column, NotNull    ] public string    Subject      { get; set; } // varchar(255)
		/// <summary>
		/// Mô tả chi tiết của ticket
		/// </summary>
		[Column,    Nullable] public string    Detail       { get; set; } // varchar(500)
		/// <summary>
		/// Ngày bắt đầu
		/// </summary>
		[Column,    Nullable] public DateTime? StartDate    { get; set; } // datetime
		/// <summary>
		/// Ngày kết thúc
		/// </summary>
		[Column,    Nullable] public DateTime? FinishDate   { get; set; } // datetime
		/// <summary>
		/// Thời hạn xử lý
		/// </summary>
		[Column,    Nullable] public DateTime? Deadline     { get; set; } // datetime
		/// <summary>
		/// Thời gian xử lý
		/// </summary>
		[Column, NotNull    ] public int       Duration     { get; set; } // int
		/// <summary>
		/// Giao cho
		/// </summary>
		[Column,    Nullable] public string    Assignee     { get; set; } // varchar(100)
		/// <summary>
		/// Trạng thái
		/// </summary>
		[Column,    Nullable] public string    Status       { get; set; } // varchar(10)
		/// <summary>
		/// Mức độ nghiêm trọng
		/// </summary>
		[Column,    Nullable] public string    Priority     { get; set; } // varchar(10)
		/// <summary>
		/// Dự án (FK: Project)
		/// </summary>
		[Column, NotNull    ] public string    ProjectId    { get; set; } // varchar(36)
		/// <summary>
		/// Phân loại sự cố
		/// </summary>
		[Column,    Nullable] public string    Category     { get; set; } // varchar(10)
		/// <summary>
		/// Ngừng theo dõi
		/// </summary>
		[Column, NotNull    ] public bool      Inactive     { get; set; } // bit(1)
		/// <summary>
		/// Ngày tạo
		/// </summary>
		[Column, NotNull    ] public DateTime  CreatedDate  { get; set; } // datetime
		/// <summary>
		/// Tên người tạo
		/// </summary>
		[Column,    Nullable] public string    CreatedBy    { get; set; } // varchar(100)
		/// <summary>
		/// Ngày sủa
		/// </summary>
		[Column, NotNull    ] public DateTime  ModifiedDate { get; set; } // timestamp
		/// <summary>
		/// Tên người sủa
		/// </summary>
		[Column,    Nullable] public string    ModifiedBy   { get; set; } // varchar(100)

		#region Associations

		/// <summary>
		/// FK_Tickets_PK_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Tickets_PK_Project", BackReferenceName="Tickets")]
		public Project Project { get; set; }

		/// <summary>
		/// FK_TicketTram_PK_Ticket_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="TicketId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Ticket_Tram> TicketTrams { get; set; }

		#endregion
	}

	/// <summary>
	/// Thông tin chi tiết ticket trạm (quan hệ 1-1 với bảng ticket)
	/// </summary>
	[Serializable]
	[Table("Ticket_Tram")]
	public partial class Ticket_Tram : BaseEntity
	{
		[Column,    Nullable] public string TicketId { get; set; } // varchar(36)

		#region Associations

		/// <summary>
		/// FK_TicketTram_PK_Ticket
		/// </summary>
		[Association(ThisKey="TicketId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_TicketTram_PK_Ticket", BackReferenceName="TicketTrams")]
		public Ticket Ticket { get; set; }

		#endregion
	}

	/// <summary>
	/// Loại Ticket
	/// </summary>
	[Serializable]
	[Table("TicketCategory")]
	public partial class TicketCategory : BaseEntity, ILocalizedEntity
	{
		/// <summary>
		/// Mã
		/// </summary>
		[Column, NotNull] public string Code      { get; set; } // varchar(20)
		/// <summary>
		/// Tên
		/// </summary>
		[Column, NotNull] public string Name      { get; set; } // varchar(50)
		/// <summary>
		/// Dự án (FK: Project)
		/// </summary>
		[Column, NotNull] public string ProjectId { get; set; } // varchar(36)
		[Column, NotNull] public bool   Inactive  { get; set; } // bit(1)

		#region Associations

		/// <summary>
		/// FK_TicketCategory_PK_Project
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_TicketCategory_PK_Project", BackReferenceName="TicketCategories")]
		public Project Project { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Priority Find(this ITable<Priority> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Project Find(this ITable<Project> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProjectPriority Find(this ITable<ProjectPriority> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProjectStatus Find(this ITable<ProjectStatus> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ProjectTicketCategory Find(this ITable<ProjectTicketCategory> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Status Find(this ITable<Status> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static StatusCategory Find(this ITable<StatusCategory> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Ticket Find(this ITable<Ticket> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Ticket_Tram Find(this ITable<Ticket_Tram> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TicketCategory Find(this ITable<TicketCategory> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}

#pragma warning restore 1591
